,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]","Din contextul furnizat, modelul de organizare a datelor prezentat ca predominant în curs este **modelul relațional**. 

Aceasta este evident din titlul ""Curs 13. Modelul relational de reprezentare a bazelor de date"", care subliniază clar concentrarea cursului pe acest model. 

De asemenea, textul detaliază caracteristicile modelului relațional, cum ar fi organizarea datelor în tabele, utilizarea cheilor primare și străine pentru integritate, și prezentarea limbajului SQL standardizat pentru interogare. 
","În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]","Din contextul furnizat, modelul de organizare a datelor prezentat ca predominant în curs este **modelul relațional**. 

Aceasta este evident din titlul ""Curs 13. Modelul relational de reprezentare a bazelor de date"", care subliniază clar concentrarea cursului pe acest model. 

De asemenea, textul detaliază caracteristicile modelului relațional, cum ar fi organizarea datelor în tabele, utilizarea cheilor primare și străine pentru integritate, și prezentarea limbajului SQL standardizat pentru interogare. 
",relațional,,,,,0.018160849415439308,0.05555555555555556,
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este **PL/SQL**. 
",Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este **PL/SQL**. 
",PL/SQL,,,,,0.08513012360883548,0.2857142857142857,
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']","Contextul furnizat nu conține răspunsul la întrebarea ""Cu ce clauză SQL se filtrează rândurile dintr-o interogare?"". Informația din context se concentrează pe subinterogări, care sunt instrucțiuni SELECT imbricate. 

Pentru a filtra rânduri dintr-o interogare SQL, se folosește clauza **WHERE**. Clauza WHERE specifică condițiile care trebuie îndeplinite de rândurile din tabelul selectat.

**Exemple:**

* `SELECT * FROM Clients WHERE City = 'București';` - Selectează toate coloanele din tabelul Clients, unde orașul este București.
* `SELECT Name FROM Employees WHERE Salary > 5000;` - Selectează numele din tabelul Employees, unde salariul este mai mare de 5000.
",Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']","Contextul furnizat nu conține răspunsul la întrebarea ""Cu ce clauză SQL se filtrează rândurile dintr-o interogare?"". Informația din context se concentrează pe subinterogări, care sunt instrucțiuni SELECT imbricate. 

Pentru a filtra rânduri dintr-o interogare SQL, se folosește clauza **WHERE**. Clauza WHERE specifică condițiile care trebuie îndeplinite de rândurile din tabelul selectat.

**Exemple:**

* `SELECT * FROM Clients WHERE City = 'București';` - Selectează toate coloanele din tabelul Clients, unde orașul este București.
* `SELECT Name FROM Employees WHERE Salary > 5000;` - Selectează numele din tabelul Employees, unde salariul este mai mare de 5000.
",WHERE,,,,,0.0,0.01941747572815534,
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']","Contextul furnizat nu conține informații despre funcții SQL care convertesc șirurile de caractere în majuscule. 
",Ce funcție SQL transformă șirurile de caractere în majuscule?,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']","Contextul furnizat nu conține informații despre funcții SQL care convertesc șirurile de caractere în majuscule. 
",UPPER,,,,,0.0,0.0,
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']","Înregistrările se grupează folosind clauza **GROUP BY**.
",Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']","Înregistrările se grupează folosind clauza **GROUP BY**.
",GROUP BY,,,,,0.06772997136689071,0.4,
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']","Contextul furnizat nu conține informații despre tipul de subinterogare care returnează o singură valoare pentru o condiție din clauza WHERE. 
",Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']","Contextul furnizat nu conține informații despre tipul de subinterogare care returnează o singură valoare pentru o condiție din clauza WHERE. 
",subinterogare single-row,,,,,0.01914603069010251,0.07692307692307691,
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']","Instrucțiunea SQL care permite inserarea sau actualizarea condiționată a datelor este **MERGE**. 
",Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']","Instrucțiunea SQL care permite inserarea sau actualizarea condiționată a datelor este **MERGE**. 
",MERGE,,,,,0.024455939372403628,0.13333333333333333,
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**.
",Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**.
",NOT NULL,,,,,0.03829206138020502,0.2222222222222222,
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Din contextul furnizat nu se poate identifica o instrucțiune SQL specifică pentru crearea unei vederi. Contextul se concentrează mai mult pe utilizarea vederilor, nu pe crearea lor. 

Pentru a crea o vedere, se folosește instrucțiunea **CREATE VIEW**. 

Un exemplu simplu ar fi:

```sql
CREATE VIEW MyView AS
SELECT * FROM Customers;
```

Această instrucțiune creează o vedere numită `MyView` care conține toate datele din tabelul `Customers`.
","Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Din contextul furnizat nu se poate identifica o instrucțiune SQL specifică pentru crearea unei vederi. Contextul se concentrează mai mult pe utilizarea vederilor, nu pe crearea lor. 

Pentru a crea o vedere, se folosește instrucțiunea **CREATE VIEW**. 

Un exemplu simplu ar fi:

```sql
CREATE VIEW MyView AS
SELECT * FROM Customers;
```

Această instrucțiune creează o vedere numită `MyView` care conține toate datele din tabelul `Customers`.
",CREATE VIEW,,,,,0.0,0.05633802816901409,
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']","Din contextul furnizat, nu este clar ce obiect SQL este folosit pentru a genera automat valori unice.  Informația din context se concentrează pe funcțiile SQL și pe indecșii, dar nu menționează un obiect specific pentru generarea de valori unice. 
","Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']","Din contextul furnizat, nu este clar ce obiect SQL este folosit pentru a genera automat valori unice.  Informația din context se concentrează pe funcțiile SQL și pe indecșii, dar nu menționează un obiect specific pentru generarea de valori unice. 
",SEQUENCE,,,,,0.0,0.0,
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']","Din contextul furnizat nu se specifica instrucțiunea SQL specifică pentru crearea unui utilizator nou în Oracle. Textul se concentrează pe controlul accesului în general și pe beneficiile utilizării lui.  

Pentru a crea un nou utilizator în Oracle, se folosește comanda `CREATE USER`, urmată de numele utilizatorului, parola și alte opțiuni opționale. De exemplu:

```sql
CREATE USER new_user IDENTIFIED BY ""ParolaUtilizatorului"";
```

Pentru a acorda permisiuni specificate, se folosește comanda `GRANT`, iar pentru a retrage permisiuni se folosește `REVOKE`.

Pentru mai multe detalii și exemple, vă recomand să consultați documentația oficială Oracle sau un tutorial online. 
","Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']","Din contextul furnizat nu se specifica instrucțiunea SQL specifică pentru crearea unui utilizator nou în Oracle. Textul se concentrează pe controlul accesului în general și pe beneficiile utilizării lui.  

Pentru a crea un nou utilizator în Oracle, se folosește comanda `CREATE USER`, urmată de numele utilizatorului, parola și alte opțiuni opționale. De exemplu:

```sql
CREATE USER new_user IDENTIFIED BY ""ParolaUtilizatorului"";
```

Pentru a acorda permisiuni specificate, se folosește comanda `GRANT`, iar pentru a retrage permisiuni se folosește `REVOKE`.

Pentru mai multe detalii și exemple, vă recomand să consultați documentația oficială Oracle sau un tutorial online. 
",CREATE USER,,,,,0.0,0.03773584905660378,
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","""Modelul relațional de reprezentare a bazelor de date, care organizează datele în tabele interconectate, este descris în acest capitol.""

Din contextul dat, se poate deduce că modelul relațional este descris în capitolul ""Curs 13. Modelul relational de reprezentare a bazelor de date"". 

De asemenea, în contextul furnizat, se descrie modul în care se organizează datele în tabele interconectate, prin intermediul cheilor primare și străine.
","Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","""Modelul relațional de reprezentare a bazelor de date, care organizează datele în tabele interconectate, este descris în acest capitol.""

Din contextul dat, se poate deduce că modelul relațional este descris în capitolul ""Curs 13. Modelul relational de reprezentare a bazelor de date"". 

De asemenea, în contextul furnizat, se descrie modul în care se organizează datele în tabele interconectate, prin intermediul cheilor primare și străine.
",relațional,,,,,0.008954307276600085,0.05797101449275362,
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Cuvântul cheie SQL pentru definirea unei chei primare este **PRIMARY KEY**. 

Această clauză este folosită în definirea tabelelor (CREATE TABLE) sau modificarea lor (ALTER TABLE) pentru a specifica coloana sau coloanele care vor servi drept cheie primară.

De exemplu, în codul SQL:

```sql
CREATE TABLE Student (
  CODSTUD INT PRIMARY KEY,
  NUMEPREN VARCHAR(50),
  AN INT,
  FACULTATE VARCHAR(50),
  GRUPA INT,
  MEDADM DECIMAL(4,2)
);
```

""CODSTUD"" este definit ca cheie primară, asigurând unicitatea fiecărui student în baza de date.
",Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Cuvântul cheie SQL pentru definirea unei chei primare este **PRIMARY KEY**. 

Această clauză este folosită în definirea tabelelor (CREATE TABLE) sau modificarea lor (ALTER TABLE) pentru a specifica coloana sau coloanele care vor servi drept cheie primară.

De exemplu, în codul SQL:

```sql
CREATE TABLE Student (
  CODSTUD INT PRIMARY KEY,
  NUMEPREN VARCHAR(50),
  AN INT,
  FACULTATE VARCHAR(50),
  GRUPA INT,
  MEDADM DECIMAL(4,2)
);
```

""CODSTUD"" este definit ca cheie primară, asigurând unicitatea fiecărui student în baza de date.
",PRIMARY KEY,,,,,0.052559234208168874,0.048192771084337345,
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","În proiectarea bazelor de date relaționale, **modelarea logică** este etapa care transformă modelul conceptual (reprezentat prin diagrame ER) într-un model relațional, pregătindu-l pentru implementarea efectivă a structurii bazei de date. 
","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","În proiectarea bazelor de date relaționale, **modelarea logică** este etapa care transformă modelul conceptual (reprezentat prin diagrame ER) într-un model relațional, pregătindu-l pentru implementarea efectivă a structurii bazei de date. 
",modelarea logică,,,,,0.01938188604019842,0.1081081081081081,
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']","Conform cursului, o bază de date este reprezentată cu ajutorul modelului relaţional ca o colecție de tabele. 
","Ce este o bază de date, conform cursului?","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']","Conform cursului, o bază de date este reprezentată cu ajutorul modelului relaţional ca o colecție de tabele. 
","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",,,,,0.12311103973058554,0.43902439024390244,
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']","Din contextul furnizat, Oracle este un server de baze de date, oferind o versiune simplificată numită ""Oracle Database 11g Expres Edition"" care poate fi folosită pentru a rula aplicații de laborator. 
",Ce reprezintă Oracle în cursul prezentat?,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']","Din contextul furnizat, Oracle este un server de baze de date, oferind o versiune simplificată numită ""Oracle Database 11g Expres Edition"" care poate fi folosită pentru a rula aplicații de laborator. 
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",,,,,0.04674499231292217,0.14814814814814814,
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza `ORDER BY` într-o interogare `SELECT` specifică ordinea în care sunt ordonate rândurile din rezultatul interogării. 

Poate fi folosită pentru a ordona rândurile crescător (ASC) sau descrescător (DESC) în funcție de una sau mai multe coloane.
",Ce face clauza ORDER BY într-o interogare SELECT?,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza `ORDER BY` într-o interogare `SELECT` specifică ordinea în care sunt ordonate rândurile din rezultatul interogării. 

Poate fi folosită pentru a ordona rândurile crescător (ASC) sau descrescător (DESC) în funcție de una sau mai multe coloane.
","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",,,,,0.042377131997527843,0.16129032258064516,
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform cursului, funcțiile în SQL se împart în două categorii:

1. **Funcții referitoare la o singură înregistrare (single-row functions)**: Aceste funcții operează pe o singură înregistrare din tabelă, returnând un rezultat pentru fiecare linie.
2. **Funcții referitoare la mai multe înregistrări (multiple-row functions)**: Aceste funcții operează pe mai multe înregistrări din tabelă, returnând un singur rezultat pentru întregul set de date. 
","În ce două categorii se împart funcțiile în SQL, conform cursului?","['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform cursului, funcțiile în SQL se împart în două categorii:

1. **Funcții referitoare la o singură înregistrare (single-row functions)**: Aceste funcții operează pe o singură înregistrare din tabelă, returnând un rezultat pentru fiecare linie.
2. **Funcții referitoare la mai multe înregistrări (multiple-row functions)**: Aceste funcții operează pe mai multe înregistrări din tabelă, returnând un singur rezultat pentru întregul set de date. 
",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,,,,,0.07347053125977879,0.489795918367347,
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Conform cursului, funcțiile de grup sunt funcții SQL care operează asupra mai multor înregistrări simultan. 
Acestea sunt prezentate în secțiunea ""4.3. Funcţii referitoare la mai multe înregistrări"" din cursul 5 despre BAZE DE DATE. 

Exemple de funcții de grup includ: 
* **SUM**: Calculează suma valorilor din coloana specificată.
* **COUNT**: Calculează numărul de rânduri din tabelă.
* **AVG**: Calculează media valorilor dintr-o coloană.
* **MIN**: Găsește valoarea minimă dintr-o coloană.
* **MAX**: Găsește valoarea maximă dintr-o coloană.
* **GROUP BY**: Grupează rândurile din tabelă pe baza valorilor din una sau mai multe coloane.
* **HAVING**: Filtrează grupurile de rânduri.

Funcțiile de grup sunt utile pentru a analiza date agregate și a obține informații sintetice despre tabelă.
","Ce sunt funcțiile de grup în SQL, conform cursului?","['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Conform cursului, funcțiile de grup sunt funcții SQL care operează asupra mai multor înregistrări simultan. 
Acestea sunt prezentate în secțiunea ""4.3. Funcţii referitoare la mai multe înregistrări"" din cursul 5 despre BAZE DE DATE. 

Exemple de funcții de grup includ: 
* **SUM**: Calculează suma valorilor din coloana specificată.
* **COUNT**: Calculează numărul de rânduri din tabelă.
* **AVG**: Calculează media valorilor dintr-o coloană.
* **MIN**: Găsește valoarea minimă dintr-o coloană.
* **MAX**: Găsește valoarea maximă dintr-o coloană.
* **GROUP BY**: Grupează rândurile din tabelă pe baza valorilor din una sau mai multe coloane.
* **HAVING**: Filtrează grupurile de rânduri.

Funcțiile de grup sunt utile pentru a analiza date agregate și a obține informații sintetice despre tabelă.
","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",,,,,0.04822160133970806,0.12987012987012989,
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","O subinterogare în SQL este o instrucțiune SELECT inclusă într-o clauză a unei alte instrucțiuni SQL. 
",Ce este o subinterogare (subquery) în SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","O subinterogare în SQL este o instrucțiune SELECT inclusă într-o clauză a unei alte instrucțiuni SQL. 
","O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",,,,,0.2187918435076188,0.5714285714285715,
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Limbajul de manipulare a datelor (DML) în SQL vă permite să **modificați datele dintr-o bază de date**. Aceasta include operațiuni precum:

* **Inserarea** de noi date în tabele
* **Ștergerea** datelor existente
* **Actualizarea** datelor existente 

DML-ul este esențial pentru gestionarea și menținerea datelor într-o bază de date. 
",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Limbajul de manipulare a datelor (DML) în SQL vă permite să **modificați datele dintr-o bază de date**. Aceasta include operațiuni precum:

* **Inserarea** de noi date în tabele
* **Ștergerea** datelor existente
* **Actualizarea** datelor existente 

DML-ul este esențial pentru gestionarea și menținerea datelor într-o bază de date. 
","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",,,,,0.04334264033674369,0.2058823529411765,
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']","Din păcate, contextul furnizat nu oferă o definiție a constrângerii FOREIGN KEY. Contextul conține informații despre crearea secvențelor și definirea constrângerilor, dar nu oferă o explicație detaliată a constrângerii FOREIGN KEY. 
","Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']","Din păcate, contextul furnizat nu oferă o definiție a constrângerii FOREIGN KEY. Contextul conține informații despre crearea secvențelor și definirea constrângerilor, dar nu oferă o explicație detaliată a constrângerii FOREIGN KEY. 
","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",,,,,0.04198387697463197,0.15625,
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Din contextul furnizat, putem deduce că o vedere (view) în SQL este un concept discutat în cadrul cursului ""BAZE DE DATE"". 

Contextul oferă informații despre cum să vizualizați conținutul unei vederi folosind cererea SQL SELECT, dar nu oferă o definiție explicită a unei vederi. 

Pentru o definiție mai precisă a unei vederi în SQL, ar trebui consultată o sursă suplimentară de informații, cum ar fi un manual de SQL sau o pagină web de referință.
","Ce este o vedere (view) în SQL, conform cursului?","['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Din contextul furnizat, putem deduce că o vedere (view) în SQL este un concept discutat în cadrul cursului ""BAZE DE DATE"". 

Contextul oferă informații despre cum să vizualizați conținutul unei vederi folosind cererea SQL SELECT, dar nu oferă o definiție explicită a unei vederi. 

Pentru o definiție mai precisă a unei vederi în SQL, ar trebui consultată o sursă suplimentară de informații, cum ar fi un manual de SQL sau o pagină web de referință.
","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",,,,,0.02042946039568498,0.11320754716981132,
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']","Contextul furnizat nu conține informații despre secvențe în SQL. Prin urmare, nu pot răspunde la întrebarea ""De ce se folosesc secvențele în SQL, potrivit cursului?"". 
","De ce se folosesc secvențele în SQL, potrivit cursului?","['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']","Contextul furnizat nu conține informații despre secvențe în SQL. Prin urmare, nu pot răspunde la întrebarea ""De ce se folosesc secvențele în SQL, potrivit cursului?"". 
","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",,,,,0.0,0.0851063829787234,
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']","Conform cursului, securitatea bazei de date cuprinde două categorii principale:

1. **Securitatea sistemului:** Aceasta se referă la protejarea infrastructurii fizice și logice a sistemului de bază de date de acces neautorizat, deteriorare sau atacuri.
2. **Securitatea datelor:** Aceasta se referă la protejarea datelor stocate în baza de date de acces neautorizat, modificări neautorizate sau dezvăluire.

Cursul detaliază, de asemenea, noțiuni precum:

* **Privilegii de sistem:**  Permisiuni acordate utilizatorilor pentru a accesa și a gestiona resursele sistemului de bază de date.
* **Privilegii de obiect:** Permisiuni acordate utilizatorilor pentru a accesa și a manipula datele dintr-un obiect specific din baza de date (ex: tabel).
* **Scheme:** Reprezintă structura datelor dintr-o bază de date, inclusiv tipurile de date și relațiile dintre ele.

Aceste informații ne oferă o perspectivă largă asupra securității bazei de date, subliniind atât aspectele de securitate a sistemului, cât și securitatea datelor. 
","Ce acoperă securitatea bazei de date, conform cursului?","['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']","Conform cursului, securitatea bazei de date cuprinde două categorii principale:

1. **Securitatea sistemului:** Aceasta se referă la protejarea infrastructurii fizice și logice a sistemului de bază de date de acces neautorizat, deteriorare sau atacuri.
2. **Securitatea datelor:** Aceasta se referă la protejarea datelor stocate în baza de date de acces neautorizat, modificări neautorizate sau dezvăluire.

Cursul detaliază, de asemenea, noțiuni precum:

* **Privilegii de sistem:**  Permisiuni acordate utilizatorilor pentru a accesa și a gestiona resursele sistemului de bază de date.
* **Privilegii de obiect:** Permisiuni acordate utilizatorilor pentru a accesa și a manipula datele dintr-un obiect specific din baza de date (ex: tabel).
* **Scheme:** Reprezintă structura datelor dintr-o bază de date, inclusiv tipurile de date și relațiile dintre ele.

Aceste informații ne oferă o perspectivă largă asupra securității bazei de date, subliniind atât aspectele de securitate a sistemului, cât și securitatea datelor. 
","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",,,,,0.06677709687616351,0.11695906432748539,
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","Conform cursului, bazele de date oferă mai multe avantaje față de fișierele tradiționale:

* **Reducerea redundanței:** Bazele de date elimină redundanța datelor, stocând informațiile o singură dată și făcând referințe între ele. 
* **Îmbunătățirea integrității:** Bazele de date asigură integritatea datelor prin implementarea regulilor de validare și a constrângerilor.
* **Acces facil la date:** Bazele de date permit accesul rapid și eficient la date relevante, prin interogări structurate.

În plus, bazele de date oferă:

* **Consecvența datelor:** Datele din baza de date sunt coerente și respectă regulile de integritate.
* **Concurența:** Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera erori.
* **Securitatea:** Accesul la date este controlat prin permisiuni și mecanisme de autentificare.
* **Independența datelor:** Modificările structurale ale bazei de date nu afectează aplicațiile care o utilizează.
","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","Conform cursului, bazele de date oferă mai multe avantaje față de fișierele tradiționale:

* **Reducerea redundanței:** Bazele de date elimină redundanța datelor, stocând informațiile o singură dată și făcând referințe între ele. 
* **Îmbunătățirea integrității:** Bazele de date asigură integritatea datelor prin implementarea regulilor de validare și a constrângerilor.
* **Acces facil la date:** Bazele de date permit accesul rapid și eficient la date relevante, prin interogări structurate.

În plus, bazele de date oferă:

* **Consecvența datelor:** Datele din baza de date sunt coerente și respectă regulile de integritate.
* **Concurența:** Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera erori.
* **Securitatea:** Accesul la date este controlat prin permisiuni și mecanisme de autentificare.
* **Independența datelor:** Modificările structurale ale bazei de date nu afectează aplicațiile care o utilizează.
","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",,,,,0.025131854313529597,0.1,
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici:

* **Datele sunt organizate în tabele bidimensionale.** Aceasta înseamnă că datele sunt aranjate în linii și coloane, similar cu o foaie de calcul.
* **Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare.** Fiecare linie (înregistrare) dintr-un tabel are o cheie primară, care este o valoare unică care o identifică. 
* **Cheile străine definesc relațiile între tabele.** Cheile străine sunt coloane dintr-un tabel care se referă la cheile primare din alte tabele, creând legături între ele.
* **Independența datelor față de aplicațiile care le folosesc.** Datele sunt stocate separat de aplicațiile care le accesează, ceea ce face ca baza de date să fie mai flexibilă și mai ușor de întreținut.
* **Limbajul de interogare SQL este standardizat.** SQL (Structured Query Language) este un limbaj universal pentru interogarea și manipularea datelor din bazele de date relaționale. 
","Ce caracteristici are modelul relațional de baze de date, conform cursului?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici:

* **Datele sunt organizate în tabele bidimensionale.** Aceasta înseamnă că datele sunt aranjate în linii și coloane, similar cu o foaie de calcul.
* **Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare.** Fiecare linie (înregistrare) dintr-un tabel are o cheie primară, care este o valoare unică care o identifică. 
* **Cheile străine definesc relațiile între tabele.** Cheile străine sunt coloane dintr-un tabel care se referă la cheile primare din alte tabele, creând legături între ele.
* **Independența datelor față de aplicațiile care le folosesc.** Datele sunt stocate separat de aplicațiile care le accesează, ceea ce face ca baza de date să fie mai flexibilă și mai ușor de întreținut.
* **Limbajul de interogare SQL este standardizat.** SQL (Structured Query Language) este un limbaj universal pentru interogarea și manipularea datelor din bazele de date relaționale. 
","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",,,,,0.013823323043649121,0.16666666666666669,
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']","Din contextul furnizat, nu sunt disponibile informații specifice despre etapele proiectării bazelor de date relaționale.  Contextul se concentrează pe introducerea conceptelor de bază ale teoriei relaționale a bazelor de date și pe exemplificarea unui model de bază de date FACULTATE. 

Pentru a afla etapele de proiectare a bazelor de date relaționale, recomand să consultați materiale suplimentare dedicate acestui subiect, cum ar fi manuale de baze de date sau cursuri online. 
","Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']","Din contextul furnizat, nu sunt disponibile informații specifice despre etapele proiectării bazelor de date relaționale.  Contextul se concentrează pe introducerea conceptelor de bază ale teoriei relaționale a bazelor de date și pe exemplificarea unui model de bază de date FACULTATE. 

Pentru a afla etapele de proiectare a bazelor de date relaționale, recomand să consultați materiale suplimentare dedicate acestui subiect, cum ar fi manuale de baze de date sau cursuri online. 
","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",,,,,0.02908317710573757,0.02150537634408602,
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Din păcate, contextul furnizat nu oferă suficiente informații pentru a compara modelul relațional cu alte modele de baze de date și pentru a evidenția avantajele sale fundamentale.  Contextul enumeră doar tipurile de modele de baze de date, fără a detalia caracteristicile sau avantajele fiecăruia. 

Pentru a oferi un răspuns complet la solicitare, ar trebui să includă informații despre:

* **Caracteristicile cheie ale modelului relațional:** Integritatea datelor, normalizarea, operațiile relaționale (SELECT, INSERT, UPDATE, DELETE) etc.
* **Caracteristicile altor modele:** Modelul orientat obiect (OOP), modelul ierarhic, modelul rețea etc.
* **Compararea avantajelor:** De exemplu, avantajele modelului relațional pot include:
    * **Integritatea datelor:** Asigura consistența și acuratețea datelor prin constrângeri și reguli de integritate.
    * **Accesul la date:** Permite accesul la date prin interogări structurate, ceea ce facilitează analiza și extragerea datelor.
    * **Independența datelor:** Permite modificarea structurii datelor fără a afecta aplicațiile care le accesează.

Vă rugăm să furnizați informații suplimentare despre modelele de baze de date menționate, inclusiv avantajele și dezavantajele fiecăruia, pentru a putea oferi un răspuns mai detaliat și relevant la solicitare. 
","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Din păcate, contextul furnizat nu oferă suficiente informații pentru a compara modelul relațional cu alte modele de baze de date și pentru a evidenția avantajele sale fundamentale.  Contextul enumeră doar tipurile de modele de baze de date, fără a detalia caracteristicile sau avantajele fiecăruia. 

Pentru a oferi un răspuns complet la solicitare, ar trebui să includă informații despre:

* **Caracteristicile cheie ale modelului relațional:** Integritatea datelor, normalizarea, operațiile relaționale (SELECT, INSERT, UPDATE, DELETE) etc.
* **Caracteristicile altor modele:** Modelul orientat obiect (OOP), modelul ierarhic, modelul rețea etc.
* **Compararea avantajelor:** De exemplu, avantajele modelului relațional pot include:
    * **Integritatea datelor:** Asigura consistența și acuratețea datelor prin constrângeri și reguli de integritate.
    * **Accesul la date:** Permite accesul la date prin interogări structurate, ceea ce facilitează analiza și extragerea datelor.
    * **Independența datelor:** Permite modificarea structurii datelor fără a afecta aplicațiile care le accesează.

Vă rugăm să furnizați informații suplimentare despre modelele de baze de date menționate, inclusiv avantajele și dezavantajele fiecăruia, pentru a putea oferi un răspuns mai detaliat și relevant la solicitare. 
","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",,,,,0.018117236860142973,0.11555555555555555,
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']","Din păcate, contextul furnizat nu conține informații specifice despre evoluția SGBD-ului Oracle sau comparații cu alte tipuri de baze de date moderne. 

Contextul se concentrează pe o listă repetitivă de subcapitole, care se referă la  ""S.G.B.D. ORACLE""  și conține informații generale, cum ar fi ""Evoluţia şi facilităţile sistemului ORACLE"", ""Arhitectura SGBD-ului ORACLE"", ""ORACLE Server"" și ""Oracle Database 11g Express Edition"".

Pentru a răspunde corect la cererea dumneavoastră, aș avea nevoie de un context mai amplu, care să descrie detaliat evoluția SGBD-ului Oracle și să ofere comparații cu alte tipuri de baze de date moderne.
",Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']","Din păcate, contextul furnizat nu conține informații specifice despre evoluția SGBD-ului Oracle sau comparații cu alte tipuri de baze de date moderne. 

Contextul se concentrează pe o listă repetitivă de subcapitole, care se referă la  ""S.G.B.D. ORACLE""  și conține informații generale, cum ar fi ""Evoluţia şi facilităţile sistemului ORACLE"", ""Arhitectura SGBD-ului ORACLE"", ""ORACLE Server"" și ""Oracle Database 11g Express Edition"".

Pentru a răspunde corect la cererea dumneavoastră, aș avea nevoie de un context mai amplu, care să descrie detaliat evoluția SGBD-ului Oracle și să ofere comparații cu alte tipuri de baze de date moderne.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",,,,,0.012669716281003425,0.12162162162162163,
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Clauza `WHERE` filtrează datele din tabel înainte de aplicarea funcţiilor agregate. `GROUP BY` grupează datele în funcţie de valorile unei coloane sau a mai multor coloane, iar `ORDER BY` sortează rezultatele agregate. 

Iată un exemplu:

```sql
SELECT department, SUM(salary) AS total_salary
FROM employees
WHERE department = 'IT'
GROUP BY department
ORDER BY total_salary DESC;
```

Această interogare:

1. **Selectează** coloana `department` și suma salariilor (`total_salary`) din tabelul `employees`.
2. **Filtrează** datele pentru a include doar angajații din departamentul `IT`.
3. **Grupează** datele în funcție de `department`.
4. **Calculează** suma salariilor pentru fiecare departament.
5. **Sortează** rezultatele în ordine descrescătoare a `total_salary`.

În acest fel, se obține o listă a departamentelor din `IT`, ordonată după suma salariilor din fiecare departament, cu cele mai mari sume de salarii afișate primele.
","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Clauza `WHERE` filtrează datele din tabel înainte de aplicarea funcţiilor agregate. `GROUP BY` grupează datele în funcţie de valorile unei coloane sau a mai multor coloane, iar `ORDER BY` sortează rezultatele agregate. 

Iată un exemplu:

```sql
SELECT department, SUM(salary) AS total_salary
FROM employees
WHERE department = 'IT'
GROUP BY department
ORDER BY total_salary DESC;
```

Această interogare:

1. **Selectează** coloana `department` și suma salariilor (`total_salary`) din tabelul `employees`.
2. **Filtrează** datele pentru a include doar angajații din departamentul `IT`.
3. **Grupează** datele în funcție de `department`.
4. **Calculează** suma salariilor pentru fiecare departament.
5. **Sortează** rezultatele în ordine descrescătoare a `total_salary`.

În acest fel, se obține o listă a departamentelor din `IT`, ordonată după suma salariilor din fiecare departament, cu cele mai mari sume de salarii afișate primele.
","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",,,,,0.037644257151903664,0.15135135135135136,
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Contextul furnizat nu oferă informații despre funcțiile `LOWER` și `INITCAP`. Acesta se concentrează pe funcția `UPPER` și utilizarea sa în manipularea șirurilor, în special pentru afișarea numelui cu majuscule.

**Funcția UPPER**:
*  Convertește toate literele unui șir în majuscule.
*  Exemple:
    * `SELECT UPPER('ana are mere');` va returna `ANA ARE MERE`.

**Funcția LOWER**:
*  Convertește toate literele unui șir în minuscule.
*  Exemple:
    * `SELECT LOWER('ANA ARE MERE');` va returna `ana are mere`.

**Funcția INITCAP**:
*  Transformă primul caracter din fiecare cuvânt al unui șir în majuscule, iar restul caracterelor în minuscule.
*  Exemple:
    * `SELECT INITCAP('ana are mere');` va returna `Ana Are Mere`.

**Utilizarea în clauza WHERE**:
*  Aceste funcții pot fi utilizate în clauza WHERE pentru compararea valorilor de șiruri, indiferent de caz.
*  Exemple:
    * `SELECT * FROM EMP WHERE UPPER(ename) = 'JOHN';` va returna toate înregistrările cu numele ""John"" sau ""john"" sau ""JOHN"", etc.
    * `SELECT * FROM EMP WHERE LOWER(job) = 'clerk';` va returna toate înregistrările cu funcția ""Clerk"" sau ""clerk"" sau ""CLERK"", etc.

**Concluzie**:
* Funcțiile UPPER, LOWER și INITCAP sunt instrumente puternice pentru manipularea șirurilor în SQL.
* Pot fi utilizate pentru a compara șiruri de caractere, indiferent de caz, în clauza WHERE.
","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Contextul furnizat nu oferă informații despre funcțiile `LOWER` și `INITCAP`. Acesta se concentrează pe funcția `UPPER` și utilizarea sa în manipularea șirurilor, în special pentru afișarea numelui cu majuscule.

**Funcția UPPER**:
*  Convertește toate literele unui șir în majuscule.
*  Exemple:
    * `SELECT UPPER('ana are mere');` va returna `ANA ARE MERE`.

**Funcția LOWER**:
*  Convertește toate literele unui șir în minuscule.
*  Exemple:
    * `SELECT LOWER('ANA ARE MERE');` va returna `ana are mere`.

**Funcția INITCAP**:
*  Transformă primul caracter din fiecare cuvânt al unui șir în majuscule, iar restul caracterelor în minuscule.
*  Exemple:
    * `SELECT INITCAP('ana are mere');` va returna `Ana Are Mere`.

**Utilizarea în clauza WHERE**:
*  Aceste funcții pot fi utilizate în clauza WHERE pentru compararea valorilor de șiruri, indiferent de caz.
*  Exemple:
    * `SELECT * FROM EMP WHERE UPPER(ename) = 'JOHN';` va returna toate înregistrările cu numele ""John"" sau ""john"" sau ""JOHN"", etc.
    * `SELECT * FROM EMP WHERE LOWER(job) = 'clerk';` va returna toate înregistrările cu funcția ""Clerk"" sau ""clerk"" sau ""CLERK"", etc.

**Concluzie**:
* Funcțiile UPPER, LOWER și INITCAP sunt instrumente puternice pentru manipularea șirurilor în SQL.
* Pot fi utilizate pentru a compara șiruri de caractere, indiferent de caz, în clauza WHERE.
","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",,,,,0.03737437943747671,0.1589958158995816,
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']","O subinterogare single-row, așa cum sugerează și numele, returnează o singură linie ca rezultat. Aceste subinterogări sunt utilizate în clauza WHERE a unei interogări principale pentru a compara un atribut din tabelul principal cu valoarea returnată de subinterogare. 

**Mecanismul de execuție:**

1. **Executarea subinterogării:** Subinterogarea este executată prima dată, generând o singură linie ca rezultat.
2. **Compararea cu tabelul principal:** Valoarea returnată de subinterogare este comparată cu un atribut din tabelul principal, folosind operatori single-row: >, =, >=, <, <=.
3. **Filtrarea datelor:** Interogarea principală filtrează datele conform rezultatului comparației, selectând doar acele linii care îndeplinesc condiția specificată.

**Integrarea în clauza WHERE:**

Subinterogarea single-row este inclusă în clauza WHERE a interogării principale, înlocuind o valoare literală. De exemplu, în loc de a specifica o valoare numerică fixă, subinterogarea este utilizată pentru a obține dinamic această valoare.

**Exemplu:**

```sql
SELECT *
FROM angajati
WHERE salariu > (SELECT MAX(salariu) FROM angajati WHERE departament = 'IT');
```

În acest exemplu, subinterogarea `SELECT MAX(salariu) FROM angajati WHERE departament = 'IT'` returnează salariul maxim din departamentul IT. Interogarea principală filtrează apoi angajații cu salariu mai mare decât această valoare. 

**În concluzie, subinterogările single-row oferă o modalitate flexibilă de a filtra datele, utilizând rezultate dinamice ale unei subinterogări în clauza WHERE.**
",Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']","O subinterogare single-row, așa cum sugerează și numele, returnează o singură linie ca rezultat. Aceste subinterogări sunt utilizate în clauza WHERE a unei interogări principale pentru a compara un atribut din tabelul principal cu valoarea returnată de subinterogare. 

**Mecanismul de execuție:**

1. **Executarea subinterogării:** Subinterogarea este executată prima dată, generând o singură linie ca rezultat.
2. **Compararea cu tabelul principal:** Valoarea returnată de subinterogare este comparată cu un atribut din tabelul principal, folosind operatori single-row: >, =, >=, <, <=.
3. **Filtrarea datelor:** Interogarea principală filtrează datele conform rezultatului comparației, selectând doar acele linii care îndeplinesc condiția specificată.

**Integrarea în clauza WHERE:**

Subinterogarea single-row este inclusă în clauza WHERE a interogării principale, înlocuind o valoare literală. De exemplu, în loc de a specifica o valoare numerică fixă, subinterogarea este utilizată pentru a obține dinamic această valoare.

**Exemplu:**

```sql
SELECT *
FROM angajati
WHERE salariu > (SELECT MAX(salariu) FROM angajati WHERE departament = 'IT');
```

În acest exemplu, subinterogarea `SELECT MAX(salariu) FROM angajati WHERE departament = 'IT'` returnează salariul maxim din departamentul IT. Interogarea principală filtrează apoi angajații cu salariu mai mare decât această valoare. 

**În concluzie, subinterogările single-row oferă o modalitate flexibilă de a filtra datele, utilizând rezultate dinamice ale unei subinterogări în clauza WHERE.**
","O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",,,,,0.09716915779575569,0.13953488372093023,
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']","Contextul furnizat nu oferă informații specifice despre utilizarea instrucțiunii UPDATE în combinație cu subinterogări pentru actualizarea selectivă a datelor. El se concentrează pe instrucțiunea MERGE și pe modificarea datelor prin UPDATE cu o clauză WHERE simplă. 

Pentru a răspunde la întrebarea ta, ar trebui să consultăm documentația specifică a bazei de date pe care o utilizați. De regulă, instrucțiunea UPDATE poate fi combinată cu subinterogări pentru a actualiza date selective în felul următor:

```sql
UPDATE tabela_tinta
SET coloana_tinta = valoare_noua
WHERE conditie_de_actualizare IN (SELECT coloana_de_filtrare FROM tabela_sursa WHERE conditie_de_filtrare);
```

* **tabela_tinta:** Tabelul în care se vor actualiza datele.
* **coloana_tinta:** Coloana din tabelul țintă care va fi actualizată.
* **valoare_noua:** Noua valoare care va fi atribuită coloanei țintă.
* **conditie_de_actualizare:** Condiția care va determina care rânduri din tabelul țintă vor fi actualizate.
* **tabela_sursa:** Tabelul din care se vor selecta datele de filtrare.
* **coloana_de_filtrare:** Coloana din tabelul sursă care va fi utilizată pentru filtrare.
* **conditie_de_filtrare:** Condiția de filtrare a datelor din tabelul sursă.

**Exemplu:**

Să presupunem că avem două tabele: 

* **Angajati:** cu coloanele `ID`, `Nume`, `Departament`
* **Departamente:** cu coloanele `ID_Departament`, `Nume_Departament`

Dorim să actualizăm numele departamentului pentru angajații cu ID-ul 10 și 20, folosind subinterogări pentru a obține ID-urile departamentelor. 

```sql
UPDATE Angajati
SET Departament = (SELECT ID_Departament FROM Departamente WHERE Nume_Departament = 'Marketing')
WHERE ID IN (10, 20);
```

Această instrucțiune va actualiza coloana `Departament` din tabelul `Angajati` cu ID-ul departamentului ""Marketing"" pentru angajații cu ID-ul 10 și 20. 

Pentru a obține informații mai precise despre utilizarea instrucțiunii UPDATE cu subinterogări în baza de date specifică pe care o utilizați, consultați documentația oficială.
",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']","Contextul furnizat nu oferă informații specifice despre utilizarea instrucțiunii UPDATE în combinație cu subinterogări pentru actualizarea selectivă a datelor. El se concentrează pe instrucțiunea MERGE și pe modificarea datelor prin UPDATE cu o clauză WHERE simplă. 

Pentru a răspunde la întrebarea ta, ar trebui să consultăm documentația specifică a bazei de date pe care o utilizați. De regulă, instrucțiunea UPDATE poate fi combinată cu subinterogări pentru a actualiza date selective în felul următor:

```sql
UPDATE tabela_tinta
SET coloana_tinta = valoare_noua
WHERE conditie_de_actualizare IN (SELECT coloana_de_filtrare FROM tabela_sursa WHERE conditie_de_filtrare);
```

* **tabela_tinta:** Tabelul în care se vor actualiza datele.
* **coloana_tinta:** Coloana din tabelul țintă care va fi actualizată.
* **valoare_noua:** Noua valoare care va fi atribuită coloanei țintă.
* **conditie_de_actualizare:** Condiția care va determina care rânduri din tabelul țintă vor fi actualizate.
* **tabela_sursa:** Tabelul din care se vor selecta datele de filtrare.
* **coloana_de_filtrare:** Coloana din tabelul sursă care va fi utilizată pentru filtrare.
* **conditie_de_filtrare:** Condiția de filtrare a datelor din tabelul sursă.

**Exemplu:**

Să presupunem că avem două tabele: 

* **Angajati:** cu coloanele `ID`, `Nume`, `Departament`
* **Departamente:** cu coloanele `ID_Departament`, `Nume_Departament`

Dorim să actualizăm numele departamentului pentru angajații cu ID-ul 10 și 20, folosind subinterogări pentru a obține ID-urile departamentelor. 

```sql
UPDATE Angajati
SET Departament = (SELECT ID_Departament FROM Departamente WHERE Nume_Departament = 'Marketing')
WHERE ID IN (10, 20);
```

Această instrucțiune va actualiza coloana `Departament` din tabelul `Angajati` cu ID-ul departamentului ""Marketing"" pentru angajații cu ID-ul 10 și 20. 

Pentru a obține informații mai precise despre utilizarea instrucțiunii UPDATE cu subinterogări în baza de date specifică pe care o utilizați, consultați documentația oficială.
",UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,,,,,0.028629993657668874,0.08139534883720931,
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) contribuie la securitatea și consistența datelor într-o bază de date prin:

* **PRIMARY KEY:** Asigură unicitatea fiecărei înregistrări, prevenind duplicarea datelor. 
* **FOREIGN KEY:** Garantează relații corecte între tabele, asigurând referențialitatea și integritatea datelor. De exemplu, o comandă poate fi asociată doar cu un client existent, prevenind introducerea unor comenzi cu ID-uri de client incorecte.
* **CHECK:** Restricționează valorile acceptate într-o coloană, garantând validarea datelor. De exemplu, o constrângere CHECK poate impune ca un câmp de email să aibă formatul corect.

Prin utilizarea acestor constrângeri, se asigură că:

* **Datele sunt consistente și valide:** Se evită introducerea de date incorecte sau duplicarea acestora.
* **Baza de date este protejată de erori:** Constrângerile verifică integritatea datelor înainte de a le salva, reducând riscul de erori.
* **Relațiile între tabele sunt corecte:** Constrângerile FOREIGN KEY asigură o referențialitate precisă, prevenind modificări incorecte sau pierderea de date.

Exemple de aplicare:

* **PRIMARY KEY:** Atribuirea unui ID unic fiecărui client, produs sau comandă.
* **FOREIGN KEY:** Asocierea unei comenzi cu ID-ul clientului care a plasat-o.
* **CHECK:** Verificarea formatului unui câmp de email, impunerea unei limite superioare pentru un câmp numeric (de exemplu, stocul unui produs).

Utilizarea constrângerilor de integritate este esențială pentru a menține o bază de date sigură, consecventă și ușor de gestionat. 
","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) contribuie la securitatea și consistența datelor într-o bază de date prin:

* **PRIMARY KEY:** Asigură unicitatea fiecărei înregistrări, prevenind duplicarea datelor. 
* **FOREIGN KEY:** Garantează relații corecte între tabele, asigurând referențialitatea și integritatea datelor. De exemplu, o comandă poate fi asociată doar cu un client existent, prevenind introducerea unor comenzi cu ID-uri de client incorecte.
* **CHECK:** Restricționează valorile acceptate într-o coloană, garantând validarea datelor. De exemplu, o constrângere CHECK poate impune ca un câmp de email să aibă formatul corect.

Prin utilizarea acestor constrângeri, se asigură că:

* **Datele sunt consistente și valide:** Se evită introducerea de date incorecte sau duplicarea acestora.
* **Baza de date este protejată de erori:** Constrângerile verifică integritatea datelor înainte de a le salva, reducând riscul de erori.
* **Relațiile între tabele sunt corecte:** Constrângerile FOREIGN KEY asigură o referențialitate precisă, prevenind modificări incorecte sau pierderea de date.

Exemple de aplicare:

* **PRIMARY KEY:** Atribuirea unui ID unic fiecărui client, produs sau comandă.
* **FOREIGN KEY:** Asocierea unei comenzi cu ID-ul clientului care a plasat-o.
* **CHECK:** Verificarea formatului unui câmp de email, impunerea unei limite superioare pentru un câmp numeric (de exemplu, stocul unui produs).

Utilizarea constrângerilor de integritate este esențială pentru a menține o bază de date sigură, consecventă și ușor de gestionat. 
","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",,,,,0.0618030651746205,0.11888111888111888,
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Utilizarea vederilor (views) oferă următoarele avantaje:

* **Simplifică interogările complexe:** Vederile pot fi folosite în cereri SQL simple, chiar dacă ele întorc rezultatul unor cereri SQL complexe. Aceasta înseamnă că putem interoga mai multe tabele fără a cunoaște detaliile join-urilor dintre ele.
* **Obținerea datelor din mai multe tabele:** O vedere poate fi folosită pentru a obține date din mai multe tabele.
* **Controlul accesului:** Vederile oferă drepturi de acces pentru grupuri de utilizatori, permițând accesul la anumite date, fără a le expune direct.

Prin urmare, vederile simplifică interogările complexe, permițând accesul la date complexe într-un mod simplu și controlat.
",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Utilizarea vederilor (views) oferă următoarele avantaje:

* **Simplifică interogările complexe:** Vederile pot fi folosite în cereri SQL simple, chiar dacă ele întorc rezultatul unor cereri SQL complexe. Aceasta înseamnă că putem interoga mai multe tabele fără a cunoaște detaliile join-urilor dintre ele.
* **Obținerea datelor din mai multe tabele:** O vedere poate fi folosită pentru a obține date din mai multe tabele.
* **Controlul accesului:** Vederile oferă drepturi de acces pentru grupuri de utilizatori, permițând accesul la anumite date, fără a le expune direct.

Prin urmare, vederile simplifică interogările complexe, permițând accesul la date complexe într-un mod simplu și controlat.
","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",,,,,0.028048598302198354,0.16107382550335572,
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Contextul furnizat nu conține informații specifice despre contribuția secvențelor și indicilor la performanța bazelor de date. 

Însă, pot explica în general cum contribuie aceste elemente:

* **Secvențele** sunt mecanisme care generează valori unice pentru coloanele din tabele. Acestea ajută la menținerea integrității datelor, asigurând că nu există duplicări.  Utilizarea secvențelor poate îmbunătăți performanța prin:
    * **Reducerea timpului de inserare**  -  generatorul de secvențe produce valori unice rapid, fără a necesita verificări suplimentare de unicitate în tabel.
    * **Îmbunătățirea indexării** -  secvențele pot fi folosite ca chei primare, simplificând indexarea datelor și oferind acces mai rapid.

* **Indecșii** sunt structuri de date asociate cu coloanele din tabele, care permit o căutare mai rapidă a datelor. Indecșii ajută la îmbunătățirea performanței prin:
    * **Optimizarea interogărilor** -  SGBD-ul poate utiliza indecșii pentru a găsi rapid rândurile corespunzătoare unei interogări, reducând timpul de răspuns.
    * **Accelerarea sortării și grupării** -  indecșii pot fi folosiți pentru a organiza datele, îmbunătățind performanța operațiilor de sortare și grupare.

Așadar, utilizarea judicioasă a secvențelor și indicilor poate contribui semnificativ la îmbunătățirea performanței bazelor de date. 
",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Contextul furnizat nu conține informații specifice despre contribuția secvențelor și indicilor la performanța bazelor de date. 

Însă, pot explica în general cum contribuie aceste elemente:

* **Secvențele** sunt mecanisme care generează valori unice pentru coloanele din tabele. Acestea ajută la menținerea integrității datelor, asigurând că nu există duplicări.  Utilizarea secvențelor poate îmbunătăți performanța prin:
    * **Reducerea timpului de inserare**  -  generatorul de secvențe produce valori unice rapid, fără a necesita verificări suplimentare de unicitate în tabel.
    * **Îmbunătățirea indexării** -  secvențele pot fi folosite ca chei primare, simplificând indexarea datelor și oferind acces mai rapid.

* **Indecșii** sunt structuri de date asociate cu coloanele din tabele, care permit o căutare mai rapidă a datelor. Indecșii ajută la îmbunătățirea performanței prin:
    * **Optimizarea interogărilor** -  SGBD-ul poate utiliza indecșii pentru a găsi rapid rândurile corespunzătoare unei interogări, reducând timpul de răspuns.
    * **Accelerarea sortării și grupării** -  indecșii pot fi folosiți pentru a organiza datele, îmbunătățind performanța operațiilor de sortare și grupare.

Așadar, utilizarea judicioasă a secvențelor și indicilor poate contribui semnificativ la îmbunătățirea performanței bazelor de date. 
","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",,,,,0.05412989186545263,0.1422924901185771,
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']","Contextul furnizat descrie controlul accesului utilizatorilor și gestionarea privilegiilor în Oracle, subliniind:

* **Controlul accesului la baza de date:** Oracle permite restricționarea accesului la baza de date în funcție de utilizator. 
* **Acordarea accesului la obiecte specifice:** Se pot acorda permisiuni specifice pentru accesarea unor anumite tabele, vederi sau alte obiecte din baza de date. 
* **Confirmarea privilegiilor:** Serverul Oracle folosește un dicționar de date intern pentru a verifica și valida privilegiile utilizatorilor. 
* **Crearea de sinonime:** Sinonimele pot fi create pentru a simplifica accesul la obiectele bazei de date. 

Contextul nu detaliază implementarea practică a acestor mecanisme, ci se concentrează pe prezentarea conceptelor. Pentru detalii specifice despre implementarea controlului accesului și gestionarea privilegiilor în Oracle, este necesar să consultați documentația oficială Oracle sau resurse online specializate.
",Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']","Contextul furnizat descrie controlul accesului utilizatorilor și gestionarea privilegiilor în Oracle, subliniind:

* **Controlul accesului la baza de date:** Oracle permite restricționarea accesului la baza de date în funcție de utilizator. 
* **Acordarea accesului la obiecte specifice:** Se pot acorda permisiuni specifice pentru accesarea unor anumite tabele, vederi sau alte obiecte din baza de date. 
* **Confirmarea privilegiilor:** Serverul Oracle folosește un dicționar de date intern pentru a verifica și valida privilegiile utilizatorilor. 
* **Crearea de sinonime:** Sinonimele pot fi create pentru a simplifica accesul la obiectele bazei de date. 

Contextul nu detaliază implementarea practică a acestor mecanisme, ci se concentrează pe prezentarea conceptelor. Pentru detalii specifice despre implementarea controlului accesului și gestionarea privilegiilor în Oracle, este necesar să consultați documentația oficială Oracle sau resurse online specializate.
","Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",,,,,0.026510202602018675,0.12941176470588237,
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","Contextul furnizat conține informații despre sistemele de baze de date, dar nu oferă o comparație directă cu sistemele tradiționale de fișiere. Prin urmare, nu pot furniza un răspuns complet la întrebarea dumneavoastră. 

Totuși, pot oferi câteva diferențe generale:

* **Organizarea datelor:** Sistemele de baze de date au o structură bine definită, de obicei bazată pe tabele interconectate, în timp ce sistemele de fișiere tradiționale stochează datele în fișiere individuale, care pot avea formaturi și structuri diferite.
* **Accesul la date:** Bazele de date oferă un acces controlat și structurat la date, permițând interogări complexe, în timp ce sistemele de fișiere necesită acces direct la fișiere individuale și manipulare specifică.
* **Integritatea datelor:** Bazele de date implementează mecanisme de integritate a datelor, care asigură consistența și validitatea informațiilor, în timp ce sistemele de fișiere se bazează pe aplicațiile care le accesează pentru a asigura integritatea.
* **Redundanță:** Bazele de date reduc redundanța datelor prin stocarea informațiilor în mod centralizat, în timp ce sistemele de fișiere pot duce la duplicarea datelor în mai multe locații.

Pentru a obține o comparație mai detaliată, vă recomand să consultați resurse dedicate comparației sistemelor de baze de date cu sistemele tradiționale de fișiere.
",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","Contextul furnizat conține informații despre sistemele de baze de date, dar nu oferă o comparație directă cu sistemele tradiționale de fișiere. Prin urmare, nu pot furniza un răspuns complet la întrebarea dumneavoastră. 

Totuși, pot oferi câteva diferențe generale:

* **Organizarea datelor:** Sistemele de baze de date au o structură bine definită, de obicei bazată pe tabele interconectate, în timp ce sistemele de fișiere tradiționale stochează datele în fișiere individuale, care pot avea formaturi și structuri diferite.
* **Accesul la date:** Bazele de date oferă un acces controlat și structurat la date, permițând interogări complexe, în timp ce sistemele de fișiere necesită acces direct la fișiere individuale și manipulare specifică.
* **Integritatea datelor:** Bazele de date implementează mecanisme de integritate a datelor, care asigură consistența și validitatea informațiilor, în timp ce sistemele de fișiere se bazează pe aplicațiile care le accesează pentru a asigura integritatea.
* **Redundanță:** Bazele de date reduc redundanța datelor prin stocarea informațiilor în mod centralizat, în timp ce sistemele de fișiere pot duce la duplicarea datelor în mai multe locații.

Pentru a obține o comparație mai detaliată, vă recomand să consultați resurse dedicate comparației sistemelor de baze de date cu sistemele tradiționale de fișiere.
","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",,,,,0.14230715327204657,0.11808118081180811,
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. 

* **Cheia primară** identifică în mod unic fiecare înregistrare dintr-un tabel, asigurând că datele sunt consistente și nu există duplicate.
* **Cheia străină** creează legături între tabele, garantând că datele din tabelele legate sunt corelate corect. De exemplu, dacă tabelul ""Studenți"" are o cheie străină ""ID_Curs"" care se referă la tabelul ""Cursuri"", atunci fiecare student poate fi asociat cu un curs valabil.

**SQL** joacă un rol esențial în implementarea constrângerilor, deoarece permite definirea și aplicarea regulilor de integritate a datelor.  Prin intermediul **SQL**, se pot specifica constrângeri pentru:

* **Cheile primare:** Definirea unei coloane ca fiind cheie primară asigură unicitatea datelor din acea coloană.
* **Cheile străine:** Definirea unei coloane ca fiind cheie străină asigură integritatea relației dintre tabele.
* **Constrângeri de tipul NOT NULL:** Se poate specifica că o anumită coloană nu poate fi goală.
* **Constrângeri de unicitate:** Se poate specifica că o anumită coloană trebuie să aibă valori unice.

Utilizarea SQL pentru implementarea constrângerilor de integritate a datelor asigură că baza de date este coerentă, precisă și fiabilă.
",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. 

* **Cheia primară** identifică în mod unic fiecare înregistrare dintr-un tabel, asigurând că datele sunt consistente și nu există duplicate.
* **Cheia străină** creează legături între tabele, garantând că datele din tabelele legate sunt corelate corect. De exemplu, dacă tabelul ""Studenți"" are o cheie străină ""ID_Curs"" care se referă la tabelul ""Cursuri"", atunci fiecare student poate fi asociat cu un curs valabil.

**SQL** joacă un rol esențial în implementarea constrângerilor, deoarece permite definirea și aplicarea regulilor de integritate a datelor.  Prin intermediul **SQL**, se pot specifica constrângeri pentru:

* **Cheile primare:** Definirea unei coloane ca fiind cheie primară asigură unicitatea datelor din acea coloană.
* **Cheile străine:** Definirea unei coloane ca fiind cheie străină asigură integritatea relației dintre tabele.
* **Constrângeri de tipul NOT NULL:** Se poate specifica că o anumită coloană nu poate fi goală.
* **Constrângeri de unicitate:** Se poate specifica că o anumită coloană trebuie să aibă valori unice.

Utilizarea SQL pentru implementarea constrângerilor de integritate a datelor asigură că baza de date este coerentă, precisă și fiabilă.
","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",,,,,0.1004916995660316,0.12711864406779663,
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']","Îmi pare rău, dar contextul furnizat nu conține informații despre cum se realizează o operație complexă de manipulare a datelor folosind subinterogări. Contextul se concentrează pe crearea de vederi complexe, utilizarea funcțiilor de grup și pe beneficiile utilizării indexilor. 
",Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']","Îmi pare rău, dar contextul furnizat nu conține informații despre cum se realizează o operație complexă de manipulare a datelor folosind subinterogări. Contextul se concentrează pe crearea de vederi complexe, utilizarea funcțiilor de grup și pe beneficiile utilizării indexilor. 
","Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",,,,,0.021671320168371845,0.11235955056179775,
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Contextul furnizat nu oferă informații specifice despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate în baze de date. Cu toate acestea, contextul menționează diverse aspecte legate de securitatea bazei de date, cum ar fi:

* **Securitatea sistemului:** Se referă la protejarea infrastructurii bazei de date de atacuri externe și acces neautorizat.
* **Securitatea datelor:** Se referă la protejarea datelor stocate în baza de date de acces neautorizat, modificări neautorizate și pierderi.
* **Privilegii de sistem:** Se referă la permisiunile acordate utilizatorilor pentru a accesa și a manipula diverse resurse ale sistemului.
* **Privilegii de obiect:** Se referă la permisiunile acordate utilizatorilor pentru a accesa și a manipula anumite obiecte din baza de date.
* **Scheme:** Se referă la structura bazei de date, care definește tabelele, coloanele, tipurile de date și relațiile dintre ele.

**Constrângerile** pot fi utilizate pentru a implementa politici de securitate prin restricționarea datelor care pot fi introduse în baza de date. De exemplu, o constrângere de tip UNIQUE poate fi folosită pentru a asigura că un anumit câmp din tabel este unic, împiedicând introducerea unor date duplicate.

**Vederile** pot fi utilizate pentru a controla accesul la date prin definirea unui subset specific de date din tabelele reale. Aceasta permite utilizatorilor să vizualizeze doar datele la care au permisiune, protejând datele sensibile de acces neautorizat.

În concluzie, deși contextul nu oferă informații specifice despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate, este evident că aceste elemente joacă un rol important în securitatea bazei de date. Constrângerile pot fi utilizate pentru a restricționa datele, iar vederile pot fi utilizate pentru a controla accesul la date.
",Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Contextul furnizat nu oferă informații specifice despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate în baze de date. Cu toate acestea, contextul menționează diverse aspecte legate de securitatea bazei de date, cum ar fi:

* **Securitatea sistemului:** Se referă la protejarea infrastructurii bazei de date de atacuri externe și acces neautorizat.
* **Securitatea datelor:** Se referă la protejarea datelor stocate în baza de date de acces neautorizat, modificări neautorizate și pierderi.
* **Privilegii de sistem:** Se referă la permisiunile acordate utilizatorilor pentru a accesa și a manipula diverse resurse ale sistemului.
* **Privilegii de obiect:** Se referă la permisiunile acordate utilizatorilor pentru a accesa și a manipula anumite obiecte din baza de date.
* **Scheme:** Se referă la structura bazei de date, care definește tabelele, coloanele, tipurile de date și relațiile dintre ele.

**Constrângerile** pot fi utilizate pentru a implementa politici de securitate prin restricționarea datelor care pot fi introduse în baza de date. De exemplu, o constrângere de tip UNIQUE poate fi folosită pentru a asigura că un anumit câmp din tabel este unic, împiedicând introducerea unor date duplicate.

**Vederile** pot fi utilizate pentru a controla accesul la date prin definirea unui subset specific de date din tabelele reale. Aceasta permite utilizatorilor să vizualizeze doar datele la care au permisiune, protejând datele sensibile de acces neautorizat.

În concluzie, deși contextul nu oferă informații specifice despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate, este evident că aceste elemente joacă un rol important în securitatea bazei de date. Constrângerile pot fi utilizate pentru a restricționa datele, iar vederile pot fi utilizate pentru a controla accesul la date.
","Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",,,,,0.12251704534934639,0.09375,
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Din contextul furnizat, se pare că SQL este o abreviere pentru **""Limbajul SQL""**, care se traduce la ""Structured Query Language"" în limba engleză. 

Contextul menționează ""Limbajul SQL"" în diverse contexte, inclusiv:

* ""Curs 3 \nLimbajul SQL""
* ""Interogarea bazelor de date - \nLimbajul SQL""
* ""Limbajul SQL\nConstrângeri""

Prin urmare, putem concluziona că SQL este un limbaj de programare utilizat pentru a interoga și manipula bazele de date. 
",Ce înseamnă SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Din contextul furnizat, se pare că SQL este o abreviere pentru **""Limbajul SQL""**, care se traduce la ""Structured Query Language"" în limba engleză. 

Contextul menționează ""Limbajul SQL"" în diverse contexte, inclusiv:

* ""Curs 3 \nLimbajul SQL""
* ""Interogarea bazelor de date - \nLimbajul SQL""
* ""Limbajul SQL\nConstrângeri""

Prin urmare, putem concluziona că SQL este un limbaj de programare utilizat pentru a interoga și manipula bazele de date. 
",Structured Query Language,,,,,0.04180647946097227,0.08695652173913045,
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru extragerea datelor dintr-o bază de date se numește **DQL (Data Query Language)**. 

Aceasta este o parte a limbajului SQL care permite utilizatorilor să interogheze baza de date și să obțină informații specifice. 
",Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru extragerea datelor dintr-o bază de date se numește **DQL (Data Query Language)**. 

Aceasta este o parte a limbajului SQL care permite utilizatorilor să interogheze baza de date și să obțină informații specifice. 
",SELECT,,,,,0.0,0.0,
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Pentru a actualiza date dintr-o bază de date, se folosește instrucțiunea **UPDATE** în SQL. 
",Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Pentru a actualiza date dintr-o bază de date, se folosește instrucțiunea **UPDATE** în SQL. 
",UPDATE,,,,,0.020244462660665506,0.1111111111111111,
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru ștergerea datelor dintr-o bază de date este o comandă DML (Data Manipulation Language), de obicei **DELETE**. 
",Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru ștergerea datelor dintr-o bază de date este o comandă DML (Data Manipulation Language), de obicei **DELETE**. 
",DELETE,,,,,0.01387819277861591,0.08695652173913045,
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","Instrucțiunea SQL folosită pentru inserarea de date noi într-o bază de date este **INSERT**. 

Această instrucțiune face parte din sublimbajul **DML** (Data Manipulation Language), care se ocupă de modificarea datelor din baza de date. 

De exemplu, pentru a insera un nou rând în tabela ""Angajati"", cu numele ""Ion Popescu"" și vârsta 30, se poate folosi instrucțiunea:

```sql
INSERT INTO Angajati (Nume, Varsta) VALUES ('Ion Popescu', 30);
```
",Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","Instrucțiunea SQL folosită pentru inserarea de date noi într-o bază de date este **INSERT**. 

Această instrucțiune face parte din sublimbajul **DML** (Data Manipulation Language), care se ocupă de modificarea datelor din baza de date. 

De exemplu, pentru a insera un nou rând în tabela ""Angajati"", cu numele ""Ion Popescu"" și vârsta 30, se poate folosi instrucțiunea:

```sql
INSERT INTO Angajati (Nume, Varsta) VALUES ('Ion Popescu', 30);
```
",INSERT INTO,,,,,0.021476912089159056,0.05405405405405406,
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul furnizat nu conține informații specifice despre o tabelă numită ""Persons"" sau despre cum să selectezi o coloană numită ""FirstName"". Prin urmare, nu pot oferi un răspuns precis la solicitarea ta.
","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul furnizat nu conține informații specifice despre o tabelă numită ""Persons"" sau despre cum să selectezi o coloană numită ""FirstName"". Prin urmare, nu pot oferi un răspuns precis la solicitarea ta.
",SELECT FirstName FROM Persons,,,,,0.018709718017288025,0.05263157894736842,
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Contextul furnizat nu oferă informații specifice despre selectarea tuturor coloanelor dintr-un tabel în SQL.  Cu toate acestea, o instrucțiune SQL generică pentru a selecta toate coloanele dintr-un tabel ar fi:

```sql
SELECT * FROM Persons;
```

Această instrucțiune folosește simbolul ""*"" pentru a specifica selectarea tuturor coloanelor din tabelul ""Persons"". 
","Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Contextul furnizat nu oferă informații specifice despre selectarea tuturor coloanelor dintr-un tabel în SQL.  Cu toate acestea, o instrucțiune SQL generică pentru a selecta toate coloanele dintr-un tabel ar fi:

```sql
SELECT * FROM Persons;
```

Această instrucțiune folosește simbolul ""*"" pentru a specifica selectarea tuturor coloanelor din tabelul ""Persons"". 
",SELECT * FROM Persons,,,,,0.0,0.10714285714285715,
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT * FROM Persons WHERE FirstName = 'Peter';
``` 
","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT * FROM Persons WHERE FirstName = 'Peter';
``` 
",SELECT * FROM Persons WHERE FirstName='Peter',,,,,0.4428500142691474,0.923076923076923,
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

Explicație:

* `SELECT *` - Selectează toate coloanele din tabel.
* `FROM Persons` - Specifică tabelul din care se selectează datele.
* `WHERE FirstName LIKE 'a%'` - Filtrează înregistrările unde coloana `FirstName` începe cu litera 'a'. Operatorul `LIKE` este folosit pentru compararea șirurilor de caractere, iar `'a%'` reprezintă un șir care începe cu 'a' și poate avea orice caractere după.
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

Explicație:

* `SELECT *` - Selectează toate coloanele din tabel.
* `FROM Persons` - Specifică tabelul din care se selectează datele.
* `WHERE FirstName LIKE 'a%'` - Filtrează înregistrările unde coloana `FirstName` începe cu litera 'a'. Operatorul `LIKE` este folosit pentru compararea șirurilor de caractere, iar `'a%'` reprezintă un șir care începe cu 'a' și poate avea orice caractere după.
",SELECT * FROM Persons WHERE FirstName LIKE 'a%',,,,,0.1286558732448934,0.19999999999999998,
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']","Contextul furnizat nu conține informații despre operatorii OR și AND în SQL. Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 
",Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']","Contextul furnizat nu conține informații despre operatorii OR și AND în SQL. Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 
",Adevărat,,,,,0.0,0.0,
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT * FROM Persons WHERE FirstName = 'Peter' AND LastName = 'Jackson';
``` 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT * FROM Persons WHERE FirstName = 'Peter' AND LastName = 'Jackson';
``` 
",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',,,,,0.5653636138834067,0.9473684210526316,
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']","```sql
SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```
","Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']","```sql
SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```
",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',,,,,0.5118285025257893,0.9473684210526316,
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']","Contextul furnizat nu conține informații despre instrucțiunile SQL care returnează doar valori diferite. Prin urmare, nu pot răspunde la solicitarea dumneavoastră.
",Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']","Contextul furnizat nu conține informații despre instrucțiunile SQL care returnează doar valori diferite. Prin urmare, nu pot răspunde la solicitarea dumneavoastră.
",SELECT DISTINCT,,,,,0.0,0.0,
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Cuvântul cheie SQL folosit pentru a sorta mulțimea de rezultate este **ORDER BY**. 
",Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Cuvântul cheie SQL folosit pentru a sorta mulțimea de rezultate este **ORDER BY**. 
",ORDER BY,,,,,0.04573913556123801,0.23529411764705882,
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare SQL va selecta toate înregistrările din tabelul ""Persons"" și le va sorta descrescător în funcție de coloana ""FirstName"". 
","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare SQL va selecta toate înregistrările din tabelul ""Persons"" și le va sorta descrescător în funcție de coloana ""FirstName"". 
",SELECT * FROM Persons ORDER BY FirstName DESC,,,,,0.1663603558532716,0.3684210526315789,
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Contextul furnizat nu conține informații specifice despre inserarea de înregistrări în tabelul ""Persons"". Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 

Pentru a vă ajuta, aș avea nevoie de mai multe detalii despre structura tabelei ""Persons"" și despre sistemul de gestionare a bazelor de date (DBMS) pe care îl utilizați. 

De exemplu, aș avea nevoie să știu:

* Ce coloane are tabelul ""Persons""?
* Ce tip de date are fiecare coloană?
* Ce DBMS utilizați (de exemplu, MySQL, PostgreSQL, Oracle)?

Odată ce am aceste informații, pot genera o comandă SQL pentru a insera o înregistrare nouă în tabelul ""Persons"".
","Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Contextul furnizat nu conține informații specifice despre inserarea de înregistrări în tabelul ""Persons"". Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 

Pentru a vă ajuta, aș avea nevoie de mai multe detalii despre structura tabelei ""Persons"" și despre sistemul de gestionare a bazelor de date (DBMS) pe care îl utilizați. 

De exemplu, aș avea nevoie să știu:

* Ce coloane are tabelul ""Persons""?
* Ce tip de date are fiecare coloană?
* Ce DBMS utilizați (de exemplu, MySQL, PostgreSQL, Oracle)?

Odată ce am aceste informații, pot genera o comandă SQL pentru a insera o înregistrare nouă în tabelul ""Persons"".
","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",,,,,0.02627961710408444,0.01834862385321101,
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']","Contextul furnizat nu conține informații despre cum să se insereze date într-un tabel. Prin urmare, nu pot răspunde la solicitarea ta. 
","Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']","Contextul furnizat nu conține informații despre cum să se insereze date într-un tabel. Prin urmare, nu pot răspunde la solicitarea ta. 
",INSERT INTO Persons (LastName) VALUES ('Olsen'),,,,,0.0,0.0,
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Contextul furnizat nu oferă informații despre cum se poate schimba o valoare dintr-o coloană a unui tabel. De aceea, nu pot răspunde la întrebarea ta.  

Pentru a schimba valoarea ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"", ai nevoie de o interogare SQL de tipul UPDATE. 

Iată un exemplu generic:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această interogare va schimba toate înregistrările din tabelul ""Persons"" unde coloana ""LastName"" are valoarea ""Hansen"" la ""Nilsen"". 

Înainte de a rula o interogare UPDATE, este important să o testezi pe o copie de rezervă a bazei de date pentru a evita modificarea neintenționată a datelor reale. 
","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Contextul furnizat nu oferă informații despre cum se poate schimba o valoare dintr-o coloană a unui tabel. De aceea, nu pot răspunde la întrebarea ta.  

Pentru a schimba valoarea ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"", ai nevoie de o interogare SQL de tipul UPDATE. 

Iată un exemplu generic:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această interogare va schimba toate înregistrările din tabelul ""Persons"" unde coloana ""LastName"" are valoarea ""Hansen"" la ""Nilsen"". 

Înainte de a rula o interogare UPDATE, este important să o testezi pe o copie de rezervă a bazei de date pentru a evita modificarea neintenționată a datelor reale. 
",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',,,,,0.0,0.13445378151260504,
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
```
","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
```
",DELETE FROM Persons WHERE FirstName = 'Peter',,,,,0.40016016019225004,0.923076923076923,
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","Pentru a returna numărul de înregistrări din tabelul ""Persons"" folosind SQL, se poate folosi instrucțiunea `SELECT COUNT(*) FROM Persons;`. 
","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","Pentru a returna numărul de înregistrări din tabelul ""Persons"" folosind SQL, se poate folosi instrucțiunea `SELECT COUNT(*) FROM Persons;`. 
",SELECT COUNT(*) FROM Persons,,,,,0.20333448190047887,0.3076923076923077,
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Din păcate, contextul furnizat nu oferă informații despre tipurile de join. 
",Care este cel mai cunoscut tip de join?,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Din păcate, contextul furnizat nu oferă informații despre tipurile de join. 
",INNER JOIN,,,,,0.0,0.13333333333333336,
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']","Contextul furnizat nu oferă informații despre operatorii utilizați pentru a selecta valori dintr-un interval. 
",Ce operator este folosit pentru a selecta valori dintr-un interval?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']","Contextul furnizat nu oferă informații despre operatorii utilizați pentru a selecta valori dintr-un interval. 
",BETWEEN,,,,,0.0,0.0,
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']","Afirmația este corectă. 

Contextul furnizat explică faptul că constrângerea NOT NULL ""asigură faptul că o coloană să nu conţină valoarea nulă"". 

Aceasta înseamnă că, dacă o coloană are constrângerea NOT NULL, atunci în acea coloană nu se pot introduce valori NULL. 
",Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']","Afirmația este corectă. 

Contextul furnizat explică faptul că constrângerea NOT NULL ""asigură faptul că o coloană să nu conţină valoarea nulă"". 

Aceasta înseamnă că, dacă o coloană are constrângerea NOT NULL, atunci în acea coloană nu se pot introduce valori NULL. 
",Adevărat,,,,,0.0,0.0,
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']","Operatorul folosit pentru a căuta un model specificat într-o coloană este **LIKE**. 
",Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']","Operatorul folosit pentru a căuta un model specificat într-o coloană este **LIKE**. 
",LIKE,,,,,0.024455939372403628,0.13333333333333333,
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Instrucțiunea SQL pentru a crea un tabel numit ""Customers"" este:

**CREATE TABLE Customers ( ... );**

Aici, ""... "" reprezintă definiția coloanelor din tabelul Customers, cum ar fi tipul de date, numele coloanei, constrângeri etc. 

De exemplu:

**CREATE TABLE Customers (**
**CustomerID INT PRIMARY KEY,**
**CustomerName VARCHAR(255),**
**Address VARCHAR(255),**
**City VARCHAR(255),**
**Country VARCHAR(255)**
**);**

Această instrucțiune SQL creează un tabel numit ""Customers"" cu coloanele specificate. 
","Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Instrucțiunea SQL pentru a crea un tabel numit ""Customers"" este:

**CREATE TABLE Customers ( ... );**

Aici, ""... "" reprezintă definiția coloanelor din tabelul Customers, cum ar fi tipul de date, numele coloanei, constrângeri etc. 

De exemplu:

**CREATE TABLE Customers (**
**CustomerID INT PRIMARY KEY,**
**CustomerName VARCHAR(255),**
**Address VARCHAR(255),**
**City VARCHAR(255),**
**Country VARCHAR(255)**
**);**

Această instrucțiune SQL creează un tabel numit ""Customers"" cu coloanele specificate. 
",CREATE TABLE Customers,,,,,0.06760229884571736,0.08695652173913045,
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","Contextul furnizat nu conține informații despre cum să actualizezi salariile angajaților din departamentul 10 cu 10% din salariul mediu al companiei. Contextul se concentrează pe exemple de clauze WHERE și pe o problemă propusă despre actualizarea salariilor tuturor angajaților din tabela Copy_EMP, dar nu oferă detalii despre cum să se calculeze salariul mediu al companiei sau cum să se actualizeze salariile angajaților dintr-un anumit departament. 
",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","Contextul furnizat nu conține informații despre cum să actualizezi salariile angajaților din departamentul 10 cu 10% din salariul mediu al companiei. Contextul se concentrează pe exemple de clauze WHERE și pe o problemă propusă despre actualizarea salariilor tuturor angajaților din tabela Copy_EMP, dar nu oferă detalii despre cum să se calculeze salariul mediu al companiei sau cum să se actualizeze salariile angajaților dintr-un anumit departament. 
",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,,,,,0.016504712178944343,0.04597701149425287,
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']","Contextul furnizat nu conține o interogare SQL pentru a șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor. 

Cu toate acestea, pot oferi un exemplu de interogare SQL care ar putea fi utilizată pentru a realiza această operațiune. Rețineți că este important să testați interogarea într-un mediu de test înainte de a o utiliza pe o bază de date live.

```sql
DELETE FROM angajati
WHERE sal < (SELECT AVG(sal) FROM angajati WHERE deptno = angajati.deptno);

SELECT ROW_COUNT();
```

Această interogare folosește o sub-interogare pentru a calcula salariul mediu al fiecărui departament și apoi compară salariul angajatului cu media respectivă.  
Interogarea `SELECT ROW_COUNT();` returneaza numarul de linii șterse.

**Observații:**

* Înlocuiți ""angajati"" cu numele tabelei care conține informații despre angajați.
* Înlocuiți ""sal"" cu numele coloanei care conține salariul.
* Înlocuiți ""deptno"" cu numele coloanei care conține numărul departamentului.

Pentru a elimina riscul de a șterge date importante, se recomandă să verificați rezultatele selectării datelor înainte de a executa o interogare de ștergere.
",Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']","Contextul furnizat nu conține o interogare SQL pentru a șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor. 

Cu toate acestea, pot oferi un exemplu de interogare SQL care ar putea fi utilizată pentru a realiza această operațiune. Rețineți că este important să testați interogarea într-un mediu de test înainte de a o utiliza pe o bază de date live.

```sql
DELETE FROM angajati
WHERE sal < (SELECT AVG(sal) FROM angajati WHERE deptno = angajati.deptno);

SELECT ROW_COUNT();
```

Această interogare folosește o sub-interogare pentru a calcula salariul mediu al fiecărui departament și apoi compară salariul angajatului cu media respectivă.  
Interogarea `SELECT ROW_COUNT();` returneaza numarul de linii șterse.

**Observații:**

* Înlocuiți ""angajati"" cu numele tabelei care conține informații despre angajați.
* Înlocuiți ""sal"" cu numele coloanei care conține salariul.
* Înlocuiți ""deptno"" cu numele coloanei care conține numărul departamentului.

Pentru a elimina riscul de a șterge date importante, se recomandă să verificați rezultatele selectării datelor înainte de a executa o interogare de ștergere.
",DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,,,,,0.0,0.10837438423645318,
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","Din păcate, contextul furnizat nu conține o schemă a tabelei ""EMP"" sau alte informații relevante pentru a scrie o interogare SQL care actualizează salariul angajaților din departamentul 30.

Pentru a construi o interogare care face acest lucru, ai nevoie de următoarele:

* **Numele tabelei:** Presupunând că tabelul se numește ""EMP"".
* **Numele coloanei pentru salariu:** De exemplu, ""sal"".
* **Numele coloanei pentru departament:** De exemplu, ""deptno"".

Odată ce ai aceste informații, interogarea ar arăta cam așa:

```sql
UPDATE EMP
SET sal = sal * (1 + (SELECT AVG(sal) FROM EMP WHERE deptno = 30) * 0.05)
WHERE deptno = 30;
```

Această interogare:

1. **Actualizează tabela ""EMP"".**
2. **Setează valoarea coloanei ""sal""** la valoarea actuală a salariului multiplicată cu 1 + (salariul mediu al departamentului 30 * 5%).
3. **Filtrează actualizarea** pentru a se aplica doar angajaților din departamentul 30 (deptno = 30).

**Important:**

* Asigurați-vă că aveți permisiunile necesare pentru a actualiza tabela.
* Testați interogarea pe o copie de rezervă a bazei de date înainte de a o executa pe baza de date live.
* Verificați rezultatele interogării pentru a vă asigura că funcționează corect.

Vă rog să furnizați mai multe informații despre tabela ""EMP"" pentru a putea crea o interogare mai precisă.
","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","Din păcate, contextul furnizat nu conține o schemă a tabelei ""EMP"" sau alte informații relevante pentru a scrie o interogare SQL care actualizează salariul angajaților din departamentul 30.

Pentru a construi o interogare care face acest lucru, ai nevoie de următoarele:

* **Numele tabelei:** Presupunând că tabelul se numește ""EMP"".
* **Numele coloanei pentru salariu:** De exemplu, ""sal"".
* **Numele coloanei pentru departament:** De exemplu, ""deptno"".

Odată ce ai aceste informații, interogarea ar arăta cam așa:

```sql
UPDATE EMP
SET sal = sal * (1 + (SELECT AVG(sal) FROM EMP WHERE deptno = 30) * 0.05)
WHERE deptno = 30;
```

Această interogare:

1. **Actualizează tabela ""EMP"".**
2. **Setează valoarea coloanei ""sal""** la valoarea actuală a salariului multiplicată cu 1 + (salariul mediu al departamentului 30 * 5%).
3. **Filtrează actualizarea** pentru a se aplica doar angajaților din departamentul 30 (deptno = 30).

**Important:**

* Asigurați-vă că aveți permisiunile necesare pentru a actualiza tabela.
* Testați interogarea pe o copie de rezervă a bazei de date înainte de a o executa pe baza de date live.
* Verificați rezultatele interogării pentru a vă asigura că funcționează corect.

Vă rog să furnizați mai multe informații despre tabela ""EMP"" pentru a putea crea o interogare mai precisă.
","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",,,,,0.05384497409640291,0.13973799126637557,
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","Contextul furnizat nu conține informații despre o tabelă cu angajați sau despre o coloană de dată a angajării. Prin urmare, nu pot genera o interogare care să actualizeze funcția angajaților angajați înainte de anul 2000. 

Pentru a genera o interogare relevantă, ar fi necesar să furnizați schema tabelei și numele coloanelor care conțin informațiile despre data angajării și funcția angajatului. 
",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","Contextul furnizat nu conține informații despre o tabelă cu angajați sau despre o coloană de dată a angajării. Prin urmare, nu pot genera o interogare care să actualizeze funcția angajaților angajați înainte de anul 2000. 

Pentru a genera o interogare relevantă, ar fi necesar să furnizați schema tabelei și numele coloanelor care conțin informațiile despre data angajării și funcția angajatului. 
","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",,,,,0.0,0.02409638554216867,
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']","I'm sorry, but the provided context does not contain any information about the weather in Galați. It only shows a repeating sequence of ""Întrebări?\n"" followed by a number. Therefore, I cannot answer your question. 
",Cum e vremea la galati ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']","I'm sorry, but the provided context does not contain any information about the weather in Galați. It only shows a repeating sequence of ""Întrebări?\n"" followed by a number. Therefore, I cannot answer your question. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.022869567780619007,0.0425531914893617,
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']","The context provided does not contain information about Michael Jackson's age. Therefore, I cannot answer your question. 
",Cati ani a trait Michael Jackson ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']","The context provided does not contain information about Michael Jackson's age. Therefore, I cannot answer your question. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.0,0.0,
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","I'm sorry, but I can't answer your question. The provided context doesn't contain any information about books. It only shows a list of text snippets that seem to be related to questions and numbers. 
",Ce o carte ?,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","I'm sorry, but I can't answer your question. The provided context doesn't contain any information about books. It only shows a list of text snippets that seem to be related to questions and numbers. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.0,0.0,
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']","The provided context doesn't contain any information relevant to the user prompt ""Cat face 2 + 2?"".  The context only contains text about database courses. 

Therefore, I cannot answer the user prompt using the information given. 
",Cat face 2 + 2 ?,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']","The provided context doesn't contain any information relevant to the user prompt ""Cat face 2 + 2?"".  The context only contains text about database courses. 

Therefore, I cannot answer the user prompt using the information given. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.0,0.0,
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Îmi pare rău, dar textul furnizat nu oferă informații despre diferențele dintre bazele de date distribuite și NoSQL. Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 
",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Îmi pare rău, dar textul furnizat nu oferă informații despre diferențele dintre bazele de date distribuite și NoSQL. Prin urmare, nu pot răspunde la solicitarea dumneavoastră. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.020244462660665506,0.10256410256410256,
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']","Îmi pare rău, dar contextul furnizat nu oferă informații despre avantajele bazelor de date NoSQL față de bazele de date distribuite tradiționale.  Contextul se concentrează pe SQL și subinterogări, fără a menționa NoSQL sau baze de date distribuite. 
",Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']","Îmi pare rău, dar contextul furnizat nu oferă informații despre avantajele bazelor de date NoSQL față de bazele de date distribuite tradiționale.  Contextul se concentrează pe SQL și subinterogări, fără a menționa NoSQL sau baze de date distribuite. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.016466642419110007,0.07547169811320754,
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Contextul furnizat nu oferă informații despre bazele de date distribuite sau NoSQL. Prin urmare, nu pot răspunde la solicitarea dvs. 
",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Contextul furnizat nu oferă informații despre bazele de date distribuite sau NoSQL. Prin urmare, nu pot răspunde la solicitarea dvs. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.033864985683445356,0.1290322580645161,
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Contextul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit. Prin urmare, nu pot răspunde la solicitarea ta. 
",Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Contextul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit. Prin urmare, nu pot răspunde la solicitarea ta. 
",Nu am gasit informatii in curs despre intrebarea ta,,,,,0.02627961710408444,0.15789473684210528,
