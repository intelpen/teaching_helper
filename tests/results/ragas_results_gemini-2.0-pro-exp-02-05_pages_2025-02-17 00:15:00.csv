,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5']","Din contextul oferit, nu se menționează un model de organizare a datelor predominant. Textele descriu structura cursului de Baze de date, cunoștințele anterioare necesare, și câteva concepte specifice (subcereri corelate, vederi). Nu se specifică un model anume de organizare a datelor ca fiind predominant.
","În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5']","Din contextul oferit, nu se menționează un model de organizare a datelor predominant. Textele descriu structura cursului de Baze de date, cunoștințele anterioare necesare, și câteva concepte specifice (subcereri corelate, vederi). Nu se specifică un model anume de organizare a datelor ca fiind predominant.
",relațional,,,,,0.0,0.0,
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este PL/SQL.
",Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este PL/SQL.
",PL/SQL,,,,,0.10571070857151538,0.2857142857142857,
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Deși contextul furnizat menționează ""Limbajul SQL"", nu oferă informații specifice despre clauzele SQL. Prin urmare, nu pot răspunde la întrebarea ""Cu ce clauză SQL se filtrează rândurile dintr-o interogare?"" folosind doar informațiile date.
",Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Deși contextul furnizat menționează ""Limbajul SQL"", nu oferă informații specifice despre clauzele SQL. Prin urmare, nu pot răspunde la întrebarea ""Cu ce clauză SQL se filtrează rândurile dintr-o interogare?"" folosind doar informațiile date.
",WHERE,,,,,0.0,0.0,
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date']","Informațiile furnizate nu specifică funcția SQL care transformă șirurile de caractere în majuscule. Se menționează doar elemente de bază ale limbajului SQL, cum ar fi nume, constante numerice și constante alfanumerice (șiruri de caractere).
",Ce funcție SQL transformă șirurile de caractere în majuscule?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date']","Informațiile furnizate nu specifică funcția SQL care transformă șirurile de caractere în majuscule. Se menționează doar elemente de bază ale limbajului SQL, cum ar fi nume, constante numerice și constante alfanumerice (șiruri de caractere).
",UPPER,,,,,0.0,0.0,
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25\n']","Deși contextul furnizat descrie funcțiile de grup și menționează clauza HAVING pentru excluderea grupurilor, acesta nu specifică în mod explicit clauza utilizată pentru a grupa înregistrările *pentru a calcula* valorile agregate. Nu pot raspunde la intrebarea ta cu contextul dat.
",Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25\n']","Deși contextul furnizat descrie funcțiile de grup și menționează clauza HAVING pentru excluderea grupurilor, acesta nu specifică în mod explicit clauza utilizată pentru a grupa înregistrările *pentru a calcula* valorile agregate. Nu pot raspunde la intrebarea ta cu contextul dat.
",GROUP BY,,,,,0.0,0.0,
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52']","Din păcate, informațiile furnizate nu menționează explicit cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE. Informațiile vorbesc despre subcereri corelate și despre operatorul ALL.
",Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52']","Din păcate, informațiile furnizate nu menționează explicit cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE. Informațiile vorbesc despre subcereri corelate și despre operatorul ALL.
",subinterogare single-row,,,,,0.0,0.0,
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Din contextul furnizat, nu reiese în mod explicit o instrucțiune SQL care permite inserarea sau actualizarea condiționată a datelor. Totuși, sunt menționate operațiile DML (INSERT, UPDATE, DELETE) care pot fi folosite, probabil în conjuncție cu alte clauze, pentru a realiza inserări sau actualizări condiționate.
",Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Din contextul furnizat, nu reiese în mod explicit o instrucțiune SQL care permite inserarea sau actualizarea condiționată a datelor. Totuși, sunt menționate operațiile DML (INSERT, UPDATE, DELETE) care pot fi folosite, probabil în conjuncție cu alte clauze, pentru a realiza inserări sau actualizări condiționate.
",MERGE,,,,,0.0,0.0,
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14']","Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL. Acest lucru este exemplificat în context, unde constrângerea NOT NULL se aplică coloanelor ENAME și HIREDATE din tabela emp_new.
",Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14']","Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL. Acest lucru este exemplificat în context, unde constrângerea NOT NULL se aplică coloanelor ENAME și HIREDATE din tabela emp_new.
",NOT NULL,,,,,0.06772997136689071,0.1111111111111111,
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Conform informațiilor din context, o vedere este generată de o cerere SQL. Totuși, documentul nu specifică exact instrucțiunea SQL folosită.
","Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Conform informațiilor din context, o vedere este generată de o cerere SQL. Totuși, documentul nu specifică exact instrucțiunea SQL folosită.
",CREATE VIEW,,,,,0.0,0.0,
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre obiectul SQL utilizat pentru a genera automat valori unice. Prin urmare, nu pot răspunde la întrebare folosind doar contextul dat.
","Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre obiectul SQL utilizat pentru a genera automat valori unice. Prin urmare, nu pot răspunde la întrebare folosind doar contextul dat.
",SEQUENCE,,,,,0.0,0.0,
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Îmi pare rău, dar informațiile furnizate nu includ instrucțiunea SQL specifică pentru crearea unui utilizator nou în Oracle. Contextul vorbește despre facilitățile generale ale sistemului Oracle, securitate, sinonime și evoluția acestuia, dar nu oferă detalii despre crearea utilizatorilor.
","Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Îmi pare rău, dar informațiile furnizate nu includ instrucțiunea SQL specifică pentru crearea unui utilizator nou în Oracle. Contextul vorbește despre facilitățile generale ale sistemului Oracle, securitate, sinonime și evoluția acestuia, dar nu oferă detalii despre crearea utilizatorilor.
",CREATE USER,,,,,0.0,0.0,
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22']","Informațiile din context nu descriu un model specific de bază de date, ci menționează doar că datele sunt stocate în mulțimi de date relaționate numite înregistrări, iar o colecție de înregistrări dependente se numește bază de date. De asemenea se precizează că obiectele care pot exista într-o bază de date sunt: tabele, vederi (views), secvențe, indecși și sinonime.
","Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22']","Informațiile din context nu descriu un model specific de bază de date, ci menționează doar că datele sunt stocate în mulțimi de date relaționate numite înregistrări, iar o colecție de înregistrări dependente se numește bază de date. De asemenea se precizează că obiectele care pot exista într-o bază de date sunt: tabele, vederi (views), secvențe, indecși și sinonime.
",relațional,,,,,0.0,0.028169014084507046,
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Conform contextului, una dintre caracteristicile principale ale modelului relațional este ""Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare"". Tot din context aflăm că ""Limbajul de interogare SQL este standardizat"". Deși contextul nu menționează explicit cuvântul cheie SQL specific, el afirmă clar rolul cheilor primare în identificarea unică a înregistrărilor.
",Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Conform contextului, una dintre caracteristicile principale ale modelului relațional este ""Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare"". Tot din context aflăm că ""Limbajul de interogare SQL este standardizat"". Deși contextul nu menționează explicit cuvântul cheie SQL specific, el afirmă clar rolul cheilor primare în identificarea unică a înregistrărilor.
",PRIMARY KEY,,,,,0.0,0.0,
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47']","Deși fragmentul de context furnizat nu menționează explicit etapa specifică de transformare a modelului conceptual într-un model relațional, acesta descrie elemente cheie ale modelului relațional:

*   **Modelul relațional:** Reprezintă baza de date ca o colecție de tabele.
*   **Partea structurală:** Schema bazei de date este o colecție de scheme de relații.
*   **Partea de integritate:** Chei primare și chei străine.
*   **Partea de manipulare:** Algebra relațională și calcul relațional.

Acesta subliniază necesitatea cunoașterii teoriei relaționale pentru analiza și proiectarea bazei de date relaționale.
","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47']","Deși fragmentul de context furnizat nu menționează explicit etapa specifică de transformare a modelului conceptual într-un model relațional, acesta descrie elemente cheie ale modelului relațional:

*   **Modelul relațional:** Reprezintă baza de date ca o colecție de tabele.
*   **Partea structurală:** Schema bazei de date este o colecție de scheme de relații.
*   **Partea de integritate:** Chei primare și chei străine.
*   **Partea de manipulare:** Algebra relațională și calcul relațional.

Acesta subliniază necesitatea cunoașterii teoriei relaționale pentru analiza și proiectarea bazei de date relaționale.
",modelarea logică,,,,,0.0,0.0,
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66']","Conform cursului, o bază de date conține următoarele obiecte: tabele, vederi (views), secvențe, indecși și sinonime. De asemenea, cursul menționează că sistemele de baze de date pot fi clasificate după numărul de utilizatori și după numărul de stații pe care este stocată baza de date. Administratorul bazei de date este un utilizator de nivel înalt, care acordă acces utilizatorilor.
","Ce este o bază de date, conform cursului?","['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66']","Conform cursului, o bază de date conține următoarele obiecte: tabele, vederi (views), secvențe, indecși și sinonime. De asemenea, cursul menționează că sistemele de baze de date pot fi clasificate după numărul de utilizatori și după numărul de stații pe care este stocată baza de date. Administratorul bazei de date este un utilizator de nivel înalt, care acordă acces utilizatorilor.
","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",,,,,0.0725340937710925,0.1797752808988764,
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date']","Conform cursului, Oracle este prezentat prin versiunea sa ""Database 11g Express Edition"". Este un sistem de gestionare a bazelor de date, iar cursul include instrucțiuni pentru instalarea și configurarea acestuia (parola pentru utilizatorii SYS și SYSTEM). De asemenea, se menționează că serverul Oracle gestionează privilegiile utilizatorilor și nu permite operații neautorizate.
",Ce reprezintă Oracle în cursul prezentat?,"['2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date']","Conform cursului, Oracle este prezentat prin versiunea sa ""Database 11g Express Edition"". Este un sistem de gestionare a bazelor de date, iar cursul include instrucțiuni pentru instalarea și configurarea acestuia (parola pentru utilizatorii SYS și SYSTEM). De asemenea, se menționează că serverul Oracle gestionează privilegiile utilizatorilor și nu permite operații neautorizate.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",,,,,0.0341230718008433,0.13157894736842105,
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8']","Clauza ORDER BY într-o interogare SELECT sortează rezultatul în funcție de criteriile specificate. Serverul sortează rezultatul înainte de a-l trimite, conform clauzei ORDER BY. Dacă lipsește clauza ORDER BY, liniile din rezultat sunt într-o ordine independentă de conținutul lor sau de ordinea în care au fost adăugate în tabelă. Într-o instrucțiune SELECT se poate folosi o singură clauză ORDER BY și, dacă se folosește, trebuie să fie ultima clauză a interogării principale.
",Ce face clauza ORDER BY într-o interogare SELECT?,"['copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8']","Clauza ORDER BY într-o interogare SELECT sortează rezultatul în funcție de criteriile specificate. Serverul sortează rezultatul înainte de a-l trimite, conform clauzei ORDER BY. Dacă lipsește clauza ORDER BY, liniile din rezultat sunt într-o ordine independentă de conținutul lor sau de ordinea în care au fost adăugate în tabelă. Într-o instrucțiune SELECT se poate folosi o singură clauză ORDER BY și, dacă se folosește, trebuie să fie ultima clauză a interogării principale.
","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",,,,,0.045340865769639624,0.15686274509803924,
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Îmi pare rău, dar informațiile furnizate nu menționează cele două categorii în care se împart funcțiile în SQL. Textul se referă la un curs despre baze de date și limbajul SQL, predat de Adrian Runceanu la Universitatea Constantin Brâncuși din Târgu-Jiu.
","În ce două categorii se împart funcțiile în SQL, conform cursului?","['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Îmi pare rău, dar informațiile furnizate nu menționează cele două categorii în care se împart funcțiile în SQL. Textul se referă la un curs despre baze de date și limbajul SQL, predat de Adrian Runceanu la Universitatea Constantin Brâncuși din Târgu-Jiu.
",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,,,,,0.024074859035470342,0.13333333333333333,
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Conform cursului, funcțiile de grup în SQL au următoarea sintaxă:

```sql
SELECT [coloana,] functie_de_grup(coloana), ...
FROM tabel
[WHERE conditie]
[GROUP BY coloana]
[HAVING conditie_de_grupare]
[ORDER BY coloana];
```

Serverul Oracle execută funcțiile de grup în această ordine:

1.  Selecția rândurilor ce respectă clauza WHERE.
2.  Gruparea rândurilor obținute, respectând clauza GROUP BY.
3.  Calcularea rezultatelor funcțiilor de grup pentru fiecare grup în parte.
4.  Eliminarea grupurilor ce nu respectă clauza HAVING.
5.  Ordonarea rezultatelor respectând clauza GROUP BY (implicit crescător, sau descrescător dacă se folosește DESC după ORDER BY).
","Ce sunt funcțiile de grup în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Conform cursului, funcțiile de grup în SQL au următoarea sintaxă:

```sql
SELECT [coloana,] functie_de_grup(coloana), ...
FROM tabel
[WHERE conditie]
[GROUP BY coloana]
[HAVING conditie_de_grupare]
[ORDER BY coloana];
```

Serverul Oracle execută funcțiile de grup în această ordine:

1.  Selecția rândurilor ce respectă clauza WHERE.
2.  Gruparea rândurilor obținute, respectând clauza GROUP BY.
3.  Calcularea rezultatelor funcțiilor de grup pentru fiecare grup în parte.
4.  Eliminarea grupurilor ce nu respectă clauza HAVING.
5.  Ordonarea rezultatelor respectând clauza GROUP BY (implicit crescător, sau descrescător dacă se folosește DESC după ORDER BY).
","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",,,,,0.017374452798792083,0.15625,
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10']","O subinterogare (subquery) în SQL este o instrucțiune SELECT care este inclusă în clauza unei alte instrucțiuni SELECT. Subinterogările ne permit să aflăm o informație necesară pentru a obține informația pe care o dorim.
",Ce este o subinterogare (subquery) în SQL?,"['copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10']","O subinterogare (subquery) în SQL este o instrucțiune SELECT care este inclusă în clauza unei alte instrucțiuni SELECT. Subinterogările ne permit să aflăm o informație necesară pentru a obține informația pe care o dorim.
","O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",,,,,0.13183313065480148,0.3125,
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date']","Limbajul de manipulare al datelor (DML) în SQL permite adăugarea, actualizarea sau ștergerea datelor din baza de date. Comenzile DML sunt executate pentru a efectua aceste operații. O colecție de comenzi DML care formează o unitate logică este considerată o tranzacție.
",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date']","Limbajul de manipulare al datelor (DML) în SQL permite adăugarea, actualizarea sau ștergerea datelor din baza de date. Comenzile DML sunt executate pentru a efectua aceste operații. O colecție de comenzi DML care formează o unitate logică este considerată o tranzacție.
","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",,,,,0.29945160623183914,0.3278688524590164,0.67
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21']","Conform cursului, constrângerea FOREIGN KEY (cheie străină) în SQL:

*   Definește o coloană sau o combinație de coloane ca cheie străină.
*   Stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite.
*   Asigură că o valoare care apare într-o tabelă trebuie să se regăsească și în cealaltă tabelă, pe coloana unde formează cheia primară.
*   Asigură referențialitatea corectă între tabele.
* Poate fi definită la nivel de coloana sau tabel.

","Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21']","Conform cursului, constrângerea FOREIGN KEY (cheie străină) în SQL:

*   Definește o coloană sau o combinație de coloane ca cheie străină.
*   Stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite.
*   Asigură că o valoare care apare într-o tabelă trebuie să se regăsească și în cealaltă tabelă, pe coloana unde formează cheia primară.
*   Asigură referențialitatea corectă între tabele.
* Poate fi definită la nivel de coloana sau tabel.

","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",,,,,0.02503951108927454,0.24074074074074073,
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Conform cursului, o vedere (view) în SQL are un nume și este generată de o cerere SQL. Vederile simple sunt cele care interoghează o singură tabelă, nu conțin funcții, nu conțin grupuri de date și oferă posibilitatea efectuării de operații DML (INSERT, UPDATE, DELETE). Pentru a vizualiza conținutul vederii, se folosește cererea SQL SELECT.
","Ce este o vedere (view) în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Conform cursului, o vedere (view) în SQL are un nume și este generată de o cerere SQL. Vederile simple sunt cele care interoghează o singură tabelă, nu conțin funcții, nu conțin grupuri de date și oferă posibilitatea efectuării de operații DML (INSERT, UPDATE, DELETE). Pentru a vizualiza conținutul vederii, se folosește cererea SQL SELECT.
","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",0.0,0.0,0.8717834424694786,1.0,0.025905489539591008,0.13953488372093023,0.0
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices']","Conform cursului, secvențele în SQL sunt folosite pentru a insera valori în baza de date. În exemplul dat, o secvență este utilizată pentru a insera o nouă înregistrare în tabela de departamente, generând automat o valoare pentru coloana `deptno` folosind `dept_seq_1.NEXTVAL`.
","De ce se folosesc secvențele în SQL, potrivit cursului?","['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices']","Conform cursului, secvențele în SQL sunt folosite pentru a insera valori în baza de date. În exemplul dat, o secvență este utilizată pentru a insera o nouă înregistrare în tabela de departamente, generând automat o valoare pentru coloana `deptno` folosind `dept_seq_1.NEXTVAL`.
","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",0.4166666666458333,0.0,0.8572960714504577,1.0,0.030235785635823294,0.12698412698412698,0.0
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, securitatea bazei de date se clasifică în două categorii:

1.  Securitatea sistemului
2.  Securitatea datelor
","Ce acoperă securitatea bazei de date, conform cursului?","['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, securitatea bazei de date se clasifică în două categorii:

1.  Securitatea sistemului
2.  Securitatea datelor
","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",0.4166666666458333,0.0,0.8311841096045463,1.0,0.06889797015506097,0.21052631578947367,0.0
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, bazele de date sunt utilizate de firme pentru păstrarea și gestionarea informațiilor. Cursul prezintă exemple de utilizare a bazelor de date, dar nu compară în mod direct bazele de date cu fișierele tradiționale și nu enumeră avantajele specifice.
","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, bazele de date sunt utilizate de firme pentru păstrarea și gestionarea informațiilor. Cursul prezintă exemple de utilizare a bazelor de date, dar nu compară în mod direct bazele de date cu fișierele tradiționale și nu enumeră avantajele specifice.
","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",0.0,0.0,0.916227893114928,1.0,0.031251907639724415,0.06896551724137931,0.0
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici:

*   **Reprezentare:** O bază de date este reprezentată ca o colecție de tabele.
*   **Legătură matematică:** Este direct legat de conceptul matematic de relație.
*   **Trei părți componente:**
    1.  **Parte structurală:** Schema bazei de date este o colecție de scheme de relații, iar o bază de date este o colecție de relații.
    2.  **Parte de integritate:** Chei primare și chei străine.
    3.  **Parte de manipulare:** Algebra relațională și calcul relațional.
","Ce caracteristici are modelul relațional de baze de date, conform cursului?","['copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici:

*   **Reprezentare:** O bază de date este reprezentată ca o colecție de tabele.
*   **Legătură matematică:** Este direct legat de conceptul matematic de relație.
*   **Trei părți componente:**
    1.  **Parte structurală:** Schema bazei de date este o colecție de scheme de relații, iar o bază de date este o colecție de relații.
    2.  **Parte de integritate:** Chei primare și chei străine.
    3.  **Parte de manipulare:** Algebra relațională și calcul relațional.
","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",0.99999999995,0.6666666666666666,0.8955906122964663,1.0,0.009196271525972168,0.1724137931034483,0.5
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48']","Informațiile furnizate nu descriu etapele proiectării bazelor de date relaționale. Acestea discută despre concepte de bază din teoria relațională a bazelor de date, modelul de date obiect-relațional și oferă un exemplu de bază de date (FACULTATE) cu cinci tabele.
","Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48']","Informațiile furnizate nu descriu etapele proiectării bazelor de date relaționale. Acestea discută despre concepte de bază din teoria relațională a bazelor de date, modelul de date obiect-relațional și oferă un exemplu de bază de date (FACULTATE) cu cinci tabele.
","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",0.0,0.0,0.8399716253472014,1.0,0.0,0.03225806451612903,0.2
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19']","Conform informațiilor din context, modelul relațional este comparat cu alte modele de baze de date, cum ar fi:

*   Modelul de date orientat pe obiect
*   Modelul de date obiect-relațional
*   Modelul de date ierarhic
*   Modelul de date rețea

Textul sursă listează aceste modele, dar nu descrie avantajele fundamentale ale modelului relațional în comparație cu celelalte.
","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19']","Conform informațiilor din context, modelul relațional este comparat cu alte modele de baze de date, cum ar fi:

*   Modelul de date orientat pe obiect
*   Modelul de date obiect-relațional
*   Modelul de date ierarhic
*   Modelul de date rețea

Textul sursă listează aceste modele, dar nu descrie avantajele fundamentale ale modelului relațional în comparație cu celelalte.
","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",0.0,0.0,0.0,0.8571428571428571,0.010123587414474375,0.15217391304347824,0.53
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date']","Iată un răspuns la întrebarea dvs., bazat pe informațiile furnizate:

**Evoluția SGBD-ului Oracle:**

*   Oracle Corporation a fost fondată în 1977 în SUA, California.
*   SGBD-ul Oracle este un sistem de gestiune a bazelor de date (SGBD) relațional, extins cu facilități orientate-obiect (OO).
*   Este cel mai mare furnizor de software de gestiunea datelor.
*    Ruleaza pe o varietate de platforme (micro, mini, mainframe) și sisteme de operare.

**Arhitectura SGBD-ului Oracle:**

*   Arhitectura de bază este client/server.
*   **Serverul:** Gestionează stocarea, manipularea datelor și administrarea bazei de date.
*   **Clientul:** Oferă interfața utilizatorului și rulează aplicația care accesează datele.
*   **Dictionarul de date** face parte din baza de date, contine informatii referitoare la utilizatori, drepturi de acces, obiecte din baza de date, structuri de date etc.

Textul furnizat nu include informatii despre diferențele față de alte tipuri de baze de date moderne.
",Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date']","Iată un răspuns la întrebarea dvs., bazat pe informațiile furnizate:

**Evoluția SGBD-ului Oracle:**

*   Oracle Corporation a fost fondată în 1977 în SUA, California.
*   SGBD-ul Oracle este un sistem de gestiune a bazelor de date (SGBD) relațional, extins cu facilități orientate-obiect (OO).
*   Este cel mai mare furnizor de software de gestiunea datelor.
*    Ruleaza pe o varietate de platforme (micro, mini, mainframe) și sisteme de operare.

**Arhitectura SGBD-ului Oracle:**

*   Arhitectura de bază este client/server.
*   **Serverul:** Gestionează stocarea, manipularea datelor și administrarea bazei de date.
*   **Clientul:** Oferă interfața utilizatorului și rulează aplicația care accesează datele.
*   **Dictionarul de date** face parte din baza de date, contine informatii referitoare la utilizatori, drepturi de acces, obiecte din baza de date, structuri de date etc.

Textul furnizat nu include informatii despre diferențele față de alte tipuri de baze de date moderne.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",0.0,0.5,0.8257681875107313,1.0,0.020373027153470204,0.19672131147540983,0.15
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31']","Pe baza informațiilor din context, pot să-ți explic cum se utilizează clauzele WHERE și ORDER BY, dar nu există informații despre combinarea acestora cu funcții agregate. Iată ce pot să-ți spun despre fiecare:

*   **Clauza WHERE:**
    *   Restricționează rezultatele unei interogări la rândurile care îndeplinesc o anumită condiție.
    *   Condiția este formată din:
        1.  Un nume de coloană.
        2.  Un operator de comparație.
        3.  Un nume de coloană, o constantă sau o listă de valori.
    *   Poate compara valori în coloane, valori literale, expresii aritmetice sau funcții.

*   **Clauza ORDER BY:**
    *   Serverul sortează rezultatul în funcție de criteriile specificate de clauza ORDER BY.
    *    Dacă lipsește clauza ORDER BY, ordinea este independentă de conținut sau ordinea adăugării.
* Sintaxa conține
    * O subcerere care intoarce elemente sortate și care conține clauza ORDER BY
    * Ca să avem cea mai mare valoare pe prima linie folosim DESC
    * O cerere care selectează un anumit număr de linii (N) ca rezultat final. Conține:
    * ROWNUM care aloca o valoare începând de la 1 fiecărei linii intoarse de subcerere.
     *WHERE care condiţionează numărul de linii întoarse

Contextul furnizat nu oferă detalii despre cum se combină acestea în mod specific cu funcții agregate.
","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31']","Pe baza informațiilor din context, pot să-ți explic cum se utilizează clauzele WHERE și ORDER BY, dar nu există informații despre combinarea acestora cu funcții agregate. Iată ce pot să-ți spun despre fiecare:

*   **Clauza WHERE:**
    *   Restricționează rezultatele unei interogări la rândurile care îndeplinesc o anumită condiție.
    *   Condiția este formată din:
        1.  Un nume de coloană.
        2.  Un operator de comparație.
        3.  Un nume de coloană, o constantă sau o listă de valori.
    *   Poate compara valori în coloane, valori literale, expresii aritmetice sau funcții.

*   **Clauza ORDER BY:**
    *   Serverul sortează rezultatul în funcție de criteriile specificate de clauza ORDER BY.
    *    Dacă lipsește clauza ORDER BY, ordinea este independentă de conținut sau ordinea adăugării.
* Sintaxa conține
    * O subcerere care intoarce elemente sortate și care conține clauza ORDER BY
    * Ca să avem cea mai mare valoare pe prima linie folosim DESC
    * O cerere care selectează un anumit număr de linii (N) ca rezultat final. Conține:
    * ROWNUM care aloca o valoare începând de la 1 fiecărei linii intoarse de subcerere.
     *WHERE care condiţionează numărul de linii întoarse

Contextul furnizat nu oferă detalii despre cum se combină acestea în mod specific cu funcții agregate.
","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",0.0,0.0,0.0,1.0,0.031267285694349486,0.10727969348659003,0.53
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Îmi pare rău, dar nu pot răspunde la această întrebare, deoarece informațiile furnizate în context nu conțin detalii despre funcțiile UPPER, LOWER și INITCAP.
","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Îmi pare rău, dar nu pot răspunde la această întrebare, deoarece informațiile furnizate în context nu conțin detalii despre funcțiile UPPER, LOWER și INITCAP.
","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",0.0,0.0,0.0,0.5,0.11347584250887902,0.17910447761194026,
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15']","Bazat pe informațiile din context, iată o explicație a mecanismului de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE:

**Mecanism de Execuție:**

1.  **Execuția subinterogării:** Subinterogările interne (cele din paranteze) sunt executate primele. O subinterogare single-row returnează o singură valoare. În exemplul dat (6.1. SINGLE ROW SUBQUERIES), cele două subinterogări interne returnează valorile ""FUNCTIONAR"" (CLERK) și 1300.
2.  **Integrarea în interogarea exterioară:** Interogarea exterioară este apoi procesată. Valoarea (sau valorile) returnată de subinterogare este folosită în condiția de căutare a interogării exterioare, de obicei în clauza WHERE.

**Puncte cheie din Context:**

*   Subinterogarile trebuie incluse in paranteze.
*   Subinterogarile se plaseaza in partea dreapta a operatorului de comparare.
*    Este important ca subinterogarea sa fie de tipul ""single-row"", adica sa returneze o singura valoare, daca se foloseste cu operatori single-row.
* Se folosesc operatori single-row in subinterogari single-row.

Pe scurt, subinterogarea single-row este executată întâi, returnează o singură valoare, iar acea valoare este apoi utilizată de interogarea principală (exterioară) în clauza WHERE pentru a filtra rezultatele.
",Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15']","Bazat pe informațiile din context, iată o explicație a mecanismului de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE:

**Mecanism de Execuție:**

1.  **Execuția subinterogării:** Subinterogările interne (cele din paranteze) sunt executate primele. O subinterogare single-row returnează o singură valoare. În exemplul dat (6.1. SINGLE ROW SUBQUERIES), cele două subinterogări interne returnează valorile ""FUNCTIONAR"" (CLERK) și 1300.
2.  **Integrarea în interogarea exterioară:** Interogarea exterioară este apoi procesată. Valoarea (sau valorile) returnată de subinterogare este folosită în condiția de căutare a interogării exterioare, de obicei în clauza WHERE.

**Puncte cheie din Context:**

*   Subinterogarile trebuie incluse in paranteze.
*   Subinterogarile se plaseaza in partea dreapta a operatorului de comparare.
*    Este important ca subinterogarea sa fie de tipul ""single-row"", adica sa returneze o singura valoare, daca se foloseste cu operatori single-row.
* Se folosesc operatori single-row in subinterogari single-row.

Pe scurt, subinterogarea single-row este executată întâi, returnează o singură valoare, iar acea valoare este apoi utilizată de interogarea principală (exterioară) în clauza WHERE pentru a filtra rezultatele.
","O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",0.19999999998,0.5,0.8710795438343718,0.7857142857142857,0.0182680755836395,0.11453744493392069,0.74
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28']","Îmi pare rău, dar informațiile despre cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective nu se regăsesc în contextul furnizat. Contextul se referă la crearea și utilizarea indecșilor în baze de date.
",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28']","Îmi pare rău, dar informațiile despre cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective nu se regăsesc în contextul furnizat. Contextul se referă la crearea și utilizarea indecșilor în baze de date.
",UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,0.0,0.0,0.0,1.0,0.02727768996755739,0.10526315789473685,0.0
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24']","Conform contextului furnizat, constrângerile de integritate se aplică în felul următor pentru a asigura securitatea și consistența datelor:

*   **PRIMARY KEY (Cheia primară):** Asigură că fiecare înregistrare dintr-un tabel este unică. Acest lucru previne duplicarea datelor și ajută la identificarea corectă a fiecărei înregistrări.

*   **FOREIGN KEY (Cheia străină):** Asigură că există o relație validă între două tabele. Aceasta înseamnă că o valoare dintr-o coloană a unui tabel (coloana cheie străină) trebuie să existe și într-o coloană a altui tabel (de obicei, cheia primară a acelui tabel). Acest lucru menține integritatea referențială a datelor.

*   **CHECK (Verificare):** Limitează valorile care pot fi introduse într-o coloană. De exemplu, se poate impune ca o adresă de e-mail să conțină caracterele ""@"" și ""."". Acest lucru ajută la menținerea acurateței și validității datelor.
    Un exemplu dat este: `ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%');`

Exemplu de utilizare a acestor constrângeri într-un sistem de gestionare a comenzilor:

```sql
CREATE TABLE Client (
    ID INT PRIMARY KEY,
    Nume VARCHAR(50),
    Email VARCHAR(50) UNIQUE
);

CREATE TABLE Comanda (
    ID INT PRIMARY KEY,
    ClientID INT,
    DataComanda DATE,
    FOREIGN KEY (ClientID) REFERENCES Client(ID)
);
```
În exemplul de mai sus:
    *   `PRIMARY KEY` este folosit pentru a asigura unicitate pentru `ID` în ambele tabele (`Client` și `Comanda`).
    *   `FOREIGN KEY` este folosit pentru a lega `Comanda` de `Client`, asigurând că fiecare comandă are un client valid.
","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24']","Conform contextului furnizat, constrângerile de integritate se aplică în felul următor pentru a asigura securitatea și consistența datelor:

*   **PRIMARY KEY (Cheia primară):** Asigură că fiecare înregistrare dintr-un tabel este unică. Acest lucru previne duplicarea datelor și ajută la identificarea corectă a fiecărei înregistrări.

*   **FOREIGN KEY (Cheia străină):** Asigură că există o relație validă între două tabele. Aceasta înseamnă că o valoare dintr-o coloană a unui tabel (coloana cheie străină) trebuie să existe și într-o coloană a altui tabel (de obicei, cheia primară a acelui tabel). Acest lucru menține integritatea referențială a datelor.

*   **CHECK (Verificare):** Limitează valorile care pot fi introduse într-o coloană. De exemplu, se poate impune ca o adresă de e-mail să conțină caracterele ""@"" și ""."". Acest lucru ajută la menținerea acurateței și validității datelor.
    Un exemplu dat este: `ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%');`

Exemplu de utilizare a acestor constrângeri într-un sistem de gestionare a comenzilor:

```sql
CREATE TABLE Client (
    ID INT PRIMARY KEY,
    Nume VARCHAR(50),
    Email VARCHAR(50) UNIQUE
);

CREATE TABLE Comanda (
    ID INT PRIMARY KEY,
    ClientID INT,
    DataComanda DATE,
    FOREIGN KEY (ClientID) REFERENCES Client(ID)
);
```
În exemplul de mai sus:
    *   `PRIMARY KEY` este folosit pentru a asigura unicitate pentru `ID` în ambele tabele (`Client` și `Comanda`).
    *   `FOREIGN KEY` este folosit pentru a lega `Comanda` de `Client`, asigurând că fiecare comandă are un client valid.
","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",0.99999999995,0.5,0.8625737139115358,0.8571428571428571,0.028757116379452802,0.12413793103448274,0.67
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56']","Din contextul furnizat, pot extrage următoarele informații despre avantajele utilizării vederilor (views) și modul în care acestea simplifică interogările complexe:

*   **Crearea de interogări complexe:** Vederile pot fi definite folosind cereri SELECT complexe, inclusiv join-uri, grupuri sau alte subcereri.
*   Subcererea principală a vederii nu trebuie să conţina clauza ORDER BY. Aceasta se utilizează când se extrag date din vedere.

",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56']","Din contextul furnizat, pot extrage următoarele informații despre avantajele utilizării vederilor (views) și modul în care acestea simplifică interogările complexe:

*   **Crearea de interogări complexe:** Vederile pot fi definite folosind cereri SELECT complexe, inclusiv join-uri, grupuri sau alte subcereri.
*   Subcererea principală a vederii nu trebuie să conţina clauza ORDER BY. Aceasta se utilizează când se extrag date din vedere.

","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",0.0,0.0,0.8827103449640735,1.0,0.018361578353608805,0.11320754716981132,0.29
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7']","Secvențele contribuie la performanța bazelor de date prin generarea de numere de identificare unice (cum ar fi cheile primare) pentru tabele. Fără secvențe, aplicațiile ar trebui să calculeze aceste numere, ceea ce ar duce la probleme de sincronizare și ar necesita mai multe cereri la baza de date, încetinind astfel inserările și performanța generală.
",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7']","Secvențele contribuie la performanța bazelor de date prin generarea de numere de identificare unice (cum ar fi cheile primare) pentru tabele. Fără secvențe, aplicațiile ar trebui să calculeze aceste numere, ceea ce ar duce la probleme de sincronizare și ar necesita mai multe cereri la baza de date, încetinind astfel inserările și performanța generală.
","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",0.0,0.0,0.8425522002779017,0.7142857142857143,0.046574698071706964,0.18556701030927836,0.33
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date']","Conform informațiilor din context, Oracle oferă un grad sporit de securitate prin următoarele metode:

*   **Server de criptare:** Pentru a proteja datele.
*   **Control trafic rețea:** Pentru a gestiona accesul la baza de date.
*   **Niveluri de parolare:** Pentru autentificarea utilizatorilor și gestionarea accesului.
",Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date']","Conform informațiilor din context, Oracle oferă un grad sporit de securitate prin următoarele metode:

*   **Server de criptare:** Pentru a proteja datele.
*   **Control trafic rețea:** Pentru a gestiona accesul la baza de date.
*   **Niveluri de parolare:** Pentru autentificarea utilizatorilor și gestionarea accesului.
","Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",0.0,0.0,0.8383363325782449,1.0,0.009515179626547375,0.1176470588235294,0.0
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17']","Principalele diferențe dintre sistemele tradiționale de fișiere și bazele de date moderne sunt evidențiate prin limitările sistemelor tradiționale și avantajele pe care le oferă bazele de date:

**Sisteme Tradiționale de Fișiere (Limitări):**

1.  **Redundanță și inconsistență:** Aceleași date pot fi stocate în mai multe fișiere, ceea ce duce la inconsistențe și consum excesiv de spațiu.
2.  **Lipsa integrității:** Nu există mecanisme automate pentru a asigura corectitudinea și validitatea datelor.
3.  **Dificultăți în accesul la date:** Este necesară dezvoltarea de programe personalizate pentru fiecare tip de interogare.
4.  **Lipsa securității:** Nu există mecanisme eficiente pentru restricționarea accesului la date.
5.  **Dificultăți în partajarea datelor:** Accesul simultan la fișiere de către mai mulți utilizatori este dificil de gestionat.

**Baze de Date Moderne (Avantaje):**

1.  **Eliminarea redundanței:** Datele sunt normalizate și stocate într-un mod care minimizează duplicările.
2.  **Îmbunătățirea integrității:** Se definesc constrângeri care asigură coerența și validitatea datelor.
3.  **Acces flexibil la date:** Utilizatorii pot efectua interogări complexe folosind limbaje precum SQL.
4.  **Securitate sporită:** Se pot implementa niveluri diferite de acces pentru utilizatori.
5.  **Partajare eficientă a datelor:** Mai mulți utilizatori pot accesa simultan baza de date fără a afecta integritatea informațiilor.

Pe scurt, bazele de date moderne oferă o soluție centralizată, eficientă, sigură și flexibilă pentru gestionarea datelor, rezolvând problemele inerente ale sistemelor tradiționale de fișiere.
",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17']","Principalele diferențe dintre sistemele tradiționale de fișiere și bazele de date moderne sunt evidențiate prin limitările sistemelor tradiționale și avantajele pe care le oferă bazele de date:

**Sisteme Tradiționale de Fișiere (Limitări):**

1.  **Redundanță și inconsistență:** Aceleași date pot fi stocate în mai multe fișiere, ceea ce duce la inconsistențe și consum excesiv de spațiu.
2.  **Lipsa integrității:** Nu există mecanisme automate pentru a asigura corectitudinea și validitatea datelor.
3.  **Dificultăți în accesul la date:** Este necesară dezvoltarea de programe personalizate pentru fiecare tip de interogare.
4.  **Lipsa securității:** Nu există mecanisme eficiente pentru restricționarea accesului la date.
5.  **Dificultăți în partajarea datelor:** Accesul simultan la fișiere de către mai mulți utilizatori este dificil de gestionat.

**Baze de Date Moderne (Avantaje):**

1.  **Eliminarea redundanței:** Datele sunt normalizate și stocate într-un mod care minimizează duplicările.
2.  **Îmbunătățirea integrității:** Se definesc constrângeri care asigură coerența și validitatea datelor.
3.  **Acces flexibil la date:** Utilizatorii pot efectua interogări complexe folosind limbaje precum SQL.
4.  **Securitate sporită:** Se pot implementa niveluri diferite de acces pentru utilizatori.
5.  **Partajare eficientă a datelor:** Mai mulți utilizatori pot accesa simultan baza de date fără a afecta integritatea informațiilor.

Pe scurt, bazele de date moderne oferă o soluție centralizată, eficientă, sigură și flexibilă pentru gestionarea datelor, rezolvând problemele inerente ale sistemelor tradiționale de fișiere.
","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",0.999999999975,1.0,0.88046205617132,1.0,0.09276734202644997,0.132890365448505,0.4
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. Cheile primare identifică unic fiecare înregistrare (tuplu) dintr-un tabel, în timp ce cheile străine stabilesc relații între tabele, asigurând că datele referențiate există. SQL este limbajul standardizat de interogare folosit in modelul relational.
",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. Cheile primare identifică unic fiecare înregistrare (tuplu) dintr-un tabel, în timp ce cheile străine stabilesc relații între tabele, asigurând că datele referențiate există. SQL este limbajul standardizat de interogare folosit in modelul relational.
","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",0.99999999995,1.0,0.9426354863386562,0.8333333333333334,0.1004916995660316,0.19565217391304346,0.29
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50']","Conform informațiilor din context, o subinterogare corelată este utilizată pentru operații complexe de manipulare a datelor. Aceasta se execută o dată pentru fiecare linie considerată de interogarea principală și folosește o valoare dintr-o coloană din interogarea exterioară. Identificarea se face prin utilizarea unei coloane a interogării exterioare în clauza operatorului interogării interioare.
",Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50']","Conform informațiilor din context, o subinterogare corelată este utilizată pentru operații complexe de manipulare a datelor. Aceasta se execută o dată pentru fiecare linie considerată de interogarea principală și folosește o valoare dintr-o coloană din interogarea exterioară. Identificarea se face prin utilizarea unei coloane a interogării exterioare în clauza operatorului interogării interioare.
","Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",0.49999999995,0.0,0.8417142214268355,0.75,0.02719665272174911,0.1188118811881188,0.0
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22']","Îmi pare rău, dar informațiile furnizate nu conțin detalii despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate în bazele de date. Contextele oferite vorbesc despre securitatea bazelor de date în general, modelul de date orientat pe obiecte și restricții în alterarea secvențelor.
",Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22']","Îmi pare rău, dar informațiile furnizate nu conțin detalii despre utilizarea constrângerilor și vederilor pentru implementarea politicilor de securitate în bazele de date. Contextele oferite vorbesc despre securitatea bazelor de date în general, modelul de date orientat pe obiecte și restricții în alterarea secvențelor.
","Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",0.0,0.0,0.0,1.0,0.08010360497032464,0.1818181818181818,0.22
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform contextului furnizat, SQL este un limbaj utilizat pentru interogări (SELECT) și conține elemente precum ""Nume"". Contextul menționează ""cererea SQL SELECT"" și ""Elemente ale limbajului SQL"". De asemenea se face referire la funcții in SQL.
",Ce înseamnă SQL?,"['copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform contextului furnizat, SQL este un limbaj utilizat pentru interogări (SELECT) și conține elemente precum ""Nume"". Contextul menționează ""cererea SQL SELECT"" și ""Elemente ale limbajului SQL"". De asemenea se face referire la funcții in SQL.
",Structured Query Language,0.0,0.0,0.8329261654549484,1.0,0.0,0.0,0.0
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Deși contextul nu specifică exact ce instrucțiune SQL se folosește pentru extragerea datelor, el menționează că limbajul folosit pentru interogarea bazelor de date este SQL (Structured Query Language).
",Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Deși contextul nu specifică exact ce instrucțiune SQL se folosește pentru extragerea datelor, el menționează că limbajul folosit pentru interogarea bazelor de date este SQL (Structured Query Language).
",SELECT,0.0,0.0,0.0,1.0,0.0,0.0,0.0
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Deși contextul oferit menționează SQL (Structured Query Language) ca limbaj de interogare a bazelor de date, acesta nu specifică instrucțiunea exactă pentru actualizarea datelor.
",Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Deși contextul oferit menționează SQL (Structured Query Language) ca limbaj de interogare a bazelor de date, acesta nu specifică instrucțiunea exactă pentru actualizarea datelor.
",UPDATE,0.0,0.0,0.0,1.0,0.0,0.0,0.5
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Deși contextul furnizat descrie elemente ale limbajului SQL, cum ar fi nume de obiecte și operații SELECT, nu menționează în mod explicit instrucțiunea SQL utilizată pentru ștergerea datelor.
",Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Deși contextul furnizat descrie elemente ale limbajului SQL, cum ar fi nume de obiecte și operații SELECT, nu menționează în mod explicit instrucțiunea SQL utilizată pentru ștergerea datelor.
",DELETE,0.0,0.0,0.0,1.0,0.0,0.0,0.0
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Deși contextul furnizat descrie elemente ale limbajului SQL (cum ar fi numele obiectelor și faptul că SQL este un limbaj de interogare structurat), acesta nu menționează explicit instrucțiunea utilizată pentru inserarea datelor.
",Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Deși contextul furnizat descrie elemente ale limbajului SQL (cum ar fi numele obiectelor și faptul că SQL este un limbaj de interogare structurat), acesta nu menționează explicit instrucțiunea utilizată pentru inserarea datelor.
",INSERT INTO,0.0,0.0,0.0,1.0,0.0,0.0,0.4
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Deși informațiile furnizate nu conțin un exemplu exact pentru selectarea coloanei ""FirstName"" din tabelul ""Persons"", ele vorbesc despre interogări SQL. O interogare SELECT pe o singură tabelă se poate face. Totuși, nu este dat un răspuns clar și direct.
","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Deși informațiile furnizate nu conțin un exemplu exact pentru selectarea coloanei ""FirstName"" din tabelul ""Persons"", ele vorbesc despre interogări SQL. O interogare SELECT pe o singură tabelă se poate face. Totuși, nu este dat un răspuns clar și direct.
",SELECT FirstName FROM Persons,0.0,0.0,0.0,1.0,0.017911710595643587,0.0816326530612245,0.57
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","The provided context does not contain the necessary information to answer how to select all columns from a table in SQL. The text discusses SQL SELECT queries, functions, GROUP BY, and HAVING clauses, but it does not show the basic syntax for selecting all columns.
","Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","The provided context does not contain the necessary information to answer how to select all columns from a table in SQL. The text discusses SQL SELECT queries, functions, GROUP BY, and HAVING clauses, but it does not show the basic syntax for selecting all columns.
",SELECT * FROM Persons,0.0,0.0,0.0,1.0,0.0,0.08333333333333334,0.25
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","Deși informațiile furnizate nu oferă un exemplu direct pentru interogarea exactă, ele discută despre interogări SQL, funcții și clauza WHERE. Bazându-ne pe aceste informații și pe cunoștințele generale despre SQL, iată răspunsul:

Pentru a selecta toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"", se folosește următoarea comandă SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```

Această comandă selectează toate coloanele (`*`) din tabelul ""Persons"" unde clauza `WHERE` specifică faptul că ""FirstName"" trebuie să fie egal cu 'Peter'.
","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","Deși informațiile furnizate nu oferă un exemplu direct pentru interogarea exactă, ele discută despre interogări SQL, funcții și clauza WHERE. Bazându-ne pe aceste informații și pe cunoștințele generale despre SQL, iată răspunsul:

Pentru a selecta toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"", se folosește următoarea comandă SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```

Această comandă selectează toate coloanele (`*`) din tabelul ""Persons"" unde clauza `WHERE` specifică faptul că ""FirstName"" trebuie să fie egal cu 'Peter'.
",SELECT * FROM Persons WHERE FirstName='Peter',0.0,0.0,0.9101100741295326,0.14285714285714285,0.017272237992167868,0.12244897959183672,0.86
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43']","Deși informațiile furnizate în context nu oferă soluția directă, ele vorbesc despre interogări SQL și funcții pentru șiruri de caractere. Pe baza cunoștințelor generale despre SQL, iată cum ai selecta înregistrările unde ""FirstName"" începe cu ""a"":

```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

**Explicație:**

*   `SELECT *`: Selectează toate coloanele din tabel.
*   `FROM Persons`: Specifică tabelul din care se selectează datele.
*   `WHERE FirstName LIKE 'a%'`: Aceasta este condiția care filtrează rezultatele.
    *   `WHERE`: Clauza pentru a specifica o condiție.
    *   `FirstName`: Numele coloanei pe care se aplică condiția.
    *   `LIKE`: Operatorul folosit pentru potrivirea șabloanelor.
    *   `'a%'`: Șablonul.
        *   `a`: Caută valorile care încep cu litera ""a"".
        *   `%`: Un wildcard care reprezintă zero, unul sau mai multe caractere.

Această interogare va returna toate rândurile din tabelul ""Persons"" unde valoarea din coloana ""FirstName"" începe cu litera ""a"".
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43']","Deși informațiile furnizate în context nu oferă soluția directă, ele vorbesc despre interogări SQL și funcții pentru șiruri de caractere. Pe baza cunoștințelor generale despre SQL, iată cum ai selecta înregistrările unde ""FirstName"" începe cu ""a"":

```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

**Explicație:**

*   `SELECT *`: Selectează toate coloanele din tabel.
*   `FROM Persons`: Specifică tabelul din care se selectează datele.
*   `WHERE FirstName LIKE 'a%'`: Aceasta este condiția care filtrează rezultatele.
    *   `WHERE`: Clauza pentru a specifica o condiție.
    *   `FirstName`: Numele coloanei pe care se aplică condiția.
    *   `LIKE`: Operatorul folosit pentru potrivirea șabloanelor.
    *   `'a%'`: Șablonul.
        *   `a`: Caută valorile care încep cu litera ""a"".
        *   `%`: Un wildcard care reprezintă zero, unul sau mai multe caractere.

Această interogare va returna toate rândurile din tabelul ""Persons"" unde valoarea din coloana ""FirstName"" începe cu litera ""a"".
",SELECT * FROM Persons WHERE FirstName LIKE 'a%',0.0,0.0,0.8789024855353723,0.07142857142857142,0.0,0.09395973154362416,1.0
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68\n']","Informațiile din context nu conțin un răspuns la întrebare. Contextul furnizat se referă la instrucțiunea Merge, acordarea privilegiilor de obiect și clauza WHERE în baze de date.
",Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68\n']","Informațiile din context nu conțin un răspuns la întrebare. Contextul furnizat se referă la instrucțiunea Merge, acordarea privilegiilor de obiect și clauza WHERE în baze de date.
",Adevărat,0.0,0.0,0.0,0.75,0.0,0.0,0.4
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Deși informațiile furnizate nu oferă sintaxa exactă pentru a selecta înregistrări specifice bazate pe două condiții, ele vorbesc despre cereri SELECT și despre utilizarea clauzei WHERE. Pe baza cunoștințelor generale despre SQL, iată comanda corectă pentru a răspunde la întrebare:

```sql
SELECT * 
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Deși informațiile furnizate nu oferă sintaxa exactă pentru a selecta înregistrări specifice bazate pe două condiții, ele vorbesc despre cereri SELECT și despre utilizarea clauzei WHERE. Pe baza cunoștințelor generale despre SQL, iată comanda corectă pentru a răspunde la întrebare:

```sql
SELECT * 
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```
",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',0.0,0.0,0.8155434137678673,0.6666666666666666,0.016504045595709425,0.2727272727272727,0.8
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Din păcate, informația furnizată în context nu este relevantă pentru a răspunde la întrebarea despre selectarea înregistrărilor între două valori. Contextul se referă la funcții SQL, clauzele GROUP BY și HAVING, dar nu la operatorul sau clauza necesară.

Totusi eu stiu raspunsul:

Pentru a selecta toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv), poți folosi următoarea interogare SQL:

```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```

Se foloseste clauza `BETWEEN`.
","Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Din păcate, informația furnizată în context nu este relevantă pentru a răspunde la întrebarea despre selectarea înregistrărilor între două valori. Contextul se referă la funcții SQL, clauzele GROUP BY și HAVING, dar nu la operatorul sau clauza necesară.

Totusi eu stiu raspunsul:

Pentru a selecta toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv), poți folosi următoarea interogare SQL:

```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```

Se foloseste clauza `BETWEEN`.
",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',0.0,0.0,0.8712252140953947,0.5,0.0,0.1875,0.67
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50']","Îmi pare rău, dar informațiile furnizate nu conțin răspunsul la întrebarea ta. Contextul vorbește despre vizualizări, sinonime și ordinea de execuție a funcțiilor de grup, dar nu menționează instrucțiunea SQL utilizată pentru a returna doar valori diferite.
",Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50']","Îmi pare rău, dar informațiile furnizate nu conțin răspunsul la întrebarea ta. Contextul vorbește despre vizualizări, sinonime și ordinea de execuție a funcțiilor de grup, dar nu menționează instrucțiunea SQL utilizată pentru a returna doar valori diferite.
",SELECT DISTINCT,0.0,0.0,0.0,1.0,0.0,0.0,0.0
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Îmi pare rău, dar informațiile furnizate nu conțin cuvântul cheie SQL utilizat pentru sortarea setului de rezultate.
",Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Îmi pare rău, dar informațiile furnizate nu conțin cuvântul cheie SQL utilizat pentru sortarea setului de rezultate.
",ORDER BY,0.0,0.0,0.0,1.0,0.0,0.0,0.0
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69']","Conform contextului furnizat, informația relevantă pentru a răspunde întrebării se găsește la punctul 3.4. Clauza ORDER BY. Pentru a returna toate înregistrările dintr-un tabel ""Persons"" sortate descrescător după ""FirstName"", poți folosi următoarea interogare SQL:

```sql
SELECT * FROM Persons ORDER BY FirstName DESC;
```
`ORDER BY` este clauza care realizeaza sortarea, `FirstName` coloana dupa care se face sortarea si `DESC` asigura sortarea in ordine descrescatoare.
","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69']","Conform contextului furnizat, informația relevantă pentru a răspunde întrebării se găsește la punctul 3.4. Clauza ORDER BY. Pentru a returna toate înregistrările dintr-un tabel ""Persons"" sortate descrescător după ""FirstName"", poți folosi următoarea interogare SQL:

```sql
SELECT * FROM Persons ORDER BY FirstName DESC;
```
`ORDER BY` este clauza care realizeaza sortarea, `FirstName` coloana dupa care se face sortarea si `DESC` asigura sortarea in ordine descrescatoare.
",SELECT * FROM Persons ORDER BY FirstName DESC,0.0,0.0,0.8850967082272393,0.2,0.0,0.17283950617283952,0.83
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Informațiile furnizate în context nu conțin instrucțiuni despre cum se inserează o înregistrare nouă într-un tabel SQL. Contextul se referă la interogări SELECT, funcții și clauze precum GROUP BY și HAVING. Nu există informații despre instrucțiunea INSERT.
","Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Informațiile furnizate în context nu conțin instrucțiuni despre cum se inserează o înregistrare nouă într-un tabel SQL. Contextul se referă la interogări SELECT, funcții și clauze precum GROUP BY și HAVING. Nu există informații despre instrucțiunea INSERT.
","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",0.0,0.0,0.0,1.0,0.0,0.0392156862745098,0.0
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere""]","Deși Contextul furnizat conține informații despre limbajul SQL, cum ar fi funcții și clauze (WHERE, GROUP BY, HAVING), nu oferă detalii despre cum se inserează date. Prin urmare, nu pot răspunde la întrebarea specifică despre inserarea ""Olsen"" ca ""LastName"" în tabelul ""Persons"". Contextul se focuseaza pe cereri SELECT.
","Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere""]","Deși Contextul furnizat conține informații despre limbajul SQL, cum ar fi funcții și clauze (WHERE, GROUP BY, HAVING), nu oferă detalii despre cum se inserează date. Prin urmare, nu pot răspunde la întrebarea specifică despre inserarea ""Olsen"" ca ""LastName"" în tabelul ""Persons"". Contextul se focuseaza pe cereri SELECT.
",INSERT INTO Persons (LastName) VALUES ('Olsen'),0.0,0.0,0.0,1.0,0.013794462224541233,0.03389830508474576,0.18
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10']","Nu există informații în contextul furnizat despre cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"". Contextul se referă la clauza WHERE, adăugarea unei noi înregistrări și comanda DESCRIBE.
","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10']","Nu există informații în contextul furnizat despre cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"". Contextul se referă la clauza WHERE, adăugarea unei noi înregistrări și comanda DESCRIBE.
",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',0.0,0.0,0.0,1.0,0.01588011771404737,0.0909090909090909,0.33
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","Deși contextul furnizat nu include informația exactă despre ștergerea înregistrărilor, pot deduce răspunsul bazat pe cunoștințele generale despre SQL și structura uzuală a comenzilor SQL.

Pentru a șterge înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter"", se folosește următoarea comandă SQL:

```sql
DELETE FROM Persons
WHERE FirstName = 'Peter';
```
","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","Deși contextul furnizat nu include informația exactă despre ștergerea înregistrărilor, pot deduce răspunsul bazat pe cunoștințele generale despre SQL și structura uzuală a comenzilor SQL.

Pentru a șterge înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter"", se folosește următoarea comandă SQL:

```sql
DELETE FROM Persons
WHERE FirstName = 'Peter';
```
",DELETE FROM Persons WHERE FirstName = 'Peter',0.0,0.0,0.876502349300786,0.3333333333333333,0.08347864048201649,0.1904761904761905,0.5
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Deși contextul furnizat descrie structura unei lecții SQL despre funcții și clauzele `GROUP BY` și `HAVING`, nu oferă informații specifice despre cum să se numere înregistrările dintr-un tabel. Prin urmare, nu pot răspunde la întrebare folosind *doar* contextul dat.
","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Deși contextul furnizat descrie structura unei lecții SQL despre funcții și clauzele `GROUP BY` și `HAVING`, nu oferă informații specifice despre cum să se numere înregistrările dintr-un tabel. Prin urmare, nu pot răspunde la întrebare folosind *doar* contextul dat.
",SELECT COUNT(*) FROM Persons,0.0,0.0,0.0,0.6666666666666666,0.0,0.0,0.0
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)']","Informațiile furnizate nu conțin detalii despre tipurile de join, deci nu pot răspunde la întrebarea ""Care este cel mai cunoscut tip de join?"".
",Care este cel mai cunoscut tip de join?,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)']","Informațiile furnizate nu conțin detalii despre tipurile de join, deci nu pot răspunde la întrebarea ""Care este cel mai cunoscut tip de join?"".
",INNER JOIN,0.0,0.0,0.0,1.0,0.0,0.07142857142857144,0.8
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43']","Operatorul folosit pentru a selecta valori dintr-un interval este ""BETWEEN...AND..."". Acesta compară o valoare cu un interval definit de două valori (inclusiv).
",Ce operator este folosit pentru a selecta valori dintr-un interval?,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43']","Operatorul folosit pentru a selecta valori dintr-un interval este ""BETWEEN...AND..."". Acesta compară o valoare cu un interval definit de două valori (inclusiv).
",BETWEEN,0.8666666666377778,1.0,0.8898804149195035,1.0,0.020244462660665506,0.07999999999999999,0.0
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Conform contextului, constrângerea NOT NULL asigură faptul că o coloană să nu conţină valoarea nulă. Aceasta poate fi specificată doar la nivel de coloană, nu și la nivel de tabelă.
",Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Conform contextului, constrângerea NOT NULL asigură faptul că o coloană să nu conţină valoarea nulă. Aceasta poate fi specificată doar la nivel de coloană, nu și la nivel de tabelă.
",Adevărat,0.99999999995,1.0,0.843391059865878,1.0,0.0,0.0,0.0
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14']","Informațiile furnizate nu conțin un răspuns la întrebarea despre operatorul folosit pentru a căuta un model specificat într-o coloană. Textul vorbește despre subcereri corelate, vederi și adăugarea unei înregistrări.
",Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14']","Informațiile furnizate nu conțin un răspuns la întrebarea despre operatorul folosit pentru a căuta un model specificat într-o coloană. Textul vorbește despre subcereri corelate, vederi și adăugarea unei înregistrări.
",LIKE,0.0,0.0,0.0,1.0,0.0,0.0,0.0
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15']","Din păcate, contextul furnizat nu conține informații despre instrucțiunea SQL specifică pentru crearea unui tabel. Prin urmare, nu pot răspunde la întrebarea ""Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?"" folosind doar informațiile date.
","Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15']","Din păcate, contextul furnizat nu conține informații despre instrucțiunea SQL specifică pentru crearea unui tabel. Prin urmare, nu pot răspunde la întrebarea ""Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?"" folosind doar informațiile date.
",CREATE TABLE Customers,0.0,0.0,0.0,1.0,0.0,0.03846153846153846,0.8
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47\n']","Informațiile furnizate nu conțin interogarea care actualizează salariul tuturor angajaților. Exemplele oferite prezintă interogări de selecție (SELECT), nu de actualizare (UPDATE). De asemenea, nu se mentionează nimic despre departamentul 10 or mărirea salariului cu 10% din media companiei.
",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47\n']","Informațiile furnizate nu conțin interogarea care actualizează salariul tuturor angajaților. Exemplele oferite prezintă interogări de selecție (SELECT), nu de actualizare (UPDATE). De asemenea, nu se mentionează nimic despre departamentul 10 or mărirea salariului cu 10% din media companiei.
",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,0.0,0.0,0.0,1.0,0.0,0.10169491525423728,0.33
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83']","Îmi pare rău, dar informațiile furnizate nu conțin interogarea care șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate. Informațiile furnizate conțin exemple de interogări `SELECT` și exerciții, dar nu și interogarea specificată în întrebare.
",Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83']","Îmi pare rău, dar informațiile furnizate nu conțin interogarea care șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate. Informațiile furnizate conțin exemple de interogări `SELECT` și exerciții, dar nu și interogarea specificată în întrebare.
",DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,0.0,0.0,0.0,1.0,0.0,0.027777777777777776,0.29
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47']","Deși contextul furnizat conține exemple de interogări SQL, nu oferă o soluție directă pentru actualizarea salariilor. Totuși, pot construi interogarea cerută bazându-mă pe structura generală a interogărilor SQL și pe cerința specifică.

Iată interogarea SQL care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său:

```sql
UPDATE EMP
SET sal = sal + (
    SELECT 0.05 * AVG(sal)
    FROM EMP
    WHERE deptno = 30
)
WHERE deptno = 30;

```

**Explicație:**

*   **`UPDATE EMP`**: Aceasta indică faptul că vom actualiza tabela `EMP` (tabela angajaților).
*   **`SET sal = sal + (...)`**: Aceasta setează noul salariu (`sal`) ca fiind salariul vechi plus o valoare calculată.
*   **`(SELECT 0.05 * AVG(sal) FROM EMP WHERE deptno = 30)`**: Aceasta este o subinterogare care calculează 5% (0.05) din salariul mediu (`AVG(sal)`) al angajaților din departamentul 30 (`WHERE deptno = 30`).
*   **`WHERE deptno = 30`**: Această clauză finală se asigură că actualizarea se aplică doar angajaților din departamentul 30.

Această interogare va calcula mai întâi salariul mediu pentru departamentul 30, apoi va calcula 5% din acea medie, și în final va adăuga acea valoare la salariul fiecărui angajat din departamentul 30.
","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47']","Deși contextul furnizat conține exemple de interogări SQL, nu oferă o soluție directă pentru actualizarea salariilor. Totuși, pot construi interogarea cerută bazându-mă pe structura generală a interogărilor SQL și pe cerința specifică.

Iată interogarea SQL care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său:

```sql
UPDATE EMP
SET sal = sal + (
    SELECT 0.05 * AVG(sal)
    FROM EMP
    WHERE deptno = 30
)
WHERE deptno = 30;

```

**Explicație:**

*   **`UPDATE EMP`**: Aceasta indică faptul că vom actualiza tabela `EMP` (tabela angajaților).
*   **`SET sal = sal + (...)`**: Aceasta setează noul salariu (`sal`) ca fiind salariul vechi plus o valoare calculată.
*   **`(SELECT 0.05 * AVG(sal) FROM EMP WHERE deptno = 30)`**: Aceasta este o subinterogare care calculează 5% (0.05) din salariul mediu (`AVG(sal)`) al angajaților din departamentul 30 (`WHERE deptno = 30`).
*   **`WHERE deptno = 30`**: Această clauză finală se asigură că actualizarea se aplică doar angajaților din departamentul 30.

Această interogare va calcula mai întâi salariul mediu pentru departamentul 30, apoi va calcula 5% din acea medie, și în final va adăuga acea valoare la salariul fiecărui angajat din departamentul 30.
","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",0.0,0.0,0.8358612821490717,0.18181818181818182,0.0,0.1643835616438356,0.84
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34\n']","Nu există suficiente informații în contextul furnizat pentru a scrie interogarea solicitată. Contextul conține doar fragmente de text despre clauza WHERE și exerciții, dar nu oferă detalii despre structura bazei de date (tabele, coloane, tipuri de date) sau despre limbajul SQL specific utilizat. 

Pentru a scrie interogarea, am avea nevoie de:

*   **Numele tabelului** care conține informații despre angajați.
*   **Numele coloanei** care conține funcția (JOB) angajatului.
*   **Numele coloanei** care conține data angajării.
*   **Tipul de date stocate in coloana cu data angajarii.** (Pentru a stii cum se compara cu anul 2000)
* **Dialectul SQL** Este necesar un dialect, de exemplu, MySQL, PostgreSQL, SQL Server, Oracle etc, au sintaxe usor diferite.

Cu aceste informații, o interogare (într-un SQL generic) ar putea arăta similar cu:

```sql
UPDATE NumeTabel
SET NumeColoanaFunctie = 'SENIOR'
WHERE NumeColoanaDataAngajarii < '2000-01-01'; -- Presupunand un format YYYY-MM-DD
```
(sau o varianta cu o functie specifica dialectului pentru a extrage anul, in loc de comparatie directa cu un string.)

Fara detalii, nu se poate scrie interogarea.
",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34\n']","Nu există suficiente informații în contextul furnizat pentru a scrie interogarea solicitată. Contextul conține doar fragmente de text despre clauza WHERE și exerciții, dar nu oferă detalii despre structura bazei de date (tabele, coloane, tipuri de date) sau despre limbajul SQL specific utilizat. 

Pentru a scrie interogarea, am avea nevoie de:

*   **Numele tabelului** care conține informații despre angajați.
*   **Numele coloanei** care conține funcția (JOB) angajatului.
*   **Numele coloanei** care conține data angajării.
*   **Tipul de date stocate in coloana cu data angajarii.** (Pentru a stii cum se compara cu anul 2000)
* **Dialectul SQL** Este necesar un dialect, de exemplu, MySQL, PostgreSQL, SQL Server, Oracle etc, au sintaxe usor diferite.

Cu aceste informații, o interogare (într-un SQL generic) ar putea arăta similar cu:

```sql
UPDATE NumeTabel
SET NumeColoanaFunctie = 'SENIOR'
WHERE NumeColoanaDataAngajarii < '2000-01-01'; -- Presupunand un format YYYY-MM-DD
```
(sau o varianta cu o functie specifica dialectului pentru a extrage anul, in loc de comparatie directa cu un string.)

Fara detalii, nu se poate scrie interogarea.
","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",0.0,0.0,0.0,0.8333333333333334,0.0,0.05319148936170213,0.7
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22\n']","Informațiile furnizate nu conțin detalii despre vremea în Galați.
",Cum e vremea la galati ?,"['copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22\n']","Informațiile furnizate nu conțin detalii despre vremea în Galați.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.0,1.0,0.04196114906296548,0.28571428571428575,1.0
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25']","Informațiile furnizate nu conțin răspunsul la întrebarea despre câți ani a trăit Michael Jackson.
",Cati ani a trait Michael Jackson ?,"['copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25']","Informațiile furnizate nu conțin răspunsul la întrebarea despre câți ani a trăit Michael Jackson.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.02627961710408444,0.21428571428571427,1.0
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5']","Pe baza informațiilor furnizate în context, nu pot determina ce este o carte. Contextul se referă la baze de date, cereri Top N, secvențe, indecși și sinonime. Nu există nicio informație despre cărți.
",Ce o carte ?,"['copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5']","Pe baza informațiilor furnizate în context, nu pot determina ce este o carte. Contextul se referă la baze de date, cereri Top N, secvențe, indecși și sinonime. Nu există nicio informație despre cărți.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.08333333333333333,0.67
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","The provided context does not contain information about ""Cat face"" or the equation ""2 + 2"". Therefore, I cannot answer the prompt.
",Cat face 2 + 2 ?,"['copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","The provided context does not contain information about ""Cat face"" or the equation ""2 + 2"". Therefore, I cannot answer the prompt.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.6666666666666666,0.0,0.0,1.0
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n']","Din contextul furnizat, nu există informații specifice care să compare direct bazele de date distribuite și bazele de date NoSQL. Totuși, putem deduce următoarele, bazându-ne pe caracteristicile fiecărui tip:

*   **Baze de date distribuite:** Datele și sistemul de gestiune sunt distribuite pe mai multe calculatoare interconectate. (Menționat în al treilea fragment de context)
*   **Baze de date NoSQL:** Sunt concepute pentru a gestiona volume mari de date (Big Data), date nestructurate sau semi-structurate, și pentru a oferi scalabilitate orizontală și flexibilitate. (Menționat în primele două fragmente de context).

Bazele de date NoSQL pot fi folosite în cadrul sistemelor de baze de date distribuite, ele putand gestiona volume mari de date prin distribuire pe mai multe servere.
",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n']","Din contextul furnizat, nu există informații specifice care să compare direct bazele de date distribuite și bazele de date NoSQL. Totuși, putem deduce următoarele, bazându-ne pe caracteristicile fiecărui tip:

*   **Baze de date distribuite:** Datele și sistemul de gestiune sunt distribuite pe mai multe calculatoare interconectate. (Menționat în al treilea fragment de context)
*   **Baze de date NoSQL:** Sunt concepute pentru a gestiona volume mari de date (Big Data), date nestructurate sau semi-structurate, și pentru a oferi scalabilitate orizontală și flexibilitate. (Menționat în primele două fragmente de context).

Bazele de date NoSQL pot fi folosite în cadrul sistemelor de baze de date distribuite, ele putand gestiona volume mari de date prin distribuire pe mai multe servere.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.0,0.8333333333333334,0.0,0.015151515151515154,0.0
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Un avantaj major al bazelor de date NoSQL față de bazele de date distribuite tradiționale este scalabilitatea orizontală. Bazele de date NoSQL pot gestiona volume mari de date prin distribuirea acestora pe mai multe servere. De asemenea, bazele de date NoSQL oferă flexibilitate, deoarece nu impun o schemă strictă a datelor, permițând schimbări rapide, și performanță ridicată, adaptându-se la cerințele aplicațiilor moderne unde latența redusă este esențială.
",Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Un avantaj major al bazelor de date NoSQL față de bazele de date distribuite tradiționale este scalabilitatea orizontală. Bazele de date NoSQL pot gestiona volume mari de date prin distribuirea acestora pe mai multe servere. De asemenea, bazele de date NoSQL oferă flexibilitate, deoarece nu impun o schemă strictă a datelor, permițând schimbări rapide, și performanță ridicată, adaptându-se la cerințele aplicațiilor moderne unde latența redusă este esențială.
",Nu am gasit informatii in curs despre intrebarea ta,0.4166666666458333,1.0,0.8699614953334098,0.8333333333333334,0.0,0.023529411764705882,0.0
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Bazele de date distribuite nu sunt menționate în mod explicit în contextul furnizat, contextul se concentrează pe bazele de date relaționale și NoSQL. Cu toate acestea, putem deduce din context, in urmatoarele situatii, putem avea o baza de date distribuita:
* **Aplicații distribuite:** DynamoDB, CouchDB
* **Big Data:** MongoDB, Cassandra
* **Scalabilitate orizontală:** Pot gestiona volume mari de date prin distribuire pe mai multe servere
",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Bazele de date distribuite nu sunt menționate în mod explicit în contextul furnizat, contextul se concentrează pe bazele de date relaționale și NoSQL. Cu toate acestea, putem deduce din context, in urmatoarele situatii, putem avea o baza de date distribuita:
* **Aplicații distribuite:** DynamoDB, CouchDB
* **Big Data:** MongoDB, Cassandra
* **Scalabilitate orizontală:** Pot gestiona volume mari de date prin distribuire pe mai multe servere
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.8021889849404816,1.0,0.0,0.05405405405405406,0.33
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit, conform contextului furnizat, sunt:

*   **Lipsa unui standard unificat:** Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce poate complica utilizarea și migrarea între diferite sisteme.
*   **Consistența datelor:** Majoritatea bazelor de date NoSQL sacrifică consistența datelor în favoarea disponibilității și performanței, urmând modelul CAP. Acest lucru poate duce la probleme de consistență a datelor în anumite scenarii.
*    **Lipsa standardizării interogărilor**:
* Unele implementări nu oferă suport pentru tranzacții complexe
",Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit, conform contextului furnizat, sunt:

*   **Lipsa unui standard unificat:** Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce poate complica utilizarea și migrarea între diferite sisteme.
*   **Consistența datelor:** Majoritatea bazelor de date NoSQL sacrifică consistența datelor în favoarea disponibilității și performanței, urmând modelul CAP. Acest lucru poate duce la probleme de consistență a datelor în anumite scenarii.
*    **Lipsa standardizării interogărilor**:
* Unele implementări nu oferă suport pentru tranzacții complexe
",Nu am gasit informatii in curs despre intrebarea ta,0.99999999995,1.0,0.9646674240673434,0.5714285714285714,0.0,0.0196078431372549,0.0
