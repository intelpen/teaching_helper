,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]","Conform informațiilor din context, modelul de organizare a datelor prezentat ca predominant în curs este **modelul relațional**. 

Acest lucru este evident deoarece majoritatea fragmentelor de text se concentrează pe descrierea modelului relațional, inclusiv:

* Reprezentarea bazei de date sub formă de tabele.
* Legătura directă cu conceptul matematic de relație.
* Prezentarea componentelor sale: structurală, de integritate și de manipulare.
* Definirea algebrei relaționale și a operațiilor sale.

Deși este menționat și **modelul ierarhic**, acesta este prezentat doar ca o alternativă istorică, fiind primul model folosit pentru dezvoltarea bazelor de date,  iar accentul cade pe modelul relațional. 
","În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]","Conform informațiilor din context, modelul de organizare a datelor prezentat ca predominant în curs este **modelul relațional**. 

Acest lucru este evident deoarece majoritatea fragmentelor de text se concentrează pe descrierea modelului relațional, inclusiv:

* Reprezentarea bazei de date sub formă de tabele.
* Legătura directă cu conceptul matematic de relație.
* Prezentarea componentelor sale: structurală, de integritate și de manipulare.
* Definirea algebrei relaționale și a operațiilor sale.

Deși este menționat și **modelul ierarhic**, acesta este prezentat doar ca o alternativă istorică, fiind primul model folosit pentru dezvoltarea bazelor de date,  iar accentul cade pe modelul relațional. 
",relațional,0.8592592592449382,1.0,0.9179594581672648,1.0,0.017272237992167868,0.03809523809523809,0.0
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']","Limbajul integrat în Oracle pentru scrierea procedurilor stocate este **PL/SQL** (Procedural Language/Structured Query Language). 
",Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']","Limbajul integrat în Oracle pentru scrierea procedurilor stocate este **PL/SQL** (Procedural Language/Structured Query Language). 
",PL/SQL,0.8592592592449382,1.0,0.8864953791094144,0.0,0.058564582332753704,0.2222222222222222,0.0
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']","Rândurile dintr-o interogare SQL se filtrează folosind clauza **WHERE**. 

Deși textul oferit nu menționează explicit clauza WHERE, el descrie ""subinterogări"" care sunt incluse în alte clauze SQL. O subinterogare poate fi utilizată în cadrul clauzei WHERE pentru a filtra rândurile în funcție de rezultatele subinterogării. 

Pe scurt, clauza WHERE este cea care definește condițiile pe care trebuie să le îndeplinească rândurile pentru a fi incluse în rezultatul final al interogării. 
",Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']","Rândurile dintr-o interogare SQL se filtrează folosind clauza **WHERE**. 

Deși textul oferit nu menționează explicit clauza WHERE, el descrie ""subinterogări"" care sunt incluse în alte clauze SQL. O subinterogare poate fi utilizată în cadrul clauzei WHERE pentru a filtra rândurile în funcție de rezultatele subinterogării. 

Pe scurt, clauza WHERE este cea care definește condițiile pe care trebuie să le îndeplinească rândurile pentru a fi incluse în rezultatul final al interogării. 
",WHERE,0.999999999975,1.0,0.9581108223288579,0.8,0.030890553181566974,0.024096385542168676,0.0
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']","Deși textul menționează că funcțiile SQL pot fi folosite pentru ""a schimba formatul datelor"", acesta nu oferă exemple concrete și nu numește funcția specifică pentru transformarea șirurilor de caractere în majuscule. 

Pentru a răspunde la întrebarea ta, în SQL se folosește funcția **UPPER()** pentru a converti șirurile de caractere în majuscule. 
",Ce funcție SQL transformă șirurile de caractere în majuscule?,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']","Deși textul menționează că funcțiile SQL pot fi folosite pentru ""a schimba formatul datelor"", acesta nu oferă exemple concrete și nu numește funcția specifică pentru transformarea șirurilor de caractere în majuscule. 

Pentru a răspunde la întrebarea ta, în SQL se folosește funcția **UPPER()** pentru a converti șirurile de caractere în majuscule. 
",UPPER,0.0,0.0,0.8663163526384193,0.75,0.0,0.03333333333333333,0.0
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']","Înregistrările se grupează folosind clauza **GROUP BY** pentru a calcula valori agregate folosind funcțiile de grup. 
",Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']","Înregistrările se grupează folosind clauza **GROUP BY** pentru a calcula valori agregate folosind funcțiile de grup. 
",GROUP BY,0.999999999975,1.0,0.9559087302252266,1.0,0.03829206138020502,0.19999999999999998,0.5
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']","Informatiile relevante pentru a raspunde la intrebare nu se afla in context. 

Totusi, subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE se numeste **subinterogare scalara** (scalar subquery). 
",Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']","Informatiile relevante pentru a raspunde la intrebare nu se afla in context. 

Totusi, subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE se numeste **subinterogare scalara** (scalar subquery). 
",subinterogare single-row,0.0,0.0,0.0,0.0,0.0,0.05714285714285714,0.0
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']","Instrucțiunea SQL care permite inserarea sau actualizarea condiționată a datelor este **MERGE**. 
",Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']","Instrucțiunea SQL care permite inserarea sau actualizarea condiționată a datelor este **MERGE**. 
",MERGE,0.999999999975,1.0,0.8896966204270426,1.0,0.024455939372403628,0.13333333333333333,1.0
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**. 

Deși textul oferit menționează că o constrângere UNIQUE permite valori NULL **numai dacă** constrângerea NOT NULL nu este definită, aceasta nu este o definiție a constrângerii care **impune** neacceptarea valorilor NULL. Textul doar descrie comportamentul implicit al UNIQUE în  contextul valorilor NULL. 
",Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**. 

Deși textul oferit menționează că o constrângere UNIQUE permite valori NULL **numai dacă** constrângerea NOT NULL nu este definită, aceasta nu este o definiție a constrângerii care **impune** neacceptarea valorilor NULL. Textul doar descrie comportamentul implicit al UNIQUE în  contextul valorilor NULL. 
",NOT NULL,0.0,1.0,0.8387917248399374,1.0,0.040488925321331026,0.06060606060606061,0.4
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Informațiile din context nu oferă sintaxa concretă pentru crearea unei vederi în SQL. Totuși, contextul menționează ""Vederi (Views)"" și ""Limbajul SQL"" ceea ce sugerează că informația despre crearea vederilor ar putea fi găsită într-un curs despre limbajul SQL.

Sintaxa generală pentru crearea unei vederi în SQL este:

```sql
CREATE VIEW nume_vedere AS
SELECT coloana1, coloana2, ...
FROM nume_tabel
WHERE conditie;
```

Unde:

* **CREATE VIEW** este comanda SQL pentru crearea unei vederi.
* **nume_vedere** este numele pe care vrei să îl dai vederii.
* **SELECT coloana1, coloana2, ...** specifică coloanele pe care vrei să le incluzi în vedere.
* **FROM nume_tabel** specifică tabelul din care vrei să extragi datele.
* **WHERE conditie** este o clauză opțională care permite filtrarea datelor incluse în vedere.
 
 De exemplu, pentru a crea o vedere numită ""angajati_activi"" care să conțină numele și prenumele angajaților activi dintr-un tabel numit ""angajati"", am folosi următoarea comandă SQL:

```sql
CREATE VIEW angajati_activi AS
SELECT nume, prenume
FROM angajati
WHERE activ = 1;
```
","Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Informațiile din context nu oferă sintaxa concretă pentru crearea unei vederi în SQL. Totuși, contextul menționează ""Vederi (Views)"" și ""Limbajul SQL"" ceea ce sugerează că informația despre crearea vederilor ar putea fi găsită într-un curs despre limbajul SQL.

Sintaxa generală pentru crearea unei vederi în SQL este:

```sql
CREATE VIEW nume_vedere AS
SELECT coloana1, coloana2, ...
FROM nume_tabel
WHERE conditie;
```

Unde:

* **CREATE VIEW** este comanda SQL pentru crearea unei vederi.
* **nume_vedere** este numele pe care vrei să îl dai vederii.
* **SELECT coloana1, coloana2, ...** specifică coloanele pe care vrei să le incluzi în vedere.
* **FROM nume_tabel** specifică tabelul din care vrei să extragi datele.
* **WHERE conditie** este o clauză opțională care permite filtrarea datelor incluse în vedere.
 
 De exemplu, pentru a crea o vedere numită ""angajati_activi"" care să conțină numele și prenumele angajaților activi dintr-un tabel numit ""angajati"", am folosi următoarea comandă SQL:

```sql
CREATE VIEW angajati_activi AS
SELECT nume, prenume
FROM angajati
WHERE activ = 1;
```
",CREATE VIEW,0.0,0.0,0.8463828031600218,0.3,0.0,0.023121387283236997,0.36
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']","Informațiile din context nu oferă un răspuns la întrebarea ta. Contextul se concentrează pe indexi și funcția CONCAT în SQL, nu pe obiectul SQL folosit pentru generarea de valori unice pentru identificatori. 

Obiectul SQL pe care îl cauți este **secvența** (**sequence** în limba engleză). 

O secvență este un obiect din baza de date care generează o secvență de numere unice. Aceste numere sunt adesea folosite ca identificatori unici (chei primare) pentru tabelele din baza de date. 
","Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']","Informațiile din context nu oferă un răspuns la întrebarea ta. Contextul se concentrează pe indexi și funcția CONCAT în SQL, nu pe obiectul SQL folosit pentru generarea de valori unice pentru identificatori. 

Obiectul SQL pe care îl cauți este **secvența** (**sequence** în limba engleză). 

O secvență este un obiect din baza de date care generează o secvență de numere unice. Aceste numere sunt adesea folosite ca identificatori unici (chei primare) pentru tabelele din baza de date. 
",SEQUENCE,0.0,0.0,0.8806226772093989,0.2857142857142857,0.0,0.024390243902439022,0.67
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']","Informațiile furnizate în context nu conțin sintaxa specifică SQL pentru crearea unui nou utilizator în Oracle. 

Totuși, contextul menționează că securitatea bazei de date Oracle permite ""Controlul accesului la baza de date"" și ""Acordarea accesului la obiecte specifice din baza de date"". 

Pentru a crea un nou utilizator și a-i acorda privilegii în Oracle, se folosește de obicei instrucțiunea `CREATE USER`  împreună cu  `GRANT`. 

**Exemplu:**

```sql
CREATE USER nume_utilizator IDENTIFIED BY parola;
GRANT connect TO nume_utilizator; 
```

Este important de reținut că politicile specifice de control al accesului pot varia în funcție de implementarea Oracle.  Recomand consultarea documentației oficiale Oracle pentru informații complete despre crearea utilizatorilor și gestionarea privilegiilor conform politicilor specifice. 
","Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']","Informațiile furnizate în context nu conțin sintaxa specifică SQL pentru crearea unui nou utilizator în Oracle. 

Totuși, contextul menționează că securitatea bazei de date Oracle permite ""Controlul accesului la baza de date"" și ""Acordarea accesului la obiecte specifice din baza de date"". 

Pentru a crea un nou utilizator și a-i acorda privilegii în Oracle, se folosește de obicei instrucțiunea `CREATE USER`  împreună cu  `GRANT`. 

**Exemplu:**

```sql
CREATE USER nume_utilizator IDENTIFIED BY parola;
GRANT connect TO nume_utilizator; 
```

Este important de reținut că politicile specifice de control al accesului pot varia în funcție de implementarea Oracle.  Recomand consultarea documentației oficiale Oracle pentru informații complete despre crearea utilizatorilor și gestionarea privilegiilor conform politicilor specifice. 
",CREATE USER,0.0,0.0,0.8482294260443138,0.375,0.0,0.031746031746031744,0.29
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Modelul descris în întrebare, care organizează datele în tabele interconectate, se numește **modelul relațional de baze de date**. 

Informația este preluată din context, în special din secțiunea ""Definiția modelului relațional"": ""Modelul relațional este o abordare a organizării datelor bazată pe **tabele** (relații), unde fiecare tabel conține un set de atribute și tuple (înregistrări). **Relațiile dintre tabele** sunt definite prin chei primare și chei străine, asigurând integritatea datelor."" 
","Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Modelul descris în întrebare, care organizează datele în tabele interconectate, se numește **modelul relațional de baze de date**. 

Informația este preluată din context, în special din secțiunea ""Definiția modelului relațional"": ""Modelul relațional este o abordare a organizării datelor bazată pe **tabele** (relații), unde fiecare tabel conține un set de atribute și tuple (înregistrări). **Relațiile dintre tabele** sunt definite prin chei primare și chei străine, asigurând integritatea datelor."" 
",relațional,0.9999999999875,1.0,0.8607985865894224,1.0,0.015732934811145335,0.048192771084337345,0.0
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Cuvântul cheie SQL folosit pentru a defini o cheie primară este **PRIMARY KEY**. 
",Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Cuvântul cheie SQL folosit pentru a defini o cheie primară este **PRIMARY KEY**. 
",PRIMARY KEY,0.8687074829807873,1.0,0.8559814509949555,0.0,0.04573913556123801,0.25,1.0
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Etapa din proiectarea bazelor de date relaționale care transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei, este **modelarea logică**. 

Aceasta este etapa a treia, menționată în context în cadrul ""Etapelor proiectării bazelor de date"".
","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Etapa din proiectarea bazelor de date relaționale care transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei, este **modelarea logică**. 

Aceasta este etapa a treia, menționată în context în cadrul ""Etapelor proiectării bazelor de date"".
",modelarea logică,0.999999999975,1.0,0.8850936117238518,0.6666666666666666,0.025734261919218328,0.08695652173913045,0.0
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']","Conform cursului, o bază de date este reprezentată cu ajutorul modelului relațional ca o **colecție de tabele**. 
","Ce este o bază de date, conform cursului?","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']","Conform cursului, o bază de date este reprezentată cu ajutorul modelului relațional ca o **colecție de tabele**. 
","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",0.49999999995,0.0,0.8069442490375276,1.0,0.11741473432581427,0.43902439024390244,0.0
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']","În contextul prezentat, Oracle se referă la **server-ul Oracle**, mai specific la o versiune simplificată numită **Oracle Database 11g Express Edition**. 

Această versiune este utilizată pentru a rula aplicații de laborator și poate fi descărcată gratuit. 

Contextul menționează și **SGBD-ul Oracle**, care reprezintă sistemul de gestiune a bazelor de date Oracle, un sistem relațional ce include limbajul SQL și limbajul procedural PL/SQL.
",Ce reprezintă Oracle în cursul prezentat?,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']","În contextul prezentat, Oracle se referă la **server-ul Oracle**, mai specific la o versiune simplificată numită **Oracle Database 11g Express Edition**. 

Această versiune este utilizată pentru a rula aplicații de laborator și poate fi descărcată gratuit. 

Contextul menționează și **SGBD-ul Oracle**, care reprezintă sistemul de gestiune a bazelor de date Oracle, un sistem relațional ce include limbajul SQL și limbajul procedural PL/SQL.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",0.6226190476065953,0.0,0.8735515448400214,1.0,0.015784309053930103,0.13186813186813187,0.33
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza **ORDER BY** într-o interogare SELECT specifică ordinea în care sunt sortate rândurile rezultate. Poți sorta crescător (folosind cuvântul cheie **ASC**) sau descrescător (folosind cuvântul cheie **DESC**). 
",Ce face clauza ORDER BY într-o interogare SELECT?,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza **ORDER BY** într-o interogare SELECT specifică ordinea în care sunt sortate rândurile rezultate. Poți sorta crescător (folosind cuvântul cheie **ASC**) sau descrescător (folosind cuvântul cheie **DESC**). 
","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",0.4362433862361155,0.5,0.8665621516525305,1.0,0.04253727916575855,0.1509433962264151,0.4
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform cursului, funcțiile în SQL se împart în următoarele două categorii:

1. **Funcții referitoare la o singură înregistrare (single-row functions)**
2. **Funcții referitoare la mai multe înregistrări (multiple-row functions)** 
","În ce două categorii se împart funcțiile în SQL, conform cursului?","['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Conform cursului, funcțiile în SQL se împart în următoarele două categorii:

1. **Funcții referitoare la o singură înregistrare (single-row functions)**
2. **Funcții referitoare la mai multe înregistrări (multiple-row functions)** 
",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,0.9999999999875,1.0,0.8844422175312991,1.0,0.06754312828675707,0.6774193548387097,0.8
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Conform cursului ""Limbajul SQL\nCereri SELECT pe o tabela"", funcțiile de grup sunt menționate în contextul ""Funcţii referitoare la mai multe înregistrări"". Din păcate, contextul oferă doar titluri de capitole și nu oferă detalii despre funcțiile specifice. 

Pentru a putea răspunde la întrebarea ""Ce sunt funcțiile de grup în SQL, conform cursului?"", ar fi nevoie de mai mult context din cadrul cursului, în special din secțiunile:

* **4.3. Funcţii referitoare la mai multe înregistrări**
* **4.3.1. Clauza GROUP BY**
* **4.3.2. Excluderea grupurilor (clauza HAVING)**
* **4.3.3. Imbricarea funcţiilor de grup** 
","Ce sunt funcțiile de grup în SQL, conform cursului?","['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","Conform cursului ""Limbajul SQL\nCereri SELECT pe o tabela"", funcțiile de grup sunt menționate în contextul ""Funcţii referitoare la mai multe înregistrări"". Din păcate, contextul oferă doar titluri de capitole și nu oferă detalii despre funcțiile specifice. 

Pentru a putea răspunde la întrebarea ""Ce sunt funcțiile de grup în SQL, conform cursului?"", ar fi nevoie de mai mult context din cadrul cursului, în special din secțiunile:

* **4.3. Funcţii referitoare la mai multe înregistrări**
* **4.3.1. Clauza GROUP BY**
* **4.3.2. Excluderea grupurilor (clauza HAVING)**
* **4.3.3. Imbricarea funcţiilor de grup** 
","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",0.6533333333202667,0.0,0.0,1.0,0.03176023542809473,0.10852713178294573,0.0
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","O subinterogare (subquery) în SQL este o instrucțiune SELECT inclusă într-o clauză a altei instrucțiuni SQL. 

Pe scurt, este o interogare imbricată într-o altă interogare SQL mai mare. Ele sunt utilizate pentru a  obține date care vor fi folosite ulterior pentru a filtra sau a opera asupra datelor din interogarea principală.

De exemplu, ați putea utiliza o subinterogare pentru a găsi toți angajații care au un salariu mai mare decât salariul mediu al tuturor angajaților.

Iată câteva caracteristici importante ale subinterogărilor:

* **Pot returna un singur rând de date sau mai multe.** 
* **Sunt executate înaintea interogării principale.** Asta înseamnă că serverul de baze de date va evalua mai întâi subinterogarea pentru a obține rezultatele sale, apoi va utiliza aceste rezultate pentru a executa interogarea principală.
* **Pot fi utilizate în clauzele WHERE și HAVING ale interogării principale.**

 
",Ce este o subinterogare (subquery) în SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","O subinterogare (subquery) în SQL este o instrucțiune SELECT inclusă într-o clauză a altei instrucțiuni SQL. 

Pe scurt, este o interogare imbricată într-o altă interogare SQL mai mare. Ele sunt utilizate pentru a  obține date care vor fi folosite ulterior pentru a filtra sau a opera asupra datelor din interogarea principală.

De exemplu, ați putea utiliza o subinterogare pentru a găsi toți angajații care au un salariu mai mare decât salariul mediu al tuturor angajaților.

Iată câteva caracteristici importante ale subinterogărilor:

* **Pot returna un singur rând de date sau mai multe.** 
* **Sunt executate înaintea interogării principale.** Asta înseamnă că serverul de baze de date va evalua mai întâi subinterogarea pentru a obține rezultatele sale, apoi va utiliza aceste rezultate pentru a executa interogarea principală.
* **Pot fi utilizate în clauzele WHERE și HAVING ale interogării principale.**

 
","O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",0.36547619046705354,1.0,0.8795783269863314,0.7,0.22541618620556494,0.18181818181818182,0.57
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Limbajul de manipulare a datelor (DML) în SQL permite **manipularea** datelor din baza de date. Aceasta include operații precum:

* **Inserarea** de noi date (INSERT).
* **Actualizarea** datelor existente (UPDATE).
* **Ștergerea** datelor (DELETE). 
",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Limbajul de manipulare a datelor (DML) în SQL permite **manipularea** datelor din baza de date. Aceasta include operații precum:

* **Inserarea** de noi date (INSERT).
* **Actualizarea** datelor existente (UPDATE).
* **Ștergerea** datelor (DELETE). 
","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",0.0,0.0,0.881791634782337,0.25,0.191208175750425,0.2916666666666667,0.89
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']","Nu există suficiente informații în context pentru a răspunde la întrebarea ta despre constrângerea FOREIGN KEY în SQL. Deși contextul menționează ""Limbajul SQL\nConstrângeri"" și sintaxa pentru crearea tabelelor, nu oferă o definiție pentru FOREIGN KEY. 
","Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']","Nu există suficiente informații în context pentru a răspunde la întrebarea ta despre constrângerea FOREIGN KEY în SQL. Deși contextul menționează ""Limbajul SQL\nConstrângeri"" și sintaxa pentru crearea tabelelor, nu oferă o definiție pentru FOREIGN KEY. 
","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",0.0,0.0,0.0,1.0,0.04023854200837977,0.11940298507462685,0.0
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Conform informațiilor din context, o vedere (view) în SQL este un subiect tratat în cadrul cursului ""BAZE DE DATE 3"", în cadrul lecției ""Limbajul SQL\nVederi (Views)"". 
","Ce este o vedere (view) în SQL, conform cursului?","['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Conform informațiilor din context, o vedere (view) în SQL este un subiect tratat în cadrul cursului ""BAZE DE DATE 3"", în cadrul lecției ""Limbajul SQL\nVederi (Views)"". 
","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",0.8055555555287036,0.0,0.9324613913709022,1.0,0.015167145487126126,0.14814814814814817,0.0
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']","Contextul furnizat oferă informații despre indecși în SQL, nu despre secvențe. Pentru a putea răspunde la întrebarea ""De ce se folosesc secvențele în SQL, potrivit cursului?"", am nevoie de mai multe informații din curs despre secvențe. 

Secvențele în SQL sunt folosite de obicei pentru a genera valori unice, care pot fi utilizate ca și chei primare în tabele. 

Te rog furnizează mai mult context din curs despre secvențe SQL. 
","De ce se folosesc secvențele în SQL, potrivit cursului?","['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']","Contextul furnizat oferă informații despre indecși în SQL, nu despre secvențe. Pentru a putea răspunde la întrebarea ""De ce se folosesc secvențele în SQL, potrivit cursului?"", am nevoie de mai multe informații din curs despre secvențe. 

Secvențele în SQL sunt folosite de obicei pentru a genera valori unice, care pot fi utilizate ca și chei primare în tabele. 

Te rog furnizează mai mult context din curs despre secvențe SQL. 
","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",0.0,0.0,0.0,0.6,0.022325174503683515,0.10526315789473684,0.67
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']","Conform cursului, securitatea bazei de date se împarte în două categorii: securitatea sistemului și securitatea datelor. 
","Ce acoperă securitatea bazei de date, conform cursului?","['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']","Conform cursului, securitatea bazei de date se împarte în două categorii: securitatea sistemului și securitatea datelor. 
","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",0.26666666665333333,0.0,0.9352866947064596,1.0,0.07689124986143817,0.27027027027027023,0.0
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","Conform cursului, bazele de date prezintă multiple avantaje față de sistemele tradiționale bazate pe fișiere, incluzând:

* **Reducerea redundanței:** Datele sunt stocate centralizat, evitând duplicarea informațiilor.
* **Îmbunătățirea integrității:** Datele sunt supuse unor reguli de validare, asigurând consistența și acuratețea informațiilor.
* **Acces facil la date:** Utilizatorii pot accesa și interoga datele rapid și eficient, fără a fi nevoie să navigheze prin multiple fișiere.

Deși textul nu oferă o comparație detaliată, menționează că ""sistemele tradiționale bazate pe fișiere aveau limitări semnificative"", iar bazele de date au fost dezvoltate pentru a depăși aceste probleme. 
","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","Conform cursului, bazele de date prezintă multiple avantaje față de sistemele tradiționale bazate pe fișiere, incluzând:

* **Reducerea redundanței:** Datele sunt stocate centralizat, evitând duplicarea informațiilor.
* **Îmbunătățirea integrității:** Datele sunt supuse unor reguli de validare, asigurând consistența și acuratețea informațiilor.
* **Acces facil la date:** Utilizatorii pot accesa și interoga datele rapid și eficient, fără a fi nevoie să navigheze prin multiple fișiere.

Deși textul nu oferă o comparație detaliată, menționează că ""sistemele tradiționale bazate pe fișiere aveau limitări semnificative"", iar bazele de date au fost dezvoltate pentru a depăși aceste probleme. 
","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",0.999999999975,1.0,0.8348350898068203,0.6666666666666666,0.0046306709627535435,0.07936507936507936,0.0
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici principale:

- **Datele sunt organizate în tabele bidimensionale.**  Fiecare tabel este format din rânduri (tuple) și coloane (atribute).
- **Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare.** Cheia primară este un atribut sau un set de atribute care identifică în mod unic o înregistrare dintr-un tabel.
- **Cheile străine definesc relațiile între tabele.** O cheie străină este un atribut sau un set de atribute dintr-un tabel care se referă la cheia primară a altui tabel.
- **Independența datelor față de aplicațiile care le folosesc.** Modelul relațional separă datele de aplicațiile care le utilizează, ceea ce înseamnă că modificările la date nu afectează aplicațiile și invers.
- **Limbajul de interogare SQL este standardizat.** SQL este un limbaj puternic și flexibil utilizat pentru a accesa și manipula datele din bazele de date relaționale.
","Ce caracteristici are modelul relațional de baze de date, conform cursului?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, modelul relațional de baze de date are următoarele caracteristici principale:

- **Datele sunt organizate în tabele bidimensionale.**  Fiecare tabel este format din rânduri (tuple) și coloane (atribute).
- **Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare.** Cheia primară este un atribut sau un set de atribute care identifică în mod unic o înregistrare dintr-un tabel.
- **Cheile străine definesc relațiile între tabele.** O cheie străină este un atribut sau un set de atribute dintr-un tabel care se referă la cheia primară a altui tabel.
- **Independența datelor față de aplicațiile care le folosesc.** Modelul relațional separă datele de aplicațiile care le utilizează, ceea ce înseamnă că modificările la date nu afectează aplicațiile și invers.
- **Limbajul de interogare SQL este standardizat.** SQL este un limbaj puternic și flexibil utilizat pentru a accesa și manipula datele din bazele de date relaționale.
","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",0.9999999999875,1.0,0.8901183921192798,0.9166666666666666,0.013324710847052142,0.1694915254237288,0.67
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']","Textul furnizat descrie o bază de date exemplu și nu oferă detalii despre etapele proiectării bazelor de date relaționale. 
","Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']","Textul furnizat descrie o bază de date exemplu și nu oferă detalii despre etapele proiectării bazelor de date relaționale. 
","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",0.0,0.0,0.0,1.0,0.0,0.05263157894736842,0.0
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Contextul oferit menționează câteva modele de baze de date, printre care: relațional, orientat obiect, obiect-relațional, ierarhic și rețea. Din păcate, nu oferă detalii despre avantajele și dezavantajele acestora. 

Pentru a putea compara modelul relațional cu celelalte și a evidenția avantajele sale fundamentale, ar fi nevoie de mai multe informații despre fiecare. 

Totuși, pot oferi o comparație generală, bazată pe cunoștințele mele anterioare:

**Modelul relațional:**

* **Avantaje:**
    * **Simplitate și ușurință în utilizare:** Datele sunt organizate în tabele ușor de înțeles, iar interogarea datelor se face prin intermediul limbajului SQL, care este relativ simplu de învățat.
    * **Integritate și consistență a datelor:** Modelul relațional impune reguli stricte de integritate, asigurând acuratețea și coerența datelor.
    * **Flexibilitate:** Tabele pot fi ușor modificate și extinse fără a afecta restul bazei de date.
    * **Maturitate și suport extins:** Există o mulțime de instrumente, biblioteci și resurse disponibile pentru lucrul cu baze de date relaționale.

* **Dezavantaje:**
    * **Performanță:** Poate fi mai puțin performant în cazul datelor complexe sau a volumului mare de date, comparativ cu alte modele.
    * **Modelarea obiectelor din lumea reală:** Reprezentarea datelor complexe, cum ar fi ierarhii sau relații complexe, poate fi dificilă. 


**Comparație cu alte modele:**

* **Modelul orientat obiect:** 
    * Avantaje: mai potrivit pentru modelarea datelor complexe și a obiectelor din lumea reală. 
    * Dezavantaje: poate fi mai complex de implementat și întreținut.
* **Modelul obiect-relațional:** 
    * Combină caracteristicile modelului relațional cu cel orientat obiect. 
* **Modelul ierarhic:**
    * Avantaje: eficient pentru reprezentarea datelor ierarhice. 
    * Dezavantaje: rigiditate și dificultate în reprezentarea relațiilor complexe.
* **Modelul rețea:**
    * Similar modelului ierarhic, dar oferă mai multă flexibilitate. 

**Concluzie:**

Alegerea modelului de baze de date depinde de specificul aplicației. Modelul relațional rămâne o alegere populară datorită simplității, flexibilității și suportului extins, fiind potrivit pentru o gamă largă de aplicații. 
","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Contextul oferit menționează câteva modele de baze de date, printre care: relațional, orientat obiect, obiect-relațional, ierarhic și rețea. Din păcate, nu oferă detalii despre avantajele și dezavantajele acestora. 

Pentru a putea compara modelul relațional cu celelalte și a evidenția avantajele sale fundamentale, ar fi nevoie de mai multe informații despre fiecare. 

Totuși, pot oferi o comparație generală, bazată pe cunoștințele mele anterioare:

**Modelul relațional:**

* **Avantaje:**
    * **Simplitate și ușurință în utilizare:** Datele sunt organizate în tabele ușor de înțeles, iar interogarea datelor se face prin intermediul limbajului SQL, care este relativ simplu de învățat.
    * **Integritate și consistență a datelor:** Modelul relațional impune reguli stricte de integritate, asigurând acuratețea și coerența datelor.
    * **Flexibilitate:** Tabele pot fi ușor modificate și extinse fără a afecta restul bazei de date.
    * **Maturitate și suport extins:** Există o mulțime de instrumente, biblioteci și resurse disponibile pentru lucrul cu baze de date relaționale.

* **Dezavantaje:**
    * **Performanță:** Poate fi mai puțin performant în cazul datelor complexe sau a volumului mare de date, comparativ cu alte modele.
    * **Modelarea obiectelor din lumea reală:** Reprezentarea datelor complexe, cum ar fi ierarhii sau relații complexe, poate fi dificilă. 


**Comparație cu alte modele:**

* **Modelul orientat obiect:** 
    * Avantaje: mai potrivit pentru modelarea datelor complexe și a obiectelor din lumea reală. 
    * Dezavantaje: poate fi mai complex de implementat și întreținut.
* **Modelul obiect-relațional:** 
    * Combină caracteristicile modelului relațional cu cel orientat obiect. 
* **Modelul ierarhic:**
    * Avantaje: eficient pentru reprezentarea datelor ierarhice. 
    * Dezavantaje: rigiditate și dificultate în reprezentarea relațiilor complexe.
* **Modelul rețea:**
    * Similar modelului ierarhic, dar oferă mai multă flexibilitate. 

**Concluzie:**

Alegerea modelului de baze de date depinde de specificul aplicației. Modelul relațional rămâne o alegere populară datorită simplității, flexibilității și suportului extins, fiind potrivit pentru o gamă largă de aplicații. 
","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",0.0,0.0,0.8356762339114664,0.15,0.01872562114086442,0.09577464788732394,0.44
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']","Din păcate, textul furnizat conține doar o listă de capitole dintr-un posibil document despre SGBD-ul Oracle. Nu există informații concrete despre evoluția sau diferențele față de alte tipuri de baze de date. 

Pentru a putea răspunde la solicitarea dumneavoastră, aș avea nevoie de mai mult context.  Vă rog să furnizați informații suplimentare din secțiunile menționate, în special ""2.1. Evoluţia şi facilităţile sistemului ORACLE"". 
",Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']","Din păcate, textul furnizat conține doar o listă de capitole dintr-un posibil document despre SGBD-ul Oracle. Nu există informații concrete despre evoluția sau diferențele față de alte tipuri de baze de date. 

Pentru a putea răspunde la solicitarea dumneavoastră, aș avea nevoie de mai mult context.  Vă rog să furnizați informații suplimentare din secțiunile menționate, în special ""2.1. Evoluţia şi facilităţile sistemului ORACLE"". 
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",0.0,0.0,0.0,1.0,0.009281188343168273,0.12280701754385964,0.2
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Pentru a obține rezultate sumare utilizând clauzele WHERE, ORDER BY și funcțiile agregate, se urmează sintaxa generală a funcțiilor de grup:

```sql
SELECT [coloana,] functie_de_grup(coloana), ...
FROM tabel
[WHERE conditie]
[GROUP BY coloana]
[HAVING conditie_de_grupare]
[ORDER BY coloana]; 
```

Iată cum funcționează:

1. **WHERE**: Această clauză se aplică **prima** și filtrează rândurile din tabel pe baza unei condiții specifice. Doar rândurile care îndeplinesc condiția vor fi luate în considerare pentru operațiunile ulterioare.

2. **GROUP BY**:  Această clauză grupează rândurile filtrate de clauza WHERE în funcție de valorile dintr-o anumită coloană.

3. **Funcții agregate**: Funcțiile agregate (e.g., SUM, AVG, COUNT, MAX, MIN) se aplică pe fiecare grup creat de clauza GROUP BY, calculând o singură valoare pentru fiecare grup.

4. **HAVING**: Această clauză se aplică **după** grupare și funcțiile agregate. Se utilizează pentru a filtra grupurile rezultate pe baza unei condiții specifice. Doar grupurile care îndeplinesc condiția din clauza HAVING vor fi afișate.

5. **ORDER BY**: Această clauză se aplică **ultima** și se utilizează pentru a sorta rezultatele finale (după aplicarea clauzelor WHERE, GROUP BY, funcțiilor agregate și HAVING) în funcție de valorile unei coloane specificate, fie ascendent (implicit) fie descendent (cu opțiunea DESC).

**Exemplu:**

Să presupunem că avem o tabelă cu comenzi și dorim să obținem suma totală a comenzilor pentru fiecare client, dar doar pentru clienții care au plasat comenzi mai mari de 100 RON.

```sql
SELECT nume_client, SUM(valoare_comanda) AS suma_totala
FROM comenzi
WHERE valoare_comanda > 100
GROUP BY nume_client
ORDER BY suma_totala DESC;
```

Această interogare va returna o listă cu numele fiecărui client și suma totală a comenzilor lor, sortată descrescător în funcție de suma totală, dar doar pentru clienții cu comenzi mai mari de 100 RON.

Prin urmare, combinarea clauzelor WHERE, ORDER BY și funcțiilor agregate vă permite să efectuați operații de sumarizare și filtrare complexe asupra datelor din tabelele dvs.
","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Pentru a obține rezultate sumare utilizând clauzele WHERE, ORDER BY și funcțiile agregate, se urmează sintaxa generală a funcțiilor de grup:

```sql
SELECT [coloana,] functie_de_grup(coloana), ...
FROM tabel
[WHERE conditie]
[GROUP BY coloana]
[HAVING conditie_de_grupare]
[ORDER BY coloana]; 
```

Iată cum funcționează:

1. **WHERE**: Această clauză se aplică **prima** și filtrează rândurile din tabel pe baza unei condiții specifice. Doar rândurile care îndeplinesc condiția vor fi luate în considerare pentru operațiunile ulterioare.

2. **GROUP BY**:  Această clauză grupează rândurile filtrate de clauza WHERE în funcție de valorile dintr-o anumită coloană.

3. **Funcții agregate**: Funcțiile agregate (e.g., SUM, AVG, COUNT, MAX, MIN) se aplică pe fiecare grup creat de clauza GROUP BY, calculând o singură valoare pentru fiecare grup.

4. **HAVING**: Această clauză se aplică **după** grupare și funcțiile agregate. Se utilizează pentru a filtra grupurile rezultate pe baza unei condiții specifice. Doar grupurile care îndeplinesc condiția din clauza HAVING vor fi afișate.

5. **ORDER BY**: Această clauză se aplică **ultima** și se utilizează pentru a sorta rezultatele finale (după aplicarea clauzelor WHERE, GROUP BY, funcțiilor agregate și HAVING) în funcție de valorile unei coloane specificate, fie ascendent (implicit) fie descendent (cu opțiunea DESC).

**Exemplu:**

Să presupunem că avem o tabelă cu comenzi și dorim să obținem suma totală a comenzilor pentru fiecare client, dar doar pentru clienții care au plasat comenzi mai mari de 100 RON.

```sql
SELECT nume_client, SUM(valoare_comanda) AS suma_totala
FROM comenzi
WHERE valoare_comanda > 100
GROUP BY nume_client
ORDER BY suma_totala DESC;
```

Această interogare va returna o listă cu numele fiecărui client și suma totală a comenzilor lor, sortată descrescător în funcție de suma totală, dar doar pentru clienții cu comenzi mai mari de 100 RON.

Prin urmare, combinarea clauzelor WHERE, ORDER BY și funcțiilor agregate vă permite să efectuați operații de sumarizare și filtrare complexe asupra datelor din tabelele dvs.
","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",0.9999999999875,0.5,0.8742283890165767,0.8125,0.03287758823297721,0.1119592875318066,0.31
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Informațiile furnizate în context menționează doar funcția `UPPER`, care este utilizată pentru a converti șirurile de caractere în majuscule. Nu sunt oferite informații despre funcțiile `LOWER` și `INITCAP`.

Iată cum se utilizează funcțiile `UPPER`, `LOWER` și `INITCAP` în manipularea șirurilor și în condițiile din clauza `WHERE`:

**UPPER(șir)**

* Convertește toate literele dintr-un șir în majuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM angajati
WHERE UPPER(nume) = 'IONESCU'; 
```
Această interogare va selecta toți angajații al căror nume, convertit în majuscule, este ""IONESCU"".

**LOWER(șir)**

* Convertește toate literele dintr-un șir în minuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM produse
WHERE LOWER(descriere) LIKE '%reducere%'; 
```
Această interogare va selecta toate produsele a căror descriere, convertită în minuscule, conține cuvântul ""reducere"".

**INITCAP(șir)**

* Convertește prima literă a fiecărui cuvânt dintr-un șir în majusculă, iar restul literelor în minuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM clienti
WHERE INITCAP(adresa) = 'Strada Principala Nr. 1';
```
Această interogare va selecta toți clienții a căror adresă, formatată cu INITCAP, este ""Strada Principala Nr. 1"".

Utilizarea funcțiilor `UPPER`, `LOWER` și `INITCAP` în clauza `WHERE` poate fi utilă pentru a face interogările independente de caz și pentru a găsi potriviri indiferent de formatarea textului în baza de date. 
","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Informațiile furnizate în context menționează doar funcția `UPPER`, care este utilizată pentru a converti șirurile de caractere în majuscule. Nu sunt oferite informații despre funcțiile `LOWER` și `INITCAP`.

Iată cum se utilizează funcțiile `UPPER`, `LOWER` și `INITCAP` în manipularea șirurilor și în condițiile din clauza `WHERE`:

**UPPER(șir)**

* Convertește toate literele dintr-un șir în majuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM angajati
WHERE UPPER(nume) = 'IONESCU'; 
```
Această interogare va selecta toți angajații al căror nume, convertit în majuscule, este ""IONESCU"".

**LOWER(șir)**

* Convertește toate literele dintr-un șir în minuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM produse
WHERE LOWER(descriere) LIKE '%reducere%'; 
```
Această interogare va selecta toate produsele a căror descriere, convertită în minuscule, conține cuvântul ""reducere"".

**INITCAP(șir)**

* Convertește prima literă a fiecărui cuvânt dintr-un șir în majusculă, iar restul literelor în minuscule.
* **Exemplu în clauza `WHERE`**:
```sql
SELECT *
FROM clienti
WHERE INITCAP(adresa) = 'Strada Principala Nr. 1';
```
Această interogare va selecta toți clienții a căror adresă, formatată cu INITCAP, este ""Strada Principala Nr. 1"".

Utilizarea funcțiilor `UPPER`, `LOWER` și `INITCAP` în clauza `WHERE` poate fi utilă pentru a face interogările independente de caz și pentru a găsi potriviri indiferent de formatarea textului în baza de date. 
","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",0.3333333333,0.0,0.8909006329928378,0.2857142857142857,0.02703251334489793,0.1212121212121212,0.38
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']","O subinterogare single-row este o subinterogare care returnează un singur rând cu o singură coloană. Aceasta poate fi utilizată în clauza WHERE a unei interogări principale pentru a filtra rezultatele. 

**Mecanismul de execuție:**

1. **Execuția subinterogării:** Baza de date execută mai întâi subinterogarea. 
2. **Returnarea valorii:** Subinterogarea returnează o singură valoare către interogarea principală.
3. **Filtrarea datelor:** Interogarea principală utilizează valoarea returnată de subinterogare pentru a evalua condiția din clauza WHERE.
4. **Afișarea rezultatelor:** Interogarea principală afișează doar rândurile care îndeplinesc condiția din clauza WHERE, care include valoarea returnată de subinterogare.

**Operatori utilizați:**

Subinterogările single-row utilizează operatori de comparație single-row, cum ar fi:

* `=`: egal cu
* `>`: mai mare decât
* `<`: mai mic decât
* `>=`: mai mare sau egal cu
* `<=`: mai mic sau egal cu

**Exemplu:**

Să presupunem că avem o tabelă numită ""Angajati"" și dorim să găsim toți angajații al căror salariu este mai mare decât salariul mediu al tuturor angajaților. Putem realiza acest lucru folosind o subinterogare single-row în clauza WHERE:

```sql
SELECT nume, salariu
FROM Angajati
WHERE salariu > (SELECT AVG(salariu) FROM Angajati);
```

În acest exemplu, subinterogarea `(SELECT AVG(salariu) FROM Angajati)` este executată mai întâi și returnează salariul mediu al tuturor angajaților. Interogarea principală utilizează apoi această valoare pentru a filtra rândurile din tabela ""Angajati"" și a afișa doar angajații al căror salariu este mai mare decât media. 
",Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']","O subinterogare single-row este o subinterogare care returnează un singur rând cu o singură coloană. Aceasta poate fi utilizată în clauza WHERE a unei interogări principale pentru a filtra rezultatele. 

**Mecanismul de execuție:**

1. **Execuția subinterogării:** Baza de date execută mai întâi subinterogarea. 
2. **Returnarea valorii:** Subinterogarea returnează o singură valoare către interogarea principală.
3. **Filtrarea datelor:** Interogarea principală utilizează valoarea returnată de subinterogare pentru a evalua condiția din clauza WHERE.
4. **Afișarea rezultatelor:** Interogarea principală afișează doar rândurile care îndeplinesc condiția din clauza WHERE, care include valoarea returnată de subinterogare.

**Operatori utilizați:**

Subinterogările single-row utilizează operatori de comparație single-row, cum ar fi:

* `=`: egal cu
* `>`: mai mare decât
* `<`: mai mic decât
* `>=`: mai mare sau egal cu
* `<=`: mai mic sau egal cu

**Exemplu:**

Să presupunem că avem o tabelă numită ""Angajati"" și dorim să găsim toți angajații al căror salariu este mai mare decât salariul mediu al tuturor angajaților. Putem realiza acest lucru folosind o subinterogare single-row în clauza WHERE:

```sql
SELECT nume, salariu
FROM Angajati
WHERE salariu > (SELECT AVG(salariu) FROM Angajati);
```

În acest exemplu, subinterogarea `(SELECT AVG(salariu) FROM Angajati)` este executată mai întâi și returnează salariul mediu al tuturor angajaților. Interogarea principală utilizează apoi această valoare pentru a filtra rândurile din tabela ""Angajati"" și a afișa doar angajații al căror salariu este mai mare decât media. 
","O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",0.36547619046705354,0.5,0.8249491951697152,0.05555555555555555,0.10181128254376891,0.1296928327645051,0.75
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']","Contextul furnizat nu oferă informații despre utilizarea instrucțiunii UPDATE cu subinterogări pentru a actualiza date selective. 

Totuși, oferă informații despre cum se utilizează clauza WHERE în instrucțiunea UPDATE pentru a actualiza selectiv datele. 

Pentru a utiliza subinterogări cu UPDATE, sintaxa generală ar fi:

```sql
UPDATE tabela
SET coloana = valoare
WHERE coloana_cheie IN (SELECT coloana_cheie FROM alta_tabela WHERE conditie);
```

Acest exemplu arată cum se actualizează valorile din ""coloana"" din ""tabela"" pentru înregistrările în care ""coloana_cheie"" se potrivește cu valorile returnate de subinterogare. Subinterogarea selectează valorile ""coloana_cheie"" din ""alta_tabela"" care îndeplinesc o anumită ""conditie"".

Vă rugăm să furnizați mai multe detalii sau un exemplu concret pentru a putea oferi un răspuns mai precis. 
",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']","Contextul furnizat nu oferă informații despre utilizarea instrucțiunii UPDATE cu subinterogări pentru a actualiza date selective. 

Totuși, oferă informații despre cum se utilizează clauza WHERE în instrucțiunea UPDATE pentru a actualiza selectiv datele. 

Pentru a utiliza subinterogări cu UPDATE, sintaxa generală ar fi:

```sql
UPDATE tabela
SET coloana = valoare
WHERE coloana_cheie IN (SELECT coloana_cheie FROM alta_tabela WHERE conditie);
```

Acest exemplu arată cum se actualizează valorile din ""coloana"" din ""tabela"" pentru înregistrările în care ""coloana_cheie"" se potrivește cu valorile returnate de subinterogare. Subinterogarea selectează valorile ""coloana_cheie"" din ""alta_tabela"" care îndeplinesc o anumită ""conditie"".

Vă rugăm să furnizați mai multe detalii sau un exemplu concret pentru a putea oferi un răspuns mai precis. 
",UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,0.0,0.0,0.0,0.3333333333333333,0.058166354211475146,0.13580246913580246,0.29
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Constrângerile de integritate sunt esențiale pentru a asigura securitatea și consistența datelor într-o bază de date. Iată cum se aplică PRIMARY KEY, FOREIGN KEY și CHECK în acest scop:

**1. PRIMARY KEY (Cheia Primară):**

* **Securitate:**  Deși nu este direct legată de securitate, unicitatea impusă de PRIMARY KEY previne duplicarea accidentală a datelor sensibile. De exemplu, doi utilizatori diferiți cu același CNP ar putea crea confuzii și probleme de securitate.
* **Consistență:** Asigură că fiecare înregistrare dintr-un tabel poate fi identificată unic. Aceasta este fundamentală pentru operațiuni precum actualizarea sau ștergerea precisă a datelor. Fără PRIMARY KEY, ar fi dificil să se garanteze că modificările se aplică la înregistrarea corectă.

**2. FOREIGN KEY (Cheia Străină):**

* **Securitate:**  Indirect, ajută la securitate prin menținerea integrității referențiale. Doar valorile valide din tabelul părinte pot fi utilizate în tabelul copil. Aceasta previne crearea de înregistrări orfane sau incorecte, care ar putea duce la interpretări greșite ale datelor. 
* **Consistență:** Impune relații valide între tabele. De exemplu, o comandă plasată de un client trebuie să aibă o legătură validă către un client existent în baza de date. Aceasta previne comenzile atribuite unor clienți inexistenți.

**3. CHECK (Constrângeri de verificare):**

* **Securitate:**  Pot limita introducerea de date nevalide sau periculoase. De exemplu, o constrângere CHECK poate valida formatul unei adrese de email sau poate limita valoarea unui câmp numeric la un interval specific, prevenind erori.
* **Consistență:**  Asigură că datele stocate respectă anumite reguli predefinite.  De exemplu, o constrângere CHECK poate impune ca o dată de naștere să fie anterioară datei curente, menținând coerența datelor.

**Exemplu din Context:**

Contextul oferă un exemplu de aplicare a constrângerii CHECK pentru validarea formatului unei adrese de email:

```sql
ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%');
```

Această constrângere verifică dacă adresa de email introdusă conține simbolul ""@"" și ""."" , sporind astfel consistența datelor.

**Concluzie:**

Constrângerile de integritate sunt esențiale pentru a menține o bază de date fiabilă și sigură. Ele garantează că datele sunt corecte, consistente și protejate împotriva unor modificări eronate sau neautorizate. 
","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Constrângerile de integritate sunt esențiale pentru a asigura securitatea și consistența datelor într-o bază de date. Iată cum se aplică PRIMARY KEY, FOREIGN KEY și CHECK în acest scop:

**1. PRIMARY KEY (Cheia Primară):**

* **Securitate:**  Deși nu este direct legată de securitate, unicitatea impusă de PRIMARY KEY previne duplicarea accidentală a datelor sensibile. De exemplu, doi utilizatori diferiți cu același CNP ar putea crea confuzii și probleme de securitate.
* **Consistență:** Asigură că fiecare înregistrare dintr-un tabel poate fi identificată unic. Aceasta este fundamentală pentru operațiuni precum actualizarea sau ștergerea precisă a datelor. Fără PRIMARY KEY, ar fi dificil să se garanteze că modificările se aplică la înregistrarea corectă.

**2. FOREIGN KEY (Cheia Străină):**

* **Securitate:**  Indirect, ajută la securitate prin menținerea integrității referențiale. Doar valorile valide din tabelul părinte pot fi utilizate în tabelul copil. Aceasta previne crearea de înregistrări orfane sau incorecte, care ar putea duce la interpretări greșite ale datelor. 
* **Consistență:** Impune relații valide între tabele. De exemplu, o comandă plasată de un client trebuie să aibă o legătură validă către un client existent în baza de date. Aceasta previne comenzile atribuite unor clienți inexistenți.

**3. CHECK (Constrângeri de verificare):**

* **Securitate:**  Pot limita introducerea de date nevalide sau periculoase. De exemplu, o constrângere CHECK poate valida formatul unei adrese de email sau poate limita valoarea unui câmp numeric la un interval specific, prevenind erori.
* **Consistență:**  Asigură că datele stocate respectă anumite reguli predefinite.  De exemplu, o constrângere CHECK poate impune ca o dată de naștere să fie anterioară datei curente, menținând coerența datelor.

**Exemplu din Context:**

Contextul oferă un exemplu de aplicare a constrângerii CHECK pentru validarea formatului unei adrese de email:

```sql
ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%');
```

Această constrângere verifică dacă adresa de email introdusă conține simbolul ""@"" și ""."" , sporind astfel consistența datelor.

**Concluzie:**

Constrângerile de integritate sunt esențiale pentru a menține o bază de date fiabilă și sigură. Ele garantează că datele sunt corecte, consistente și protejate împotriva unor modificări eronate sau neautorizate. 
","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",0.999999999975,0.5,0.8813992661863445,0.5,0.06150343144231885,0.08653846153846155,0.67
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Utilizarea vederilor (views) în bazele de date oferă o serie de avantaje, în special în ceea ce privește simplificarea interogărilor complexe și îmbunătățirea securității. 

**Iată câteva avantaje cheie:**

* **Simplificarea interogărilor complexe:** Vederile pot combina date din mai multe tabele într-o singură vizualizare virtuală. Aceasta înseamnă că utilizatorii pot accesa informații complexe prin intermediul unor interogări SQL simple, fără a fi nevoiți să scrie interogări cu joncțiuni (JOIN) complicate.
* **Îmbunătățirea securității:** Vederile pot fi utilizate pentru a restricționa accesul utilizatorilor la anumite coloane sau rânduri din tabelele de bază. Aceasta permite administratorilor de baze de date să ofere acces granular la date, protejând în același timp informațiile sensibile.
* **Reutilizarea codului SQL:**  Definirea unei vederi permite reutilizarea codului SQL complex. Odată creată, poate fi utilizată în mai multe interogări sau aplicații, reducând redundanța și erorile.
* **Ușurarea înțelegerii datelor:** Vederile pot prezenta datele într-un format mai ușor de înțeles pentru utilizatori,  filtrând sau agregând informațiile relevante pentru nevoile lor specifice.

**Exemplu:**

Imaginați-vă o bază de date cu tabele separate pentru clienți, comenzi și produse. O vedere ar putea combina informații din toate cele trei tabele pentru a oferi o imagine de ansamblu asupra comenzilor clienților, inclusiv numele clientului, produsele comandate și prețurile totale. Această vedere ar simplifica semnificativ procesul de interogare a datelor, eliminând necesitatea unor interogări complexe cu joncțiuni multiple.

În concluzie, vederile sunt instrumente puternice în bazele de date, oferind o modalitate eficientă de a simplifica interogările complexe, de a îmbunătăți securitatea și de a facilita accesul la informații.
",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Utilizarea vederilor (views) în bazele de date oferă o serie de avantaje, în special în ceea ce privește simplificarea interogărilor complexe și îmbunătățirea securității. 

**Iată câteva avantaje cheie:**

* **Simplificarea interogărilor complexe:** Vederile pot combina date din mai multe tabele într-o singură vizualizare virtuală. Aceasta înseamnă că utilizatorii pot accesa informații complexe prin intermediul unor interogări SQL simple, fără a fi nevoiți să scrie interogări cu joncțiuni (JOIN) complicate.
* **Îmbunătățirea securității:** Vederile pot fi utilizate pentru a restricționa accesul utilizatorilor la anumite coloane sau rânduri din tabelele de bază. Aceasta permite administratorilor de baze de date să ofere acces granular la date, protejând în același timp informațiile sensibile.
* **Reutilizarea codului SQL:**  Definirea unei vederi permite reutilizarea codului SQL complex. Odată creată, poate fi utilizată în mai multe interogări sau aplicații, reducând redundanța și erorile.
* **Ușurarea înțelegerii datelor:** Vederile pot prezenta datele într-un format mai ușor de înțeles pentru utilizatori,  filtrând sau agregând informațiile relevante pentru nevoile lor specifice.

**Exemplu:**

Imaginați-vă o bază de date cu tabele separate pentru clienți, comenzi și produse. O vedere ar putea combina informații din toate cele trei tabele pentru a oferi o imagine de ansamblu asupra comenzilor clienților, inclusiv numele clientului, produsele comandate și prețurile totale. Această vedere ar simplifica semnificativ procesul de interogare a datelor, eliminând necesitatea unor interogări complexe cu joncțiuni multiple.

În concluzie, vederile sunt instrumente puternice în bazele de date, oferind o modalitate eficientă de a simplifica interogările complexe, de a îmbunătăți securitatea și de a facilita accesul la informații.
","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",0.15555555554777778,0.5,0.8547236125345349,0.5,0.0349018070868319,0.08955223880597016,0.57
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Îmi pare rău, dar contextul furnizat nu conține informații despre cum secvențele și indicii contribuie la performanța bazelor de date. Textul oferă informații generale despre bazele de date, caracteristicile lor, diferența față de fișierele tradiționale și tipurile de aplicații care le utilizează. 
",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Îmi pare rău, dar contextul furnizat nu conține informații despre cum secvențele și indicii contribuie la performanța bazelor de date. Textul oferă informații generale despre bazele de date, caracteristicile lor, diferența față de fișierele tradiționale și tipurile de aplicații care le utilizează. 
","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",0.0,0.0,0.0,1.0,0.04152310064211309,0.1590909090909091,0.2
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']","Controlul accesului și gestionarea privilegiilor în Oracle se implementează prin intermediul securității bazei de date. Aceasta permite:

* **Controlul accesului la baza de date:** Se poate restricționa accesul la baza de date doar utilizatorilor autorizați.
* **Acordarea accesului la obiecte specifice:**  Se pot acorda permisiuni specifice (ex: SELECT, INSERT, UPDATE, DELETE)  asupra obiectelor bazei de date (tabele, vizualizări, etc.) doar anumitor utilizatori sau roluri.
* **Confirmarea privilegiilor:** Dicționarul de date Oracle stochează informații despre utilizatori, drepturi de acces și obiecte, permițând verificarea și confirmarea privilegiilor.
* **Utilizarea sinonimelor:**  Acestea permit simplificarea accesului la obiecte și pot fi utilizate și pentru a ascunde numele reale ale obiectelor, sporind securitatea.

Pe scurt, Oracle oferă un sistem robust de securitate care permite controlul granular al accesului la date și gestionarea eficientă a privilegiilor utilizatorilor.
",Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']","Controlul accesului și gestionarea privilegiilor în Oracle se implementează prin intermediul securității bazei de date. Aceasta permite:

* **Controlul accesului la baza de date:** Se poate restricționa accesul la baza de date doar utilizatorilor autorizați.
* **Acordarea accesului la obiecte specifice:**  Se pot acorda permisiuni specifice (ex: SELECT, INSERT, UPDATE, DELETE)  asupra obiectelor bazei de date (tabele, vizualizări, etc.) doar anumitor utilizatori sau roluri.
* **Confirmarea privilegiilor:** Dicționarul de date Oracle stochează informații despre utilizatori, drepturi de acces și obiecte, permițând verificarea și confirmarea privilegiilor.
* **Utilizarea sinonimelor:**  Acestea permit simplificarea accesului la obiecte și pot fi utilizate și pentru a ascunde numele reale ale obiectelor, sporind securitatea.

Pe scurt, Oracle oferă un sistem robust de securitate care permite controlul granular al accesului la date și gestionarea eficientă a privilegiilor utilizatorilor.
","Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",0.999999999975,0.5,0.9044637871370981,0.35714285714285715,0.08549161846379198,0.15999999999999998,0.31
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","Înainte de apariția bazelor de date, sistemele tradiționale de fișiere erau folosite pentru gestionarea datelor. Aceste sisteme aveau câteva limitări semnificative:

* **Datele erau stocate în fișiere text sau binare disparate**, gestionate de aplicații software specifice.
* **Fiecare aplicație trebuia să își implementeze propriile metode de acces și manipulare a datelor**, ceea ce ducea la redundanță și dificultăți în actualizarea și menținerea consecvenței datelor.

Bazele de date moderne au fost dezvoltate pentru a depăși aceste limitări, oferind:

* **O structură organizată și centralizată pentru stocarea datelor**, permițând accesul și gestionarea eficientă a acestora.
* **Un sistem de gestionare a bazelor de date (SGBD)** care oferă instrumente pentru crearea, interogarea și manipularea datelor, fără a necesita cunoștințe avansate de programare.
* **Reducerea redundanței datelor**, îmbunătățind integritatea și consecvența acestora.
* **Acces facil și simultan la date pentru mai mulți utilizatori**.
* **Mecanisme de securitate pentru controlul accesului și protejarea datelor**.

Pe scurt, bazele de date moderne oferă un mod mult mai eficient, flexibil și sigur de a gestiona datele comparativ cu sistemele tradiționale de fișiere.
",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","Înainte de apariția bazelor de date, sistemele tradiționale de fișiere erau folosite pentru gestionarea datelor. Aceste sisteme aveau câteva limitări semnificative:

* **Datele erau stocate în fișiere text sau binare disparate**, gestionate de aplicații software specifice.
* **Fiecare aplicație trebuia să își implementeze propriile metode de acces și manipulare a datelor**, ceea ce ducea la redundanță și dificultăți în actualizarea și menținerea consecvenței datelor.

Bazele de date moderne au fost dezvoltate pentru a depăși aceste limitări, oferind:

* **O structură organizată și centralizată pentru stocarea datelor**, permițând accesul și gestionarea eficientă a acestora.
* **Un sistem de gestionare a bazelor de date (SGBD)** care oferă instrumente pentru crearea, interogarea și manipularea datelor, fără a necesita cunoștințe avansate de programare.
* **Reducerea redundanței datelor**, îmbunătățind integritatea și consecvența acestora.
* **Acces facil și simultan la date pentru mai mulți utilizatori**.
* **Mecanisme de securitate pentru controlul accesului și protejarea datelor**.

Pe scurt, bazele de date moderne oferă un mod mult mai eficient, flexibil și sigur de a gestiona datele comparativ cu sistemele tradiționale de fișiere.
","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",0.36547619046705354,1.0,0.9094312428301353,0.7647058823529411,0.23578316044531808,0.1506276150627615,0.69
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. 

* **Cheile primare** sunt folosite pentru a identifica unic fiecare înregistrare dintr-un tabel, asigurând că nu există duplicate.
* **Cheile străine** definesc relațiile între tabele, asigurând că datele din tabele diferite sunt consistente. De exemplu, o cheie străină într-un tabel ""Comenzi"" ar putea face referire la cheia primară a unui tabel ""Clienți"", asigurând că fiecare comandă este asociată cu un client valid.

**SQL (Structured Query Language)** joacă un rol crucial în implementarea acestor constrângeri de integritate. Prin intermediul comenzilor SQL, putem defini cheile primare și cheile străine la crearea tabelelor sau ulterior prin modificarea structurii lor. 

Mai mult, SQL permite definirea unor constrângeri suplimentare, cum ar fi:

* **Restricții de domeniu:** limitează tipul de date ce pot fi introduse într-o coloană (ex: numere întregi, text, date calendaristice).
* **Restricții de unicitate:** asigură că o anumită coloană (sau un grup de coloane) conține doar valori unice.
* **Restricții de verificare:** permit definirea unor reguli personalizate pe care datele trebuie să le respecte (ex: vârsta unui client trebuie să fie mai mare de 18 ani).

Prin urmare, SQL oferă un set puternic de instrumente pentru a defini și implementa constrângeri de integritate, asigurând astfel acuratețea și consistența datelor stocate în modelul relațional. 
",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional asigură integritatea datelor prin utilizarea cheilor primare și a cheilor străine. 

* **Cheile primare** sunt folosite pentru a identifica unic fiecare înregistrare dintr-un tabel, asigurând că nu există duplicate.
* **Cheile străine** definesc relațiile între tabele, asigurând că datele din tabele diferite sunt consistente. De exemplu, o cheie străină într-un tabel ""Comenzi"" ar putea face referire la cheia primară a unui tabel ""Clienți"", asigurând că fiecare comandă este asociată cu un client valid.

**SQL (Structured Query Language)** joacă un rol crucial în implementarea acestor constrângeri de integritate. Prin intermediul comenzilor SQL, putem defini cheile primare și cheile străine la crearea tabelelor sau ulterior prin modificarea structurii lor. 

Mai mult, SQL permite definirea unor constrângeri suplimentare, cum ar fi:

* **Restricții de domeniu:** limitează tipul de date ce pot fi introduse într-o coloană (ex: numere întregi, text, date calendaristice).
* **Restricții de unicitate:** asigură că o anumită coloană (sau un grup de coloane) conține doar valori unice.
* **Restricții de verificare:** permit definirea unor reguli personalizate pe care datele trebuie să le respecte (ex: vârsta unui client trebuie să fie mai mare de 18 ani).

Prin urmare, SQL oferă un set puternic de instrumente pentru a defini și implementa constrângeri de integritate, asigurând astfel acuratețea și consistența datelor stocate în modelul relațional. 
","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",0.9999999999875,0.3333333333333333,0.913408634991753,0.15,0.1004916995660316,0.1323529411764706,0.31
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']","Nu pot răspunde la întrebare folosind contextul furnizat, care se concentrează pe crearea unei vederi complexe în baze de date și pe rolul indecșilor.  

Pentru a răspunde la întrebarea ta, ar fi nevoie de un context care explică:
* Ce sunt subinterogările și cum funcționează
* Cum se pot folosi subinterogările pentru a realiza operații complexe de manipulare a datelor (ex: filtrare, agregare, etc.)

Te rog să oferi mai mult context sau să reformulezi întrebarea. 
",Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']","Nu pot răspunde la întrebare folosind contextul furnizat, care se concentrează pe crearea unei vederi complexe în baze de date și pe rolul indecșilor.  

Pentru a răspunde la întrebarea ta, ar fi nevoie de un context care explică:
* Ce sunt subinterogările și cum funcționează
* Cum se pot folosi subinterogările pentru a realiza operații complexe de manipulare a datelor (ex: filtrare, agregare, etc.)

Te rog să oferi mai mult context sau să reformulezi întrebarea. 
","Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",0.0,0.0,0.0,0.4,0.012360765763978342,0.06504065040650407,0.25
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Informațiile furnizate în context nu menționează constrângerile și vederile bazei de date sau modul în care acestea pot fi utilizate pentru implementarea politicilor de securitate. 

Totuși, contextul menționează că securitatea bazelor de date se referă la:

* **Accesarea și utilizarea obiectelor bazei de date:**  Aceasta sugerează că există mecanisme pentru a controla cine are acces la ce date și ce operațiuni pot efectua asupra lor. 
* **Securitatea sistemului și a datelor:** Aceasta implică existența unor măsuri de protecție atât la nivel de sistem (ex: accesul la serverul bazei de date) cât și la nivel de date (ex: criptarea datelor sensibile).

Deși textul nu oferă detalii despre  constrângeri și vederi, acestea sunt componente cheie în implementarea politicilor de securitate:

* **Constrângerile** impun reguli specifice asupra datelor care pot fi introduse sau modificate într-o bază de date. De exemplu, o constrângere poate impune ca un câmp ""vârstă"" să fie întotdeauna mai mare decât 18, asigurând astfel integritatea datelor.
* **Vederile** sunt reprezentări virtuale ale datelor din baza de date. Acestea permit utilizatorilor să acceseze doar anumite coloane sau rânduri dintr-un tabel, limitând astfel expunerea la datele sensibile.

Prin urmare, deși contextul nu oferă o legătură explicită, putem deduce că constrângerile și vederile pot fi utilizate pentru a implementa politici de securitate în baze de date. 
",Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","Informațiile furnizate în context nu menționează constrângerile și vederile bazei de date sau modul în care acestea pot fi utilizate pentru implementarea politicilor de securitate. 

Totuși, contextul menționează că securitatea bazelor de date se referă la:

* **Accesarea și utilizarea obiectelor bazei de date:**  Aceasta sugerează că există mecanisme pentru a controla cine are acces la ce date și ce operațiuni pot efectua asupra lor. 
* **Securitatea sistemului și a datelor:** Aceasta implică existența unor măsuri de protecție atât la nivel de sistem (ex: accesul la serverul bazei de date) cât și la nivel de date (ex: criptarea datelor sensibile).

Deși textul nu oferă detalii despre  constrângeri și vederi, acestea sunt componente cheie în implementarea politicilor de securitate:

* **Constrângerile** impun reguli specifice asupra datelor care pot fi introduse sau modificate într-o bază de date. De exemplu, o constrângere poate impune ca un câmp ""vârstă"" să fie întotdeauna mai mare decât 18, asigurând astfel integritatea datelor.
* **Vederile** sunt reprezentări virtuale ale datelor din baza de date. Acestea permit utilizatorilor să acceseze doar anumite coloane sau rânduri dintr-un tabel, limitând astfel expunerea la datele sensibile.

Prin urmare, deși contextul nu oferă o legătură explicită, putem deduce că constrângerile și vederile pot fi utilizate pentru a implementa politici de securitate în baze de date. 
","Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",0.0,0.0,0.8397781815514783,0.29411764705882354,0.04899864500847875,0.11678832116788321,0.5
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Pe baza contextului furnizat, SQL (Structured Query Language) este un limbaj utilizat pentru interogarea bazelor de date. 
",Ce înseamnă SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Pe baza contextului furnizat, SQL (Structured Query Language) este un limbaj utilizat pentru interogarea bazelor de date. 
",Structured Query Language,0.0,0.0,0.8578954262584245,0.5,0.07126955677090929,0.3,0.5
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru extragerea datelor dintr-o bază de date este `SELECT`. Aceasta face parte din sublimbajul DQL (Data Query Language) al SQL. 
",Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Instrucțiunea SQL folosită pentru extragerea datelor dintr-o bază de date este `SELECT`. Aceasta face parte din sublimbajul DQL (Data Query Language) al SQL. 
",SELECT,0.0,0.0,0.9796528603790119,0.0,0.028398387225677894,0.07692307692307693,0.0
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","În SQL, instrucțiunea folosită pentru actualizarea datelor dintr-o bază de date este **UPDATE**. 

Deși contextul furnizat nu menționează explicit instrucțiunea UPDATE, acesta vorbește despre ""comenzi DML (Data Manipulation Language)"" care sunt folosite pentru a ""adăuga, actualiza sau șterge date din baza de date"". Instrucțiunea UPDATE este o comandă DML folosită pentru a modifica valorile existente într-un tabel. 
",Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","În SQL, instrucțiunea folosită pentru actualizarea datelor dintr-o bază de date este **UPDATE**. 

Deși contextul furnizat nu menționează explicit instrucțiunea UPDATE, acesta vorbește despre ""comenzi DML (Data Manipulation Language)"" care sunt folosite pentru a ""adăuga, actualiza sau șterge date din baza de date"". Instrucțiunea UPDATE este o comandă DML folosită pentru a modifica valorile existente într-un tabel. 
",UPDATE,0.14285714284285714,0.0,0.8699113227794811,0.5,0.021476912089159056,0.02985074626865672,1.0
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Conform contextului oferit, instrucțiunea SQL folosită pentru ștergerea datelor dintr-o bază de date face parte din categoria **DML (Data Manipulation Language)**. 

Deși contextul nu menționează explicit instrucțiunea **DELETE**, aceasta este comanda folosită în SQL pentru a șterge date din tabele. 

Contextul menționează că: ""Când doriţi să adăugaţi, să actualizaţi, sau să ștergeți date din baza de date, executați comenzi DML(Data Manipulation Language).""

Prin urmare, putem deduce că instrucțiunea pentru ștergerea datelor aparține DML, iar DELETE este comanda specifică acestui scop. 
",Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']","Conform contextului oferit, instrucțiunea SQL folosită pentru ștergerea datelor dintr-o bază de date face parte din categoria **DML (Data Manipulation Language)**. 

Deși contextul nu menționează explicit instrucțiunea **DELETE**, aceasta este comanda folosită în SQL pentru a șterge date din tabele. 

Contextul menționează că: ""Când doriţi să adăugaţi, să actualizaţi, sau să ștergeți date din baza de date, executați comenzi DML(Data Manipulation Language).""

Prin urmare, putem deduce că instrucțiunea pentru ștergerea datelor aparține DML, iar DELETE este comanda specifică acestui scop. 
",DELETE,0.14285714284285714,0.0,0.85734447378737,0.6,0.0,0.020618556701030924,0.0
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","Contextul furnizat vorbește despre limbajul SQL și categoriile sale de comenzi, printre care DML (Data Manipulation Language). 

Instrucțiunea SQL folosită pentru inserarea de date noi într-o bază de date este **INSERT INTO**. 

Deși contextul nu menționează explicit ""INSERT INTO"", el menționează categoriile de comenzi SQL, iar  ""INSERT INTO"" face parte din categoria DML (Data Manipulation Language), care se ocupă de manipularea datelor, inclusiv adăugarea lor. 
",Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']","Contextul furnizat vorbește despre limbajul SQL și categoriile sale de comenzi, printre care DML (Data Manipulation Language). 

Instrucțiunea SQL folosită pentru inserarea de date noi într-o bază de date este **INSERT INTO**. 

Deși contextul nu menționează explicit ""INSERT INTO"", el menționează categoriile de comenzi SQL, iar  ""INSERT INTO"" face parte din categoria DML (Data Manipulation Language), care se ocupă de manipularea datelor, inclusiv adăugarea lor. 
",INSERT INTO,0.0,0.0,0.8715743258683503,0.4,0.0,0.05405405405405406,0.29
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","```sql
SELECT FirstName
FROM Persons;
```
","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","```sql
SELECT FirstName
FROM Persons;
```
",SELECT FirstName FROM Persons,0.0,0.0,0.8730131150549707,0.0,0.21200626759025185,0.888888888888889,1.0
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Informațiile furnizate în context nu conțin sintaxa SQL pentru selectarea tuturor coloanelor dintr-un tabel numit „Persons”.

Totuși, sintaxa corectă în SQL pentru a selecta toate coloanele din tabelul „Persons” este:

```sql
SELECT *
FROM Persons;
``` 

Unde:

* `SELECT *`:  Această clauză specifică ce coloane să fie selectate. Asteriscul (*) este un wildcard care înseamnă ""toate coloanele"".
* `FROM Persons`: Această clauză specifică numele tabelului din care se vor selecta datele.
 
 Așadar, comanda de mai sus va returna toate coloanele și toate rândurile din tabelul „Persons”. 
","Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Informațiile furnizate în context nu conțin sintaxa SQL pentru selectarea tuturor coloanelor dintr-un tabel numit „Persons”.

Totuși, sintaxa corectă în SQL pentru a selecta toate coloanele din tabelul „Persons” este:

```sql
SELECT *
FROM Persons;
``` 

Unde:

* `SELECT *`:  Această clauză specifică ce coloane să fie selectate. Asteriscul (*) este un wildcard care înseamnă ""toate coloanele"".
* `FROM Persons`: Această clauză specifică numele tabelului din care se vor selecta datele.
 
 Așadar, comanda de mai sus va returna toate coloanele și toate rândurile din tabelul „Persons”. 
",SELECT * FROM Persons,0.0,0.0,0.8985988381714396,0.16666666666666666,0.03720596196661157,0.06741573033707865,0.89
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu oferă informații despre cum să se selecteze toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" folosind SQL. 

Totuși, pot să îți ofer sintaxa corectă SQL pentru a realiza acest lucru:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```

Această interogare SQL va:

1. **`SELECT *`**: Selecta toate coloanele (`*`).
2. **`FROM Persons`**: Din tabelul numit ""Persons"".
3. **`WHERE FirstName = 'Peter'`**: Unde valoarea coloanei ""FirstName"" este egală cu ""Peter"". 

Asigurați-vă că înlocuiți ""Persons"" cu numele corect al tabelului dvs. dacă este diferit. 
","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu oferă informații despre cum să se selecteze toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" folosind SQL. 

Totuși, pot să îți ofer sintaxa corectă SQL pentru a realiza acest lucru:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```

Această interogare SQL va:

1. **`SELECT *`**: Selecta toate coloanele (`*`).
2. **`FROM Persons`**: Din tabelul numit ""Persons"".
3. **`WHERE FirstName = 'Peter'`**: Unde valoarea coloanei ""FirstName"" este egală cu ""Peter"". 

Asigurați-vă că înlocuiți ""Persons"" cu numele corect al tabelului dvs. dacă este diferit. 
",SELECT * FROM Persons WHERE FirstName='Peter',0.0,0.0,0.9095977794323474,0.16666666666666666,0.015301683686839007,0.125,0.67
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu conține informații despre sintaxa specifică SQL pentru selectarea înregistrărilor unde valoarea unei coloane începe cu o anumită literă. 

Totuși, pot să îți ofer răspunsul la întrebarea ta. Pentru a selecta toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a"", se poate utiliza următoarea comandă SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

Explicație:

* `SELECT *`: Această clauză selectează toate coloanele (`*`) din tabelul `Persons`.
* `FROM Persons`: Această clauză specifică tabelul din care se vor extrage datele.
* `WHERE FirstName LIKE 'a%'`: Această clauză filtrează rezultatele pentru a include doar rândurile unde valoarea coloanei `FirstName` începe cu ""a"". 
    * `LIKE` este un operator utilizat pentru a compara șiruri de caractere pe baza unui șablon.
    * `'a%'` este șablonul. `%` este un caracter wildcard care reprezintă orice șir de caractere (inclusiv un șir gol). Prin urmare, 'a%' se potrivește cu orice șir de caractere care începe cu ""a"". 

Pentru mai multe detalii despre sintaxa SQL și operatori precum `LIKE`, poți consulta documentația SQL specifică bazei de date pe care o utilizezi. 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu conține informații despre sintaxa specifică SQL pentru selectarea înregistrărilor unde valoarea unei coloane începe cu o anumită literă. 

Totuși, pot să îți ofer răspunsul la întrebarea ta. Pentru a selecta toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a"", se poate utiliza următoarea comandă SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

Explicație:

* `SELECT *`: Această clauză selectează toate coloanele (`*`) din tabelul `Persons`.
* `FROM Persons`: Această clauză specifică tabelul din care se vor extrage datele.
* `WHERE FirstName LIKE 'a%'`: Această clauză filtrează rezultatele pentru a include doar rândurile unde valoarea coloanei `FirstName` începe cu ""a"". 
    * `LIKE` este un operator utilizat pentru a compara șiruri de caractere pe baza unui șablon.
    * `'a%'` este șablonul. `%` este un caracter wildcard care reprezintă orice șir de caractere (inclusiv un șir gol). Prin urmare, 'a%' se potrivește cu orice șir de caractere care începe cu ""a"". 

Pentru mai multe detalii despre sintaxa SQL și operatori precum `LIKE`, poți consulta documentația SQL specifică bazei de date pe care o utilizezi. 
",SELECT * FROM Persons WHERE FirstName LIKE 'a%',0.0,0.0,0.8587380310901197,0.09090909090909091,0.0,0.07291666666666667,0.88
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']","Informația din promptul utilizatorului este corectă și se referă la modul în care funcționează operatorii logici **OR** și **AND** în clauza **WHERE** a unei interogări SQL. 

Contextul oferit descrie diverse aspecte ale funcțiilor SQL și ale clauzelor **SELECT**, **WHERE** și **ORDER BY**, dar nu menționează explicit operatorii **OR** și **AND**. 

Deși contextul nu oferă informații despre **OR** și **AND**, putem deduce că informația din prompt este relevantă pentru baza de date, deoarece descrie un concept fundamental al limbajului SQL, care este utilizat pentru a filtra înregistrările din tabele, operație strâns legată de funcționalitatea clauzei **WHERE** menționată în context. 
",Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']","Informația din promptul utilizatorului este corectă și se referă la modul în care funcționează operatorii logici **OR** și **AND** în clauza **WHERE** a unei interogări SQL. 

Contextul oferit descrie diverse aspecte ale funcțiilor SQL și ale clauzelor **SELECT**, **WHERE** și **ORDER BY**, dar nu menționează explicit operatorii **OR** și **AND**. 

Deși contextul nu oferă informații despre **OR** și **AND**, putem deduce că informația din prompt este relevantă pentru baza de date, deoarece descrie un concept fundamental al limbajului SQL, care este utilizat pentru a filtra înregistrările din tabele, operație strâns legată de funcționalitatea clauzei **WHERE** menționată în context. 
",Adevărat,0.0,0.0,0.817424885021504,0.75,0.0,0.0,0.44
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu conține informații despre cum se selectează înregistrări dintr-un tabel folosind SQL. 

Totuși, pot să îți răspund la întrebare. Iată cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson"" folosind SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```

Această interogare va returna toate coloanele (`*`) din tabelul `Persons` pentru rândurile în care coloana `FirstName` este egală cu ""Peter"" și coloana `LastName` este egală cu ""Jackson"". 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Contextul furnizat nu conține informații despre cum se selectează înregistrări dintr-un tabel folosind SQL. 

Totuși, pot să îți răspund la întrebare. Iată cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson"" folosind SQL:

```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```

Această interogare va returna toate coloanele (`*`) din tabelul `Persons` pentru rândurile în care coloana `FirstName` este egală cu ""Peter"" și coloana `LastName` este egală cu ""Jackson"". 
",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',0.0,0.0,0.8986680094006281,0.0,0.0,0.18367346938775508,0.8
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']","Contextul furnizat nu conține informații despre cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"". Pentru a obține acest rezultat, se poate folosi următoarea interogare SQL:

```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```

Această interogare va selecta toate coloanele (`*`) din tabelul `Persons` pentru înregistrările unde valoarea coloanei `LastName` este mai mare sau egală cu ""Hansen"" și mai mică sau egală cu ""Pettersen"".
","Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']","Contextul furnizat nu conține informații despre cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"". Pentru a obține acest rezultat, se poate folosi următoarea interogare SQL:

```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
```

Această interogare va selecta toate coloanele (`*`) din tabelul `Persons` pentru înregistrările unde valoarea coloanei `LastName` este mai mare sau egală cu ""Hansen"" și mai mică sau egală cu ""Pettersen"".
",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',0.0,0.0,0.8664560456754087,0.3333333333333333,0.014262733286728257,0.20454545454545456,0.8
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']","Contextul furnizat nu conține informații despre instrucțiunea SQL care returnează doar valori distincte. 

Totuși, instrucțiunea SQL care face acest lucru este **DISTINCT**. 

Exemplu:

```sql
SELECT DISTINCT column_name
FROM table_name;
```

Această instrucțiune va selecta doar valorile distincte (unice) din coloana ""column_name"" a tabelului ""table_name"".
",Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']","Contextul furnizat nu conține informații despre instrucțiunea SQL care returnează doar valori distincte. 

Totuși, instrucțiunea SQL care face acest lucru este **DISTINCT**. 

Exemplu:

```sql
SELECT DISTINCT column_name
FROM table_name;
```

Această instrucțiune va selecta doar valorile distincte (unice) din coloana ""column_name"" a tabelului ""table_name"".
",SELECT DISTINCT,0.0,0.0,0.8439781987094997,0.3333333333333333,0.0,0.07272727272727272,0.8
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Deși contextul oferit nu menționează explicit cuvântul cheie SQL folosit pentru sortarea rezultatelor, capitolul ""3.4. Clauza ORDER BY"" din fragmentul ""Limbajul SQL\nInterogări SELECT pe o singură tabelă"" sugerează că **ORDER BY** este clauza folosită pentru sortarea unei mulțimi de rezultate în SQL. 
",Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']","Deși contextul oferit nu menționează explicit cuvântul cheie SQL folosit pentru sortarea rezultatelor, capitolul ""3.4. Clauza ORDER BY"" din fragmentul ""Limbajul SQL\nInterogări SELECT pe o singură tabelă"" sugerează că **ORDER BY** este clauza folosită pentru sortarea unei mulțimi de rezultate în SQL. 
",ORDER BY,0.15555555554777778,1.0,0.8525409767010904,0.5,0.0,0.07843137254901959,0.0
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare va selecta toate coloanele (`*`) din tabelul `Persons` și le va sorta în ordinea descrescătoare a valorilor din coloana `FirstName`.
","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare va selecta toate coloanele (`*`) din tabelul `Persons` și le va sorta în ordinea descrescătoare a valorilor din coloana `FirstName`.
",SELECT * FROM Persons ORDER BY FirstName DESC,0.0,0.0,0.7818913491676511,0.0,0.140749577692888,0.37837837837837834,1.0
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Contextul furnizat nu conține informații despre cum se inserează o înregistrare nouă în tabelul ""Persons"" folosind SQL. 

Totuși, sintaxa generală pentru inserarea unei înregistrări într-un tabel SQL este:

```sql
INSERT INTO nume_tabel (coloana1, coloana2, ...) VALUES (valoare1, valoare2, ...);
```

Pentru a insera o înregistrare în tabelul ""Persons"", trebuie să înlocuiți ""nume_tabel"" cu ""Persons"", ""coloana1, coloana2, ..."" cu numele coloanelor din tabelul ""Persons"" și ""valoare1, valoare2, ..."" cu valorile corespunzătoare pe care doriți să le introduceți. 

De exemplu, să presupunem că tabelul ""Persons"" are coloanele ""FirstName"", ""LastName"" și ""Age"". Pentru a insera o persoană nouă cu numele ""John"", prenumele ""Doe"" și vârsta de 30 de ani, ați utiliza următoarea comandă SQL:

```sql
INSERT INTO Persons (FirstName, LastName, Age) VALUES ('John', 'Doe', 30); 
```

Asigurați-vă că valorile respectă tipul de date al fiecărei coloane.
","Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Contextul furnizat nu conține informații despre cum se inserează o înregistrare nouă în tabelul ""Persons"" folosind SQL. 

Totuși, sintaxa generală pentru inserarea unei înregistrări într-un tabel SQL este:

```sql
INSERT INTO nume_tabel (coloana1, coloana2, ...) VALUES (valoare1, valoare2, ...);
```

Pentru a insera o înregistrare în tabelul ""Persons"", trebuie să înlocuiți ""nume_tabel"" cu ""Persons"", ""coloana1, coloana2, ..."" cu numele coloanelor din tabelul ""Persons"" și ""valoare1, valoare2, ..."" cu valorile corespunzătoare pe care doriți să le introduceți. 

De exemplu, să presupunem că tabelul ""Persons"" are coloanele ""FirstName"", ""LastName"" și ""Age"". Pentru a insera o persoană nouă cu numele ""John"", prenumele ""Doe"" și vârsta de 30 de ani, ați utiliza următoarea comandă SQL:

```sql
INSERT INTO Persons (FirstName, LastName, Age) VALUES ('John', 'Doe', 30); 
```

Asigurați-vă că valorile respectă tipul de date al fiecărei coloane.
","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",0.0,0.0,0.9109209504303556,0.125,0.020244462660665506,0.05333333333333333,0.0
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']","Contextul furnizat nu oferă informații despre cum se inserează date în tabelul ""Persons"" folosind SQL.  

Totuși, pot oferi sintaxa generală SQL pentru a insera o valoare într-un tabel:

```sql
INSERT INTO nume_tabel (coloana1, coloana2, ...)
VALUES (valoare1, valoare2, ...);
```

Pentru a insera ""Olsen"" în coloana ""LastName"" a tabelului ""Persons"", comanda ar fi:

```sql
INSERT INTO Persons (LastName) VALUES ('Olsen');
```

**Notă:** Această comandă presupune că există un tabel numit ""Persons"" cu o coloană numită ""LastName"". Este posibil să fie nevoie să adaptați comanda în funcție de structura reală a bazei de date. 
","Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']","Contextul furnizat nu oferă informații despre cum se inserează date în tabelul ""Persons"" folosind SQL.  

Totuși, pot oferi sintaxa generală SQL pentru a insera o valoare într-un tabel:

```sql
INSERT INTO nume_tabel (coloana1, coloana2, ...)
VALUES (valoare1, valoare2, ...);
```

Pentru a insera ""Olsen"" în coloana ""LastName"" a tabelului ""Persons"", comanda ar fi:

```sql
INSERT INTO Persons (LastName) VALUES ('Olsen');
```

**Notă:** Această comandă presupune că există un tabel numit ""Persons"" cu o coloană numită ""LastName"". Este posibil să fie nevoie să adaptați comanda în funcție de structura reală a bazei de date. 
",INSERT INTO Persons (LastName) VALUES ('Olsen'),0.0,0.0,0.871494591606193,0.2,0.022869567780619007,0.11881188118811882,0.57
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Informațiile furnizate se concentrează pe modificarea secvențelor și ștergerea sinonimelor în SQL. Nu există informații despre actualizarea numelui de familie în coloana ""LastName"" din tabelul ""Persons"". 

Pentru a schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"", puteți utiliza următoarea interogare SQL **UPDATE**:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această interogare va actualiza toate intrările din tabelul ""Persons"" unde ""LastName"" este ""Hansen"" și va seta ""LastName"" la ""Nilsen"". 
","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Informațiile furnizate se concentrează pe modificarea secvențelor și ștergerea sinonimelor în SQL. Nu există informații despre actualizarea numelui de familie în coloana ""LastName"" din tabelul ""Persons"". 

Pentru a schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons"", puteți utiliza următoarea interogare SQL **UPDATE**:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această interogare va actualiza toate intrările din tabelul ""Persons"" unde ""LastName"" este ""Hansen"" și va seta ""LastName"" la ""Nilsen"". 
",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',0.0,0.0,0.8955855481178854,0.5,0.0,0.18604651162790695,0.67
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
``` 
","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
``` 
",DELETE FROM Persons WHERE FirstName = 'Peter',0.0,0.0,0.8571338103893943,0.0,0.40016016019225004,0.923076923076923,1.0
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","```sql
SELECT COUNT(*) FROM Persons;
``` 
This SQL query will return the total number of records in the table named ""Persons"".
","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","```sql
SELECT COUNT(*) FROM Persons;
``` 
This SQL query will return the total number of records in the table named ""Persons"".
",SELECT COUNT(*) FROM Persons,0.0,0.0,0.8379279265233412,0.0,0.17101456688527578,0.33333333333333337,1.0
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Informațiile furnizate se referă la subinterogări, nu la tipuri de JOIN.  Prin urmare, nu pot răspunde la întrebarea ta pe baza acestui context. 

Pentru a afla care este cel mai cunoscut tip de JOIN, aș avea nevoie de un context care să discute despre tipurile de JOIN în bazele de date.  
",Care este cel mai cunoscut tip de join?,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']","Informațiile furnizate se referă la subinterogări, nu la tipuri de JOIN.  Prin urmare, nu pot răspunde la întrebarea ta pe baza acestui context. 

Pentru a afla care este cel mai cunoscut tip de JOIN, aș avea nevoie de un context care să discute despre tipurile de JOIN în bazele de date.  
",INNER JOIN,0.0,0.0,0.0,1.0,0.033864985683445356,0.03571428571428571,0.8
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']","Conform contextului oferit, operatorul **IN** este folosit pentru a selecta valori dintr-un interval (o listă de valori) returnată de o subinterogare. 
",Ce operator este folosit pentru a selecta valori dintr-un interval?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']","Conform contextului oferit, operatorul **IN** este folosit pentru a selecta valori dintr-un interval (o listă de valori) returnată de o subinterogare. 
",BETWEEN,0.0,0.0,0.8662628221145857,0.5,0.0,0.0,0.0
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']","Afirmația ""Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL"" este **adevărată**. 

Contextul menționează clar:

* **""Constrângerea de tip NOT NULL asigură faptul că o coloană să nu conţină valoarea nulă.""**

Această constrângere este esențială în bazele de date pentru a asigura integritatea datelor și pentru a preveni apariția unor valori nedefinite sau lipsă în coloanele importante. 
",Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']","Afirmația ""Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL"" este **adevărată**. 

Contextul menționează clar:

* **""Constrângerea de tip NOT NULL asigură faptul că o coloană să nu conţină valoarea nulă.""**

Această constrângere este esențială în bazele de date pentru a asigura integritatea datelor și pentru a preveni apariția unor valori nedefinite sau lipsă în coloanele importante. 
",Adevărat,0.36547619046705354,1.0,0.8314760078638671,0.5,0.0,0.05714285714285715,0.0
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']","Operatorul folosit pentru a căuta un model specificat într-o coloană este **LIKE**. 

Informația este disponibilă în context de mai multe ori, de exemplu: ""Dacă nu se cunoaște valoarea exactă căutată, cu ajutorul condiției LIKE putem să selectăm rândurile care se potrivesc cu un model specificat de caractere.""
",Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']","Operatorul folosit pentru a căuta un model specificat într-o coloană este **LIKE**. 

Informația este disponibilă în context de mai multe ori, de exemplu: ""Dacă nu se cunoaște valoarea exactă căutată, cu ajutorul condiției LIKE putem să selectăm rândurile care se potrivesc cu un model specificat de caractere.""
",LIKE,0.999999999975,1.0,0.8416725849496548,1.0,0.024455939372403628,0.03571428571428572,0.0
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Instrucțiunea SQL folosită pentru a crea un tabel de baze de date numit ""Customers"" este **CREATE TABLE**.

Conform contextului furnizat, ""Limbajul de definire a datelor (LDD) permite definirea structurii tabelelor ce compun bazele de date."" Una dintre comenzile LDD este **CREATE**, folosită ""pentru crearea structurii unei baze de date **sau a unei tabele**"".

Așadar, sintaxa generală pentru crearea tabelului ""Customers"" ar fi:

```sql
CREATE TABLE Customers (
   // Aici se definesc coloanele tabelului și tipurile lor de date
   // Exemplu:
   CustomerID INT PRIMARY KEY,
   CustomerName VARCHAR(255),
   ContactName VARCHAR(255),
   Address VARCHAR(255),
   City VARCHAR(255),
   PostalCode VARCHAR(10),
   Country VARCHAR(255) 
);
``` 
","Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Instrucțiunea SQL folosită pentru a crea un tabel de baze de date numit ""Customers"" este **CREATE TABLE**.

Conform contextului furnizat, ""Limbajul de definire a datelor (LDD) permite definirea structurii tabelelor ce compun bazele de date."" Una dintre comenzile LDD este **CREATE**, folosită ""pentru crearea structurii unei baze de date **sau a unei tabele**"".

Așadar, sintaxa generală pentru crearea tabelului ""Customers"" ar fi:

```sql
CREATE TABLE Customers (
   // Aici se definesc coloanele tabelului și tipurile lor de date
   // Exemplu:
   CustomerID INT PRIMARY KEY,
   CustomerName VARCHAR(255),
   ContactName VARCHAR(255),
   Address VARCHAR(255),
   City VARCHAR(255),
   PostalCode VARCHAR(10),
   Country VARCHAR(255) 
);
``` 
",CREATE TABLE Customers,0.999999999975,1.0,0.887332335070265,0.25,0.008303512658920926,0.05769230769230769,0.4
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","```sql
UPDATE EMP
SET sal = sal + (SELECT 0.1 * AVG(sal) FROM EMP) -- Adaugă 10% din salariul mediu 
WHERE deptno = 10; -- Doar pentru angajații din departamentul 10
```

Explicație:

1. **`UPDATE EMP`**:  Această clauză indică faptul că dorim să actualizăm datele din tabela `EMP`.
2. **`SET sal = sal + (SELECT 0.1 * AVG(sal) FROM EMP)`**: Această parte a interogării calculează noul salariu. 
    - `sal = sal + ...`: Salariul actual (`sal`) este incrementat cu o valoare calculată.
    - `(SELECT 0.1 * AVG(sal) FROM EMP)`: Această subinterogare calculează 10% (0.1) din salariul mediu (`AVG(sal)`) al tuturor angajaților din tabela `EMP`.
3. **`WHERE deptno = 10`**:  Această clauză specifică faptul că actualizarea salariului se aplică doar angajaților al căror `deptno` (numărul departamentului) este egal cu 10. 
",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","```sql
UPDATE EMP
SET sal = sal + (SELECT 0.1 * AVG(sal) FROM EMP) -- Adaugă 10% din salariul mediu 
WHERE deptno = 10; -- Doar pentru angajații din departamentul 10
```

Explicație:

1. **`UPDATE EMP`**:  Această clauză indică faptul că dorim să actualizăm datele din tabela `EMP`.
2. **`SET sal = sal + (SELECT 0.1 * AVG(sal) FROM EMP)`**: Această parte a interogării calculează noul salariu. 
    - `sal = sal + ...`: Salariul actual (`sal`) este incrementat cu o valoare calculată.
    - `(SELECT 0.1 * AVG(sal) FROM EMP)`: Această subinterogare calculează 10% (0.1) din salariul mediu (`AVG(sal)`) al tuturor angajaților din tabela `EMP`.
3. **`WHERE deptno = 10`**:  Această clauză specifică faptul că actualizarea salariului se aplică doar angajaților al căror `deptno` (numărul departamentului) este egal cu 10. 
",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,0.0,0.0,0.7464646273072186,0.0,0.11092093748324076,0.2097902097902098,1.0
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']","Contextul furnizat nu oferă informații despre ștergerea angajaților dintr-o bază de date. Exemplul cel mai apropiat se referă la găsirea angajaților cu un salariu mai mare decât salariul mediu al departamentului lor. 

Pentru a șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și a returna numărul de rânduri afectate, ar trebui utilizată o interogare de tip DELETE cu o subinterogare. Iată un exemplu de astfel de interogare:

```sql
DELETE FROM angajati
WHERE salariu < (SELECT AVG(salariu) 
                 FROM angajati AS A2 
                 WHERE A2.departament = angajati.departament);
SELECT ROW_COUNT();
```

**Explicație:**

1. **DELETE FROM angajati**: Această clauză specifică tabela din care se vor șterge înregistrările (în acest caz, ""angajati"").
2. **WHERE salariu < (subinterogare)**: Această clauză specifică condiția pentru ștergerea înregistrărilor. Doar înregistrările care îndeplinesc această condiție vor fi șterse.
3. **Subinterogarea (SELECT AVG(salariu)...)**: Această subinterogare calculează salariul mediu pentru fiecare departament.
4. **A2.departament = angajati.departament**:  Această condiție din subinterogare asigură că salariul mediu este calculat pentru departamentul corespunzător fiecărui angajat.
5. **SELECT ROW_COUNT()**: Această funcție returnează numărul de rânduri afectate de ultima operațiune, în acest caz, ștergerea.

**Notă:** 

* Această interogare este un exemplu generic și sintaxa poate varia în funcție de sistemul de gestionare a bazelor de date (DBMS) utilizat. 
* Asigurați-vă că aveți o copie de rezervă a datelor înainte de a executa orice interogare DELETE. 
",Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']","Contextul furnizat nu oferă informații despre ștergerea angajaților dintr-o bază de date. Exemplul cel mai apropiat se referă la găsirea angajaților cu un salariu mai mare decât salariul mediu al departamentului lor. 

Pentru a șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și a returna numărul de rânduri afectate, ar trebui utilizată o interogare de tip DELETE cu o subinterogare. Iată un exemplu de astfel de interogare:

```sql
DELETE FROM angajati
WHERE salariu < (SELECT AVG(salariu) 
                 FROM angajati AS A2 
                 WHERE A2.departament = angajati.departament);
SELECT ROW_COUNT();
```

**Explicație:**

1. **DELETE FROM angajati**: Această clauză specifică tabela din care se vor șterge înregistrările (în acest caz, ""angajati"").
2. **WHERE salariu < (subinterogare)**: Această clauză specifică condiția pentru ștergerea înregistrărilor. Doar înregistrările care îndeplinesc această condiție vor fi șterse.
3. **Subinterogarea (SELECT AVG(salariu)...)**: Această subinterogare calculează salariul mediu pentru fiecare departament.
4. **A2.departament = angajati.departament**:  Această condiție din subinterogare asigură că salariul mediu este calculat pentru departamentul corespunzător fiecărui angajat.
5. **SELECT ROW_COUNT()**: Această funcție returnează numărul de rânduri afectate de ultima operațiune, în acest caz, ștergerea.

**Notă:** 

* Această interogare este un exemplu generic și sintaxa poate varia în funcție de sistemul de gestionare a bazelor de date (DBMS) utilizat. 
* Asigurați-vă că aveți o copie de rezervă a datelor înainte de a executa orice interogare DELETE. 
",DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,0.0,0.0,0.8315453878768766,0.16666666666666666,0.0,0.052830188679245285,0.14
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","```sql
UPDATE angajati
SET salariu = salariu + (0.05 * (SELECT AVG(salariu) FROM angajati WHERE departament_id = 30))
WHERE departament_id = 30;
```
","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","```sql
UPDATE angajati
SET salariu = salariu + (0.05 * (SELECT AVG(salariu) FROM angajati WHERE departament_id = 30))
WHERE departament_id = 30;
```
","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",0.0,0.0,0.8361568088316856,0.0,0.20613242702593446,0.5641025641025642,0.0
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","```sql
UPDATE nume_tabela
SET job = 'SENIOR'
WHERE data_angajarii < '01-IAN-2000';
```

Trebuie să înlocuiți ""nume_tabela"" cu numele real al tabelului care conține datele angajaților. De asemenea, asigurați-vă că formatul datei '01-IAN-2000' corespunde cu formatul datei din baza de date. 
",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","```sql
UPDATE nume_tabela
SET job = 'SENIOR'
WHERE data_angajarii < '01-IAN-2000';
```

Trebuie să înlocuiți ""nume_tabela"" cu numele real al tabelului care conține datele angajaților. De asemenea, asigurați-vă că formatul datei '01-IAN-2000' corespunde cu formatul datei din baza de date. 
","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",0.0,0.0,0.8433708484356327,0.0,0.041195663031027153,0.2,0.0
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']","I'm sorry, I cannot provide the weather forecast for Galați based on the context you provided. The context seems to contain a list of repetitive phrases and numbers that are not related to weather information. 

To get accurate weather information, I recommend checking a reliable weather app or website. 
",Cum e vremea la galati ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']","I'm sorry, I cannot provide the weather forecast for Galați based on the context you provided. The context seems to contain a list of repetitive phrases and numbers that are not related to weather information. 

To get accurate weather information, I recommend checking a reliable weather app or website. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.6,0.0,0.0,0.5
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']","I'm sorry, I cannot answer your question using the text provided. The text appears to be a list of questions and numbers that do not relate to Michael Jackson's lifespan. 
",Cati ani a trait Michael Jackson ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']","I'm sorry, I cannot answer your question using the text provided. The text appears to be a list of questions and numbers that do not relate to Michael Jackson's lifespan. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,0.67
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","I'm sorry, but I cannot answer your question based on the context you provided. The context seems to be a list of repeated phrases (""Întrebări?\n"" followed by a number) and does not contain information about a book. 

Please provide me with more context or rephrase your question. 
",Ce o carte ?,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","I'm sorry, but I cannot answer your question based on the context you provided. The context seems to be a list of repeated phrases (""Întrebări?\n"" followed by a number) and does not contain information about a book. 

Please provide me with more context or rephrase your question. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,0.5
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']","The provided context contains a list of document titles related to databases. It does not have the information needed to answer the question ""Cat face 2 + 2 ?"".  The answer to 2+2 is 4. 
",Cat face 2 + 2 ?,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']","The provided context contains a list of document titles related to databases. It does not have the information needed to answer the question ""Cat face 2 + 2 ?"".  The answer to 2+2 is 4. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.8882559037166161,0.6666666666666666,0.0,0.0,0.5
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Nu există informații despre bazele de date distribuite și NoSQL în contextul furnizat. Prin urmare, nu pot răspunde la întrebarea ta. 
",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Nu există informații despre bazele de date distribuite și NoSQL în contextul furnizat. Prin urmare, nu pot răspunde la întrebarea ta. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.5,0.03673526562988939,0.18750000000000003,1.0
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']","Nu există informații despre bazele de date NoSQL în contextul furnizat. Contextul se concentrează pe limbajul SQL și concepte ale bazelor de date relaționale. 
",Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']","Nu există informații despre bazele de date NoSQL în contextul furnizat. Contextul se concentrează pe limbajul SQL și concepte ale bazelor de date relaționale. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.04456882760699063,0.1142857142857143,0.67
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Informațiile furnizate în context nu oferă detalii despre bazele de date distribuite sau NoSQL. Textul se concentrează pe indicii bazați pe expresii în contextul limbajului SQL, fără a face referire la avantajele sau dezavantajele bazelor de date distribuite față de cele NoSQL. 

Pentru a putea răspunde la întrebarea ta, ar fi nevoie de informații suplimentare despre:

* **Baze de date distribuite:** Caracteristicile, avantajele și dezavantajele lor.
* **Baze de date NoSQL:**  Tipuri de baze de date NoSQL,  avantajele și dezavantajele lor.

Odată ce avem aceste informații, putem compara cele două tipuri de baze de date și identifica scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL. 
",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Informațiile furnizate în context nu oferă detalii despre bazele de date distribuite sau NoSQL. Textul se concentrează pe indicii bazați pe expresii în contextul limbajului SQL, fără a face referire la avantajele sau dezavantajele bazelor de date distribuite față de cele NoSQL. 

Pentru a putea răspunde la întrebarea ta, ar fi nevoie de informații suplimentare despre:

* **Baze de date distribuite:** Caracteristicile, avantajele și dezavantajele lor.
* **Baze de date NoSQL:**  Tipuri de baze de date NoSQL,  avantajele și dezavantajele lor.

Odată ce avem aceste informații, putem compara cele două tipuri de baze de date și identifica scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.028398387225677894,0.046511627906976744,0.73
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Îmi pare rău, dar contextul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit. Textul pare să se axeze pe limbajul SQL și componentele unui sistem de baze de date relaționale.  
",Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Îmi pare rău, dar contextul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit. Textul pare să se axeze pe limbajul SQL și componentele unui sistem de baze de date relaționale.  
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.01914603069010251,0.07692307692307693,0.67
