,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5']","Din contextul furnizat, nu există informații care să sugereze un model de organizare a datelor predominant în curs. Contextul se referă la structura cursului de Baze de date, menționând numărul de capitole și laboratoare, precum și la subiectele abordate, precum subcereri corelate și vederi. Nu se specifică un model de organizare a datelor, cum ar fi relațional, hierarhic, rețea sau NoSQL. 
","În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5']","Din contextul furnizat, nu există informații care să sugereze un model de organizare a datelor predominant în curs. Contextul se referă la structura cursului de Baze de date, menționând numărul de capitole și laboratoare, precum și la subiectele abordate, precum subcereri corelate și vederi. Nu se specifică un model de organizare a datelor, cum ar fi relațional, hierarhic, rețea sau NoSQL. 
",relațional,0.0,0.0,0.0,1.0,0.0,0.05797101449275362,0.0
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este **PL/SQL**. 
",Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)']","Limbajul integrat în Oracle utilizat pentru scrierea procedurilor stocate este **PL/SQL**. 
",PL/SQL,0.99999999995,1.0,0.8906415124105985,1.0,0.08513012360883548,0.2857142857142857,0.0
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre clauzele SQL folosite pentru filtrarea rândurilor dintr-o interogare. 
",Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre clauzele SQL folosite pentru filtrarea rândurilor dintr-o interogare. 
",WHERE,0.0,0.0,0.0,1.0,0.0,0.0,0.0
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date']","Contextul furnizat nu conține informații despre funcția SQL care transformă șirurile de caractere în majuscule. 
",Ce funcție SQL transformă șirurile de caractere în majuscule?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date']","Contextul furnizat nu conține informații despre funcția SQL care transformă șirurile de caractere în majuscule. 
",UPPER,0.0,0.0,0.0,1.0,0.0,0.0,1.0
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25\n']","Înregistrările se grupează folosind **clauza HAVING**. 
",Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45\n', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25\n']","Înregistrările se grupează folosind **clauza HAVING**. 
",GROUP BY,0.0,0.0,0.9142351325235882,0.0,0.0,0.0,0.0
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52']","Contextul furnizat nu oferă informații despre un tip specific de subinterogare care returnează o singură valoare pentru o condiție din clauza WHERE. Textul se concentrează pe subinterogări corelate, operatorul ALL și clauza WITH CHECK OPTION, fără a menționa o subinterogare cu funcția descrisă în prompt. 
",Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52']","Contextul furnizat nu oferă informații despre un tip specific de subinterogare care returnează o singură valoare pentru o condiție din clauza WHERE. Textul se concentrează pe subinterogări corelate, operatorul ALL și clauza WITH CHECK OPTION, fără a menționa o subinterogare cu funcția descrisă în prompt. 
",subinterogare single-row,0.0,0.0,0.0,1.0,0.017272237992167868,0.037037037037037035,0.67
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Contextul furnizat nu oferă informații specifice despre instrucțiunile SQL care permit inserarea sau actualizarea condiționată a datelor. 

Pentru a insera sau actualiza date condiționat, se folosesc instrucțiunile `INSERT` și `UPDATE` cu clauza `WHERE`. De exemplu:

* **Inserare condiționată:**
```sql
INSERT INTO Tabel (Coloana1, Coloana2)
SELECT Valoare1, Valoare2
FROM Tabel2
WHERE Conditie;
```
* **Actualizare condiționată:**
```sql
UPDATE Tabel
SET Coloana1 = Valoare1, Coloana2 = Valoare2
WHERE Conditie;
```

Pentru mai multe detalii, vă rugăm să consultați documentația specifică a sistemului de gestionare a bazelor de date pe care îl utilizați. 
",Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Contextul furnizat nu oferă informații specifice despre instrucțiunile SQL care permit inserarea sau actualizarea condiționată a datelor. 

Pentru a insera sau actualiza date condiționat, se folosesc instrucțiunile `INSERT` și `UPDATE` cu clauza `WHERE`. De exemplu:

* **Inserare condiționată:**
```sql
INSERT INTO Tabel (Coloana1, Coloana2)
SELECT Valoare1, Valoare2
FROM Tabel2
WHERE Conditie;
```
* **Actualizare condiționată:**
```sql
UPDATE Tabel
SET Coloana1 = Valoare1, Coloana2 = Valoare2
WHERE Conditie;
```

Pentru mai multe detalii, vă rugăm să consultați documentația specifică a sistemului de gestionare a bazelor de date pe care îl utilizați. 
",MERGE,0.0,0.0,0.8939727728608928,0.2,0.0,0.0,0.4
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**. 
",Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14']","Constrângerea SQL care impune ca o coloană să nu accepte valori NULL este **NOT NULL**. 
",NOT NULL,0.19999999998,1.0,0.8434551732225045,1.0,0.040488925321331026,0.2222222222222222,0.67
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține o instrucțiune SQL specifică pentru crearea unei vederi. El menționează doar că o vedere este generată de o cerere SQL, dar nu oferă detalii despre sintaxa SQL. 
","Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține o instrucțiune SQL specifică pentru crearea unei vederi. El menționează doar că o vedere este generată de o cerere SQL, dar nu oferă detalii despre sintaxa SQL. 
",CREATE VIEW,0.0,1.0,0.0,1.0,0.0,0.0,0.8
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre obiectele SQL sau despre generarea de valori unice. Prin urmare, nu pot răspunde la întrebarea dumneavoastră. 
","Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu conține informații despre obiectele SQL sau despre generarea de valori unice. Prin urmare, nu pot răspunde la întrebarea dumneavoastră. 
",SEQUENCE,0.0,0.0,0.0,0.6666666666666666,0.0,0.0,0.8
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu oferă informații specifice despre instrucțiunea SQL folosită pentru a crea un utilizator nou în Oracle. Deși menționează securitate sporită prin niveluri de parolare, nu specifică instrucțiunile SQL pentru gestionarea utilizatorilor. 

Pentru a crea un utilizator nou în Oracle, se folosește instrucțiunea **CREATE USER**. Instrucțiunea **CREATE USER** este urmată de numele utilizatorului și o listă de opțiuni, cum ar fi parola, rolul atribuit și alte setări de securitate. 

Exemplu:

```sql
CREATE USER new_user IDENTIFIED BY ""parola_noua"";
```

Această instrucțiune creează un utilizator nou numit ""new_user"" cu parola ""parola_noua"".

Pentru a atribui un rol utilizatorului nou creat, se folosește instrucțiunea **GRANT**:

```sql
GRANT role_name TO new_user;
```

unde ""role_name"" este numele rolului pe care dorim să îl atribuim utilizatorului.

Pentru informații detaliate despre instrucțiunile SQL pentru gestionarea utilizatorilor în Oracle, vă recomand să consultați documentația oficială Oracle. 
","Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Contextul furnizat nu oferă informații specifice despre instrucțiunea SQL folosită pentru a crea un utilizator nou în Oracle. Deși menționează securitate sporită prin niveluri de parolare, nu specifică instrucțiunile SQL pentru gestionarea utilizatorilor. 

Pentru a crea un utilizator nou în Oracle, se folosește instrucțiunea **CREATE USER**. Instrucțiunea **CREATE USER** este urmată de numele utilizatorului și o listă de opțiuni, cum ar fi parola, rolul atribuit și alte setări de securitate. 

Exemplu:

```sql
CREATE USER new_user IDENTIFIED BY ""parola_noua"";
```

Această instrucțiune creează un utilizator nou numit ""new_user"" cu parola ""parola_noua"".

Pentru a atribui un rol utilizatorului nou creat, se folosește instrucțiunea **GRANT**:

```sql
GRANT role_name TO new_user;
```

unde ""role_name"" este numele rolului pe care dorim să îl atribuim utilizatorului.

Pentru informații detaliate despre instrucțiunile SQL pentru gestionarea utilizatorilor în Oracle, vă recomand să consultați documentația oficială Oracle. 
",CREATE USER,0.0,0.0,0.8616366324425818,0.25,0.0,0.02469135802469136,0.17
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22']","Din contextul furnizat, modelul de baze de date care organizează datele în tabele interconectate este **modelul relaţional**.  Deși nu este explicat în mod direct, textul menționează că ""Datele individuale sunt stocate în mulțimi de date relaționate (legate) numite înregistrări"", ceea ce indică un model de baze de date unde relațiile dintre date sunt esențiale. 
","Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22']","Din contextul furnizat, modelul de baze de date care organizează datele în tabele interconectate este **modelul relaţional**.  Deși nu este explicat în mod direct, textul menționează că ""Datele individuale sunt stocate în mulțimi de date relaționate (legate) numite înregistrări"", ceea ce indică un model de baze de date unde relațiile dintre date sunt esențiale. 
",relațional,0.0,1.0,0.8708522725243987,0.3333333333333333,0.0,0.0625,0.0
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Cuvântul cheie SQL care definește o cheie primară este **PRIMARY KEY**. 

Această clauză este folosită în definiția tabelei pentru a specifica coloana sau combinația de coloane care identifică în mod unic fiecare înregistrare din tabel. 
",Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Cuvântul cheie SQL care definește o cheie primară este **PRIMARY KEY**. 

Această clauză este folosită în definiția tabelei pentru a specifica coloana sau combinația de coloane care identifică în mod unic fiecare înregistrare din tabel. 
",PRIMARY KEY,0.99999999995,1.0,0.8598079106381027,0.3333333333333333,0.052559234208168874,0.09756097560975609,0.67
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47']","Din contextul furnizat, nu se poate identifica exact etapa din proiectarea bazelor de date relaționale care transformă modelul conceptual în modelul relațional. 

Contextul furnizează informații despre modelul relațional, dar nu menționează etapele specifice din procesul de proiectare. 

Pentru a răspunde la întrebarea dumneavoastră, ar fi necesare informații suplimentare despre etapele de proiectare a bazelor de date relaționale. 
","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47']","Din contextul furnizat, nu se poate identifica exact etapa din proiectarea bazelor de date relaționale care transformă modelul conceptual în modelul relațional. 

Contextul furnizează informații despre modelul relațional, dar nu menționează etapele specifice din procesul de proiectare. 

Pentru a răspunde la întrebarea dumneavoastră, ar fi necesare informații suplimentare despre etapele de proiectare a bazelor de date relaționale. 
",modelarea logică,0.0,0.0,0.0,1.0,0.0,0.0,0.86
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66']","Din contextul furnizat, nu există o definiție explicită a unei baze de date. Contextul se concentrează pe obiectele care pot exista într-o bază de date (tabele, vederi, secvențe, indici, sinonime) și pe gestionarea privilegiilor de acces. 

Totuși, se poate deduce că o bază de date este un sistem care stochează și organizează informații într-un mod structurat, permițând accesul și manipularea datelor de către utilizatori. 

Pentru o definiție mai precisă a unei baze de date, este necesară consultarea altor resurse sau manuale de specialitate.
","Ce este o bază de date, conform cursului?","['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66']","Din contextul furnizat, nu există o definiție explicită a unei baze de date. Contextul se concentrează pe obiectele care pot exista într-o bază de date (tabele, vederi, secvențe, indici, sinonime) și pe gestionarea privilegiilor de acces. 

Totuși, se poate deduce că o bază de date este un sistem care stochează și organizează informații într-un mod structurat, permițând accesul și manipularea datelor de către utilizatori. 

Pentru o definiție mai precisă a unei baze de date, este necesară consultarea altor resurse sau manuale de specialitate.
","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",0.0,0.0,0.0,0.8333333333333334,0.034962165985293156,0.1929824561403509,0.4
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date']","Din contextul furnizat, Oracle reprezintă un sistem de gestionare a bazelor de date (SGBD), mai precis, Oracle Database 11g Express Edition.  Acest SGBD este utilizat în cursul prezentat, iar în context se menționează pașii de instalare și configurare ai acestuia. 
",Ce reprezintă Oracle în cursul prezentat?,"['2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date']","Din contextul furnizat, Oracle reprezintă un sistem de gestionare a bazelor de date (SGBD), mai precis, Oracle Database 11g Express Edition.  Acest SGBD este utilizat în cursul prezentat, iar în context se menționează pașii de instalare și configurare ai acestuia. 
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",0.0,0.0,0.8631382832686835,0.4,0.023497215931088396,0.125,0.25
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8']","Clauza ORDER BY într-o interogare SELECT este folosită pentru a sorta rezultatele interogării în funcție de una sau mai multe coloane. 
",Ce face clauza ORDER BY într-o interogare SELECT?,"['copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8']","Clauza ORDER BY într-o interogare SELECT este folosită pentru a sorta rezultatele interogării în funcție de una sau mai multe coloane. 
","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",0.99999999998,1.0,0.8506681089608374,1.0,0.04319402267866687,0.186046511627907,0.5
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Din păcate, contextul furnizat nu conține informații despre cum se împart funcțiile în SQL. Contextul menționează doar informații generale despre un curs de Baze de date ținut de Adrian Runceanu la Universitatea Constantin Brâncuși din Târgu-Jiu.  

Pentru a răspunde la întrebarea ta, am nevoie de mai multe informații din acel curs. 
","În ce două categorii se împart funcțiile în SQL, conform cursului?","['Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Din păcate, contextul furnizat nu conține informații despre cum se împart funcțiile în SQL. Contextul menționează doar informații generale despre un curs de Baze de date ținut de Adrian Runceanu la Universitatea Constantin Brâncuși din Târgu-Jiu.  

Pentru a răspunde la întrebarea ta, am nevoie de mai multe informații din acel curs. 
",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,0.0,0.0,0.0,0.75,0.031251907639724415,0.20224719101123595,0.0
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Din păcate, contextul furnizat nu definește ce sunt funcțiile de grup în SQL.  Contextul se concentrează pe ordinea de execuție a funcțiilor de grup,  dar nu explică ce sunt acestea.  

Pentru a înțelege ce sunt funcțiile de grup, ar trebui să consultați alte resurse sau să continuați parcurgerea cursului.
","Ce sunt funcțiile de grup în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Din păcate, contextul furnizat nu definește ce sunt funcțiile de grup în SQL.  Contextul se concentrează pe ordinea de execuție a funcțiilor de grup,  dar nu explică ce sunt acestea.  

Pentru a înțelege ce sunt funcțiile de grup, ar trebui să consultați alte resurse sau să continuați parcurgerea cursului.
","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",0.0,0.0,0.0,0.8,0.04397859138907084,0.19753086419753085,0.0
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10']","O subinterogare (subquery) în SQL este o instrucțiune SELECT inclusă în clauza unei alte instrucțiuni SELECT. Cu alte cuvinte, este o interogare imbricată într-o interogare principală, care se execută mai întâi pentru a furniza rezultate care sunt apoi utilizate de interogarea principală.
",Ce este o subinterogare (subquery) în SQL?,"['copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10']","O subinterogare (subquery) în SQL este o instrucțiune SELECT inclusă în clauza unei alte instrucțiuni SELECT. Cu alte cuvinte, este o interogare imbricată într-o interogare principală, care se execută mai întâi pentru a furniza rezultate care sunt apoi utilizate de interogarea principală.
","O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",0.99999999995,0.0,0.8947503476922455,0.25,0.17515974350060187,0.4057971014492754,1.0
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date']","Limbajul de manipulare al datelor (DML) din SQL permite **adăugarea, actualizarea și ștergerea datelor** dintr-o bază de date. 
",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date']","Limbajul de manipulare al datelor (DML) din SQL permite **adăugarea, actualizarea și ștergerea datelor** dintr-o bază de date. 
","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",0.99999999995,1.0,0.881791634782337,1.0,0.0922635643555325,0.5,0.86
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21']","Conform cursului, constrângerea FOREIGN KEY definește o coloană sau o combinație de coloane ca foreign key și stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite. O valoare care apare într-o tabelă trebuie să se regăsească și în cea de-a doua tabelă, pe coloana unde formează cheia primară. Constrângerile de tip FOREIGN KEY pot fi definite la nivel de coloană sau tabelă. 
","Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31\n', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21']","Conform cursului, constrângerea FOREIGN KEY definește o coloană sau o combinație de coloane ca foreign key și stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite. O valoare care apare într-o tabelă trebuie să se regăsească și în cea de-a doua tabelă, pe coloana unde formează cheia primară. Constrângerile de tip FOREIGN KEY pot fi definite la nivel de coloană sau tabelă. 
","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",0.99999999998,1.0,0.8555892263964764,1.0,0.08700223397019131,0.21153846153846154,0.29
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Din contextul furnizat, putem deduce că o vedere (view) în SQL este un obiect definit de o cerere SQL care are un nume și poate fi utilizat pentru a vizualiza datele din una sau mai multe tabele.  
","Ce este o vedere (view) în SQL, conform cursului?","['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']","Din contextul furnizat, putem deduce că o vedere (view) în SQL este un obiect definit de o cerere SQL care are un nume și poate fi utilizat pentru a vizualiza datele din una sau mai multe tabele.  
","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",0.49999999995,0.0,0.9741285792008137,0.6666666666666666,0.014943489981430611,0.22580645161290325,0.67
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices']","Potrivit cursului, secvențele sunt folosite pentru a genera valori unice, incrementale pentru coloanele din tabele. Un exemplu este folosirea secvenței `dept_seq_1` în instrucțiunea `INSERT` pentru a genera o valoare unică pentru coloana `deptno` din tabela `dept`. 
","De ce se folosesc secvențele în SQL, potrivit cursului?","['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18\n"", 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices']","Potrivit cursului, secvențele sunt folosite pentru a genera valori unice, incrementale pentru coloanele din tabele. Un exemplu este folosirea secvenței `dept_seq_1` în instrucțiunea `INSERT` pentru a genera o valoare unică pentru coloana `deptno` din tabela `dept`. 
","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",0.4166666666458333,0.0,0.9322339064738765,0.6666666666666666,0.05439330544349821,0.13793103448275862,0.4
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, securitatea bazei de date poate fi clasificată în două categorii: 
1) securitatea sistemului
2) securitatea datelor. 
","Ce acoperă securitatea bazei de date, conform cursului?","['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Conform cursului, securitatea bazei de date poate fi clasificată în două categorii: 
1) securitatea sistemului
2) securitatea datelor. 
","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",0.4166666666458333,1.0,0.825976615427061,1.0,0.06908895196867147,0.20512820512820512,0.0
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Din păcate, contextul furnizat nu conține informații explicite despre avantajele bazelor de date față de fișierele tradiționale. Contextul se concentrează pe aplicații ale bazelor de date, pe tipurile de obiecte din baza de date și pe administrarea accesului la date. 
","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4']","Din păcate, contextul furnizat nu conține informații explicite despre avantajele bazelor de date față de fișierele tradiționale. Contextul se concentrează pe aplicații ale bazelor de date, pe tipurile de obiecte din baza de date și pe administrarea accesului la date. 
","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",0.0,0.0,0.0,1.0,0.021476912089159056,0.06666666666666667,0.22
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34']","Modelul relațional de baze de date, conform cursului, este caracterizat de:

* **Structură:** Schema bazei de date este o colecție de scheme de relații, iar baza de date în sine este o colecție de relații.
* **Integritate:** Se bazează pe conceptul de chei primare și chei străine pentru a asigura integritatea datelor.
* **Manipulare:** Se folosește algebra relațională și calculul relațional pentru a manipula datele. 
","Ce caracteristici are modelul relațional de baze de date, conform cursului?","['copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34']","Modelul relațional de baze de date, conform cursului, este caracterizat de:

* **Structură:** Schema bazei de date este o colecție de scheme de relații, iar baza de date în sine este o colecție de relații.
* **Integritate:** Se bazează pe conceptul de chei primare și chei străine pentru a asigura integritatea datelor.
* **Manipulare:** Se folosește algebra relațională și calculul relațional pentru a manipula datele. 
","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",0.99999999995,0.6666666666666666,0.8955768632852007,1.0,0.027225183711135005,0.25263157894736843,0.29
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48']","Contextul furnizat nu include informații despre etapele proiectării bazelor de date relaționale.  
","Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48']","Contextul furnizat nu include informații despre etapele proiectării bazelor de date relaționale.  
","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",0.0,0.0,0.0,1.0,0.0,0.0625,0.0
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19']","Contextul furnizat nu oferă informații specifice despre avantajele modelului relațional față de alte modele de baze de date. De aceea, nu pot răspunde la solicitarea dumneavoastră. 
","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19']","Contextul furnizat nu oferă informații specifice despre avantajele modelului relațional față de alte modele de baze de date. De aceea, nu pot răspunde la solicitarea dumneavoastră. 
","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",0.0,0.0,0.0,1.0,0.012985765502508118,0.13114754098360656,0.57
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date']","Oracle este un sistem de gestiune a bazelor de date (SGBD) relațional extins, cu elemente din tehnologia orientată obiect (OO). A fost dezvoltat de Oracle Corporation, înființată în 1977 în SUA. Este operațional pe o gamă largă de calculatoare, sub diverse sisteme de operare, și este unul dintre cei mai mari furnizori de software de gestiune a datelor.

**Evoluția:**

- **Inițial:** Oracle era un SGBD relațional, concentrându-se pe stocarea și gestionarea eficientă a datelor într-un format tabelar.
- **Dezvoltarea orientată obiect:** Oracle a integrat concepte din programarea orientată obiect, oferind o mai bună modularitate, reutilizare a codului și gestionare a complexității.
- **Extinderea funcționalității:** Oracle a adăugat noi caracteristici, precum:
    - Gestionarea datelor spațiale și temporale
    - Analize complexe și rapoarte
    - Securitate îmbunătățită
    - Integrare cu diverse tehnologii și platforme

**Diferențe față de alte tipuri de baze de date moderne:**

- **Relațional vs. NoSQL:** Oracle este un SGBD relațional, orientat către stocarea și gestionarea datelor structurate, în timp ce NoSQL este un tip de bază de date non-relațională, mai potrivită pentru date ne-structurate sau semi-structurate.
- **Scalabilitate:** Oracle este cunoscut pentru scalabilitatea sa verticală, care implică adăugarea de resurse (CPU, memorie) la un singur server. Unele baze de date moderne, precum MongoDB, oferă scalabilitate orizontală, distribuind date pe mai multe servere.
- **Performanță:** Performanța Oracle poate varia în funcție de configurație și sarcina de lucru. Baze de date moderne, precum Redis și Cassandra, sunt proiectate pentru performanță ridicată, în special în operațiuni de citire.
- **Cost:** Oracle este cunoscut pentru costurile sale mai mari, atât pentru licențe, cât și pentru întreținere. Baze de date open source, precum MySQL și PostgreSQL, oferă alternative mai accesibile.

**Concluzie:**

Oracle este un SGBD matur și robust, cu o gamă largă de funcționalități și o comunitate vastă de utilizatori.  Alegerea tipului de bază de date depinde de cerințele specifice ale aplicației, cum ar fi tipul de date, performanța necesară, scalabilitatea și costul.
",Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date']","Oracle este un sistem de gestiune a bazelor de date (SGBD) relațional extins, cu elemente din tehnologia orientată obiect (OO). A fost dezvoltat de Oracle Corporation, înființată în 1977 în SUA. Este operațional pe o gamă largă de calculatoare, sub diverse sisteme de operare, și este unul dintre cei mai mari furnizori de software de gestiune a datelor.

**Evoluția:**

- **Inițial:** Oracle era un SGBD relațional, concentrându-se pe stocarea și gestionarea eficientă a datelor într-un format tabelar.
- **Dezvoltarea orientată obiect:** Oracle a integrat concepte din programarea orientată obiect, oferind o mai bună modularitate, reutilizare a codului și gestionare a complexității.
- **Extinderea funcționalității:** Oracle a adăugat noi caracteristici, precum:
    - Gestionarea datelor spațiale și temporale
    - Analize complexe și rapoarte
    - Securitate îmbunătățită
    - Integrare cu diverse tehnologii și platforme

**Diferențe față de alte tipuri de baze de date moderne:**

- **Relațional vs. NoSQL:** Oracle este un SGBD relațional, orientat către stocarea și gestionarea datelor structurate, în timp ce NoSQL este un tip de bază de date non-relațională, mai potrivită pentru date ne-structurate sau semi-structurate.
- **Scalabilitate:** Oracle este cunoscut pentru scalabilitatea sa verticală, care implică adăugarea de resurse (CPU, memorie) la un singur server. Unele baze de date moderne, precum MongoDB, oferă scalabilitate orizontală, distribuind date pe mai multe servere.
- **Performanță:** Performanța Oracle poate varia în funcție de configurație și sarcina de lucru. Baze de date moderne, precum Redis și Cassandra, sunt proiectate pentru performanță ridicată, în special în operațiuni de citire.
- **Cost:** Oracle este cunoscut pentru costurile sale mai mari, atât pentru licențe, cât și pentru întreținere. Baze de date open source, precum MySQL și PostgreSQL, oferă alternative mai accesibile.

**Concluzie:**

Oracle este un SGBD matur și robust, cu o gamă largă de funcționalități și o comunitate vastă de utilizatori.  Alegerea tipului de bază de date depinde de cerințele specifice ale aplicației, cum ar fi tipul de date, performanța necesară, scalabilitatea și costul.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",0.249999999975,0.5,0.8438027509875573,0.24324324324324326,0.08669811843700477,0.11023622047244094,0.17
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31']","Contextul furnizat nu oferă informații specifice despre cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare. Aceste aspecte necesită o înțelegere mai profundă a limbajului SQL și a funcționării bazelor de date. 

Pentru a obține rezultate sumare, trebuie să combinați clauzele WHERE, ORDER BY și funcțiile agregate într-un mod specific:

* **Clauza WHERE** filtrează datele din tabelul sursă, selectând doar liniile care îndeplinesc condițiile specificate. Aceasta permite  limitarea datelor pe care funcțiile agregate le vor prelucra.
* **Funcțiile agregate** (SUM, AVG, COUNT, MAX, MIN etc.) calculează valori rezumate din seturile de date filtrate. 
* **Clauza ORDER BY** sortează rezultatele finale în funcție de anumite criterii. Aceasta este opțională, dar poate fi utilă pentru a organiza rezultatele sumare într-o manieră logică.

De exemplu, pentru a calcula suma tuturor valorilor din coloana ""pret"" din tabelul ""produse"" pentru produsele cu un ""cod_categorie"" egal cu ""10"", ați utiliza o instrucțiune SQL similară cu aceasta:

```sql
SELECT SUM(pret) AS total_pret
FROM produse
WHERE cod_categorie = 10
ORDER BY total_pret DESC;
```

Această instrucțiune folosește:

* **WHERE** pentru a filtra liniile din tabelul ""produse"" la cele cu ""cod_categorie"" egal cu ""10"".
* **SUM(pret)** pentru a calcula suma tuturor valorilor din coloana ""pret"" din setul de date filtrat.
* **ORDER BY** pentru a sorta rezultatele finale în ordine descendentă (DESC) în funcție de suma ""total_pret"".

Prin urmare, combinarea clauzelor WHERE, ORDER BY și funcțiilor agregate este esențială pentru a obține rezultate sumare precise și informativă.
","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31']","Contextul furnizat nu oferă informații specifice despre cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare. Aceste aspecte necesită o înțelegere mai profundă a limbajului SQL și a funcționării bazelor de date. 

Pentru a obține rezultate sumare, trebuie să combinați clauzele WHERE, ORDER BY și funcțiile agregate într-un mod specific:

* **Clauza WHERE** filtrează datele din tabelul sursă, selectând doar liniile care îndeplinesc condițiile specificate. Aceasta permite  limitarea datelor pe care funcțiile agregate le vor prelucra.
* **Funcțiile agregate** (SUM, AVG, COUNT, MAX, MIN etc.) calculează valori rezumate din seturile de date filtrate. 
* **Clauza ORDER BY** sortează rezultatele finale în funcție de anumite criterii. Aceasta este opțională, dar poate fi utilă pentru a organiza rezultatele sumare într-o manieră logică.

De exemplu, pentru a calcula suma tuturor valorilor din coloana ""pret"" din tabelul ""produse"" pentru produsele cu un ""cod_categorie"" egal cu ""10"", ați utiliza o instrucțiune SQL similară cu aceasta:

```sql
SELECT SUM(pret) AS total_pret
FROM produse
WHERE cod_categorie = 10
ORDER BY total_pret DESC;
```

Această instrucțiune folosește:

* **WHERE** pentru a filtra liniile din tabelul ""produse"" la cele cu ""cod_categorie"" egal cu ""10"".
* **SUM(pret)** pentru a calcula suma tuturor valorilor din coloana ""pret"" din setul de date filtrat.
* **ORDER BY** pentru a sorta rezultatele finale în ordine descendentă (DESC) în funcție de suma ""total_pret"".

Prin urmare, combinarea clauzelor WHERE, ORDER BY și funcțiilor agregate este esențială pentru a obține rezultate sumare precise și informativă.
","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",0.0,0.0,0.8877652206369802,0.3076923076923077,0.055878916532454005,0.10759493670886075,0.35
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Contextul furnizat nu conține informații despre funcțiile UPPER, LOWER și INITCAP. Aceste funcții sunt folosite pentru manipularea șirurilor de caractere în limbaje de programare și baze de date, dar nu sunt menționate în contextul dat. 

Pentru a răspunde la întrebarea dumneavoastră, ar trebui să furnizați un context mai amplu sau un material care să conțină informații specifice despre aceste funcții. 
","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Contextul furnizat nu conține informații despre funcțiile UPPER, LOWER și INITCAP. Aceste funcții sunt folosite pentru manipularea șirurilor de caractere în limbaje de programare și baze de date, dar nu sunt menționate în contextul dat. 

Pentru a răspunde la întrebarea dumneavoastră, ar trebui să furnizați un context mai amplu sau un material care să conțină informații specifice despre aceste funcții. 
","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",0.0,0.0,0.0,0.4,0.3170233138523431,0.18518518518518517,0.2
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15']","O subinterogare single-row este o subinterogare care returnează o singură valoare. Această valoare este apoi comparată cu o valoare din clauza WHERE a interogării principale. Mecanismul de execuție al unei subinterogări single-row este următorul:

1. **Execuția subinterogării:** Subinterogarea este executată prima dată, rezultând o singură valoare.
2. **Compararea valorii:** Valoarea returnată de subinterogare este comparată cu o valoare din clauza WHERE a interogării principale.
3. **Evaluarea condiției:** Condiția din clauza WHERE este evaluată. Dacă condiția este adevărată, rândul curent este inclus în rezultatul interogării principale.

**Integrarea subinterogărilor single-row în clauza WHERE:**

Subinterogările single-row sunt integrate în clauza WHERE folosind operatori de comparare single-row, cum ar fi:

* **= (egal cu)**
* **> (mai mare decât)**
* **< (mai mic decât)**
* **>= (mai mare sau egal cu)**
* **<= (mai mic sau egal cu)**
* **!= (diferit de)**

**Exemplu:**

```sql
SELECT *
FROM angajati
WHERE salariu = (SELECT MAX(salariu) FROM angajati);
```

În acest exemplu, subinterogarea `(SELECT MAX(salariu) FROM angajati)` returnează salariul maxim din tabelul `angajati`. Această valoare este apoi comparată cu salariul fiecărui angajat din tabelul `angajati`. Doar angajații cu salariul egal cu salariul maxim vor fi incluși în rezultatul interogării principale.

**Concluzie:**

Subinterogările single-row sunt un instrument puternic pentru a efectua comparații complexe în clauza WHERE. Ele pot fi utilizate pentru a găsi valori specifice sau pentru a verifica existența anumitor valori în tabelele din baza de date.
",Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15']","O subinterogare single-row este o subinterogare care returnează o singură valoare. Această valoare este apoi comparată cu o valoare din clauza WHERE a interogării principale. Mecanismul de execuție al unei subinterogări single-row este următorul:

1. **Execuția subinterogării:** Subinterogarea este executată prima dată, rezultând o singură valoare.
2. **Compararea valorii:** Valoarea returnată de subinterogare este comparată cu o valoare din clauza WHERE a interogării principale.
3. **Evaluarea condiției:** Condiția din clauza WHERE este evaluată. Dacă condiția este adevărată, rândul curent este inclus în rezultatul interogării principale.

**Integrarea subinterogărilor single-row în clauza WHERE:**

Subinterogările single-row sunt integrate în clauza WHERE folosind operatori de comparare single-row, cum ar fi:

* **= (egal cu)**
* **> (mai mare decât)**
* **< (mai mic decât)**
* **>= (mai mare sau egal cu)**
* **<= (mai mic sau egal cu)**
* **!= (diferit de)**

**Exemplu:**

```sql
SELECT *
FROM angajati
WHERE salariu = (SELECT MAX(salariu) FROM angajati);
```

În acest exemplu, subinterogarea `(SELECT MAX(salariu) FROM angajati)` returnează salariul maxim din tabelul `angajati`. Această valoare este apoi comparată cu salariul fiecărui angajat din tabelul `angajati`. Doar angajații cu salariul egal cu salariul maxim vor fi incluși în rezultatul interogării principale.

**Concluzie:**

Subinterogările single-row sunt un instrument puternic pentru a efectua comparații complexe în clauza WHERE. Ele pot fi utilizate pentru a găsi valori specifice sau pentru a verifica existența anumitor valori în tabelele din baza de date.
","O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",0.19999999998,0.5,0.8218359472477359,0.1,0.09615427950075314,0.15172413793103448,0.44
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28']","Contextul furnizat nu conține informații despre instrucțiunea UPDATE combinată cu subinterogări. Prin urmare, nu pot răspunde la solicitarea ta.
",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28']","Contextul furnizat nu conține informații despre instrucțiunea UPDATE combinată cu subinterogări. Prin urmare, nu pot răspunde la solicitarea ta.
",UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,0.0,0.0,0.0,0.5,0.04456882760699063,0.10526315789473685,0.0
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24']","Constrângerile de integritate, cum ar fi PRIMARY KEY, FOREIGN KEY și CHECK, asigură securitatea și consistența datelor într-o bază de date prin impunerea unor reguli specifice asupra datelor introduse:

* **PRIMARY KEY:**  Aceasta garantează unicitatea fiecărei înregistrări dintr-un tabel. De exemplu, într-un tabel de clienți, ""ID-ul clientului"" ar putea fi definit ca o cheie primară, asigurându-se că fiecare client are un ID unic. Aceasta previne duplicarea datelor și asigură referențialitate corectă. 
* **FOREIGN KEY:** Aceasta asigură integritatea referențială între tabele, stabilind o relație între o coloană dintr-un tabel (tabelul ""copil"") și cheia primară din alt tabel (tabelul ""părinte""). De exemplu, într-un tabel de comenzi, o coloană ""ID Client"" ar putea fi definită ca o cheie străină care se referă la cheia primară ""ID"" din tabelul de clienți. Astfel, se asigură că fiecare comandă are un client existent în baza de date.
* **CHECK:**  Această constrângere restricționează valorile acceptate într-o coloană. De exemplu, o coloană ""Vârsta"" ar putea avea o constrângere CHECK care să impună ca valorile să fie între 0 și 150. Aceasta asigură corectitudinea datelor introduse.

Prin utilizarea acestor constrângeri de integritate, se asigură:

* **Securitatea datelor:**  Constrângerile protejează baza de date de introducerea datelor incorecte sau nevalide.
* **Consistența datelor:** Se asigură că datele sunt coerente și corecte, evitând erori și contradicții.

Exemple din context:

* În tabelul ""Client"", ""ID"" este definit ca PRIMARY KEY, garantând unicitatea fiecărui client.
* În tabelul ""Comanda"", ""ClientID"" este definit ca FOREIGN KEY, referindu-se la ""ID"" din tabelul ""Client"", asigurând integritatea referențială.
* Exemplul ""ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%')"" arată o constrângere CHECK care validează formatul adresei de email. 
","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24']","Constrângerile de integritate, cum ar fi PRIMARY KEY, FOREIGN KEY și CHECK, asigură securitatea și consistența datelor într-o bază de date prin impunerea unor reguli specifice asupra datelor introduse:

* **PRIMARY KEY:**  Aceasta garantează unicitatea fiecărei înregistrări dintr-un tabel. De exemplu, într-un tabel de clienți, ""ID-ul clientului"" ar putea fi definit ca o cheie primară, asigurându-se că fiecare client are un ID unic. Aceasta previne duplicarea datelor și asigură referențialitate corectă. 
* **FOREIGN KEY:** Aceasta asigură integritatea referențială între tabele, stabilind o relație între o coloană dintr-un tabel (tabelul ""copil"") și cheia primară din alt tabel (tabelul ""părinte""). De exemplu, într-un tabel de comenzi, o coloană ""ID Client"" ar putea fi definită ca o cheie străină care se referă la cheia primară ""ID"" din tabelul de clienți. Astfel, se asigură că fiecare comandă are un client existent în baza de date.
* **CHECK:**  Această constrângere restricționează valorile acceptate într-o coloană. De exemplu, o coloană ""Vârsta"" ar putea avea o constrângere CHECK care să impună ca valorile să fie între 0 și 150. Aceasta asigură corectitudinea datelor introduse.

Prin utilizarea acestor constrângeri de integritate, se asigură:

* **Securitatea datelor:**  Constrângerile protejează baza de date de introducerea datelor incorecte sau nevalide.
* **Consistența datelor:** Se asigură că datele sunt coerente și corecte, evitând erori și contradicții.

Exemple din context:

* În tabelul ""Client"", ""ID"" este definit ca PRIMARY KEY, garantând unicitatea fiecărui client.
* În tabelul ""Comanda"", ""ClientID"" este definit ca FOREIGN KEY, referindu-se la ""ID"" din tabelul ""Client"", asigurând integritatea referențială.
* Exemplul ""ALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%')"" arată o constrângere CHECK care validează formatul adresei de email. 
","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",0.99999999995,0.5,0.8892154473721834,0.6666666666666666,0.05116348683919507,0.10434782608695652,0.61
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56']","Din contextul furnizat, nu se specifică în mod direct avantajele utilizării vederilor (views) sau cum simplifică ele interogările complexe. 

Cu toate acestea, contextul oferă informații despre crearea vederilor, menționând că subcererea care definește vederea poate conține cereri SELECT complexe, incluzând join-uri, grupuri sau alte subcereri. Aceasta sugerează că vederile pot fi folosite pentru a simplifica interogările complexe prin combinarea și prelucrarea datelor din mai multe tabele. 

Prin urmare, putem deduce că un avantaj al utilizării vederilor este acela că permit utilizatorilor să creeze interogări mai simple și mai ușor de înțeles pentru accesarea datelor complexe. 
",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56']","Din contextul furnizat, nu se specifică în mod direct avantajele utilizării vederilor (views) sau cum simplifică ele interogările complexe. 

Cu toate acestea, contextul oferă informații despre crearea vederilor, menționând că subcererea care definește vederea poate conține cereri SELECT complexe, incluzând join-uri, grupuri sau alte subcereri. Aceasta sugerează că vederile pot fi folosite pentru a simplifica interogările complexe prin combinarea și prelucrarea datelor din mai multe tabele. 

Prin urmare, putem deduce că un avantaj al utilizării vederilor este acela că permit utilizatorilor să creeze interogări mai simple și mai ușor de înțeles pentru accesarea datelor complexe. 
","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",0.3333333333,0.0,0.8827103449640735,0.5555555555555556,0.0434373789135831,0.12080536912751677,0.44
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7']","Secvențele și indicii contribuie la performanța bazelor de date în următoarele moduri:

* **Secvențele:** Generează numere de identificare unice (ID-uri) pentru înregistrările din tabele. Acestea sunt utile pentru cheile primare, asigurând unicitatea fiecărei înregistrări. Folosirea secvențelor elimină necesitatea de a calcula manual ID-uri unice, economisind timp și resurse. De asemenea, previn coliziunile de ID-uri, care pot apărea dacă aplicațiile generează ID-uri independent.
* **Indecsii:** Oferă o modalitate rapidă de a găsi înregistrări specifice în baza de date. Funcționează ca un index într-o carte, permițând accesarea rapidă a informațiilor. Indecsii accelerează operațiunile de căutare, sortare și filtrare, reducând semnificativ timpul necesar pentru a găsi datele dorite.

În esență, secvențele și indicii contribuie la o mai bună organizare și accesibilitate a datelor, ceea ce se traduce în performanțe îmbunătățite ale bazei de date.
",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7']","Secvențele și indicii contribuie la performanța bazelor de date în următoarele moduri:

* **Secvențele:** Generează numere de identificare unice (ID-uri) pentru înregistrările din tabele. Acestea sunt utile pentru cheile primare, asigurând unicitatea fiecărei înregistrări. Folosirea secvențelor elimină necesitatea de a calcula manual ID-uri unice, economisind timp și resurse. De asemenea, previn coliziunile de ID-uri, care pot apărea dacă aplicațiile generează ID-uri independent.
* **Indecsii:** Oferă o modalitate rapidă de a găsi înregistrări specifice în baza de date. Funcționează ca un index într-o carte, permițând accesarea rapidă a informațiilor. Indecsii accelerează operațiunile de căutare, sortare și filtrare, reducând semnificativ timpul necesar pentru a găsi datele dorite.

În esență, secvențele și indicii contribuie la o mai bună organizare și accesibilitate a datelor, ceea ce se traduce în performanțe îmbunătățite ale bazei de date.
","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",0.0,0.0,0.8351664840527602,0.17647058823529413,0.03173176885393888,0.16494845360824742,0.76
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date']","Contextul furnizat nu oferă informații specifice despre implementarea controlului accesului și gestionării privilegiilor în Oracle. Textul se concentrează pe evoluția și facilitățile sistemului Oracle, inclusiv securitatea sporită prin server de criptare, control trafic rețea și niveluri de parolare. 

Pentru a obține informații detaliate despre implementarea controlului accesului și gestionării privilegiilor în Oracle, ar trebui consultate documente de referință specifice Oracle, cum ar fi documentația oficială sau resurse online dedicate acestei teme. 
",Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date']","Contextul furnizat nu oferă informații specifice despre implementarea controlului accesului și gestionării privilegiilor în Oracle. Textul se concentrează pe evoluția și facilitățile sistemului Oracle, inclusiv securitatea sporită prin server de criptare, control trafic rețea și niveluri de parolare. 

Pentru a obține informații detaliate despre implementarea controlului accesului și gestionării privilegiilor în Oracle, ar trebui consultate documente de referință specifice Oracle, cum ar fi documentația oficială sau resurse online dedicate acestei teme. 
","Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",0.0,0.0,0.0,0.75,0.031251907639724415,0.1487603305785124,0.59
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17']","Principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne sunt:

**Sisteme tradiționale de fișiere:**

* **Redundanță și inconsistență:** Aceleași date pot fi stocate în mai multe fișiere, ducând la inconsistențe și consum excesiv de spațiu.
* **Lipsa integrității:** Nu există mecanisme automate pentru a asigura corectitudinea și validitatea datelor.
* **Dificultăți în accesul la date:** Accesul la date necesită dezvoltarea de programe personalizate pentru fiecare tip de interogare.
* **Lipsa securității:** Nu există mecanisme eficiente pentru restricționarea accesului la anumite date.
* **Dificultăți în partajarea datelor:** Accesul simultan la fișiere de către mai mulți utilizatori este dificil de gestionat.

**Baze de date moderne:**

* **Eliminarea redundanței:** Datele sunt normalizate și stocate într-un mod care minimizează duplicările.
* **Îmbunătățirea integrității:** Se pot defini constrângeri care asigură coerența și validitatea datelor.
* **Acces flexibil la date:** Utilizatorii pot efectua interogări complexe folosind limbaje precum SQL.
* **Securitate sporită:** Se pot implementa niveluri diferite de acces pentru utilizatori.
* **Partajare eficientă a datelor:** Mai mulți utilizatori pot accesa simultan baza de date fără a afecta integritatea informațiilor. 
",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței \n \n \n \n', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17']","Principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne sunt:

**Sisteme tradiționale de fișiere:**

* **Redundanță și inconsistență:** Aceleași date pot fi stocate în mai multe fișiere, ducând la inconsistențe și consum excesiv de spațiu.
* **Lipsa integrității:** Nu există mecanisme automate pentru a asigura corectitudinea și validitatea datelor.
* **Dificultăți în accesul la date:** Accesul la date necesită dezvoltarea de programe personalizate pentru fiecare tip de interogare.
* **Lipsa securității:** Nu există mecanisme eficiente pentru restricționarea accesului la anumite date.
* **Dificultăți în partajarea datelor:** Accesul simultan la fișiere de către mai mulți utilizatori este dificil de gestionat.

**Baze de date moderne:**

* **Eliminarea redundanței:** Datele sunt normalizate și stocate într-un mod care minimizează duplicările.
* **Îmbunătățirea integrității:** Se pot defini constrângeri care asigură coerența și validitatea datelor.
* **Acces flexibil la date:** Utilizatorii pot efectua interogări complexe folosind limbaje precum SQL.
* **Securitate sporită:** Se pot implementa niveluri diferite de acces pentru utilizatori.
* **Partajare eficientă a datelor:** Mai mulți utilizatori pot accesa simultan baza de date fără a afecta integritatea informațiilor. 
","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",0.999999999975,1.0,0.88046205617132,1.0,0.018131376139536207,0.14693877551020407,0.5
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Modelul relațional asigură integritatea datelor prin intermediul **cheilor primare** și **cheilor străine**. Cheia primară identifică în mod unic fiecare înregistrare dintr-un tabel, iar cheile străine stabilesc relații între tabele, asigurând consistența datelor. 

**SQL** joacă un rol esențial în implementarea constrângerilor în modelul relațional. Prin intermediul SQL se pot defini:

* **Constrângeri de cheie primară:** Această constrângere specifică o coloană (sau un grup de coloane) ca fiind cheie primară, garantând unicitatea fiecărei înregistrări.
* **Constrângeri de cheie străină:** Aceste constrângeri definesc relațiile între tabele, asigurând coerența datelor. De exemplu, o constrângere de cheie străină pe coloana ""StudentID"" din tabelul ""Inscriere"" se leagă de coloana ""StudentID"" din tabelul ""Student"", asigurând existența unui student corespunzător pentru fiecare înregistrare din tabelul ""Inscriere"".
* **Constrângeri de unicitate:** Aceste constrângeri impun unicitatea valorilor dintr-o coloană sau dintr-un grup de coloane, chiar dacă nu este cheie primară.
* **Constrângeri de verificare:** Aceste constrângeri verifică dacă valorile dintr-o coloană îndeplinesc o anumită condiție.

Prin utilizarea SQL pentru a defini aceste constrângeri, modelul relațional poate menține integritatea datelor, prevenind introducerea de date incorecte sau inconsistente.
",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată']","Modelul relațional asigură integritatea datelor prin intermediul **cheilor primare** și **cheilor străine**. Cheia primară identifică în mod unic fiecare înregistrare dintr-un tabel, iar cheile străine stabilesc relații între tabele, asigurând consistența datelor. 

**SQL** joacă un rol esențial în implementarea constrângerilor în modelul relațional. Prin intermediul SQL se pot defini:

* **Constrângeri de cheie primară:** Această constrângere specifică o coloană (sau un grup de coloane) ca fiind cheie primară, garantând unicitatea fiecărei înregistrări.
* **Constrângeri de cheie străină:** Aceste constrângeri definesc relațiile între tabele, asigurând coerența datelor. De exemplu, o constrângere de cheie străină pe coloana ""StudentID"" din tabelul ""Inscriere"" se leagă de coloana ""StudentID"" din tabelul ""Student"", asigurând existența unui student corespunzător pentru fiecare înregistrare din tabelul ""Inscriere"".
* **Constrângeri de unicitate:** Aceste constrângeri impun unicitatea valorilor dintr-o coloană sau dintr-un grup de coloane, chiar dacă nu este cheie primară.
* **Constrângeri de verificare:** Aceste constrângeri verifică dacă valorile dintr-o coloană îndeplinesc o anumită condiție.

Prin utilizarea SQL pentru a defini aceste constrângeri, modelul relațional poate menține integritatea datelor, prevenind introducerea de date incorecte sau inconsistente.
","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",0.99999999995,0.5,0.913408634991753,0.29411764705882354,0.05039518688486958,0.1290322580645161,0.75
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50']","Contextul furnizat nu oferă informații specifice despre cum să realizezi o operație complexă de manipulare a datelor folosind subinterogări. Contextul se concentrează pe subinterogări corelate și pe caracteristicile modelelor de date orientate obiect. 

Pentru a răspunde la întrebarea ta, ai nevoie de un context care să prezinte informații despre:

* **Tipurile de subinterogări:** Există diverse tipuri de subinterogări, cum ar fi subinterogările corelate, subinterogările simple, subinterogările în clauza WHERE etc.
* **Exemple de operații complexe:** Este important să înțelegi ce înseamnă ""complex"" în acest context. Exemple concrete ar ajuta la înțelegerea cerinței.
* **Limbajul de interogare specific:** De exemplu, dacă te referi la SQL, sunt necesare informații specifice despre sintaxa și funcțiile SQL pentru a realiza o operație complexă cu subinterogări.

Recomand să cauți informații online sau în literatura de specialitate despre subinterogări în limbajul de interogare pe care îl folosești. 
",Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50']","Contextul furnizat nu oferă informații specifice despre cum să realizezi o operație complexă de manipulare a datelor folosind subinterogări. Contextul se concentrează pe subinterogări corelate și pe caracteristicile modelelor de date orientate obiect. 

Pentru a răspunde la întrebarea ta, ai nevoie de un context care să prezinte informații despre:

* **Tipurile de subinterogări:** Există diverse tipuri de subinterogări, cum ar fi subinterogările corelate, subinterogările simple, subinterogările în clauza WHERE etc.
* **Exemple de operații complexe:** Este important să înțelegi ce înseamnă ""complex"" în acest context. Exemple concrete ar ajuta la înțelegerea cerinței.
* **Limbajul de interogare specific:** De exemplu, dacă te referi la SQL, sunt necesare informații specifice despre sintaxa și funcțiile SQL pentru a realiza o operație complexă cu subinterogări.

Recomand să cauți informații online sau în literatura de specialitate despre subinterogări în limbajul de interogare pe care îl folosești. 
","Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",0.99999999995,0.0,0.0,0.375,0.024074859035470342,0.10784313725490197,0.43
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22']","Contextul furnizat nu oferă informații despre constrângeri și vederi în baze de date și modul lor de utilizare în implementarea politicilor de securitate. 
",Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22']","Contextul furnizat nu oferă informații despre constrângeri și vederi în baze de date și modul lor de utilizare în implementarea politicilor de securitate. 
","Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",0.0,0.0,0.0,0.6666666666666666,0.089275746495808,0.2222222222222222,0.0
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Din contextul furnizat, putem deduce că SQL este un limbaj de interogare a bazelor de date. De asemenea, se menționează că SQL este folosit pentru a vizualiza conținutul unei vederi, folosind o cerere SELECT. 
",Ce înseamnă SQL?,"['copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","Din contextul furnizat, putem deduce că SQL este un limbaj de interogare a bazelor de date. De asemenea, se menționează că SQL este folosit pentru a vizualiza conținutul unei vederi, folosind o cerere SELECT. 
",Structured Query Language,0.0,0.0,0.8996790947094953,1.0,0.0,0.0,0.67
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Din contextul furnizat, putem deduce că instrucțiunea SQL utilizată pentru extragerea datelor dintr-o bază de date este **SELECT**. 

Contextul menționează că SQL este un limbaj de interogare a bazelor de date și este folosit pentru exemplificarea noțiunilor teoretice. Aceasta sugerează că SQL este folosit pentru a obține informații din baza de date, iar instrucțiunea SELECT este cea care permite extragerea datelor.
",Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Din contextul furnizat, putem deduce că instrucțiunea SQL utilizată pentru extragerea datelor dintr-o bază de date este **SELECT**. 

Contextul menționează că SQL este un limbaj de interogare a bazelor de date și este folosit pentru exemplificarea noțiunilor teoretice. Aceasta sugerează că SQL este folosit pentru a obține informații din baza de date, iar instrucțiunea SELECT este cea care permite extragerea datelor.
",SELECT,0.0,0.0,0.9575666473521895,0.4,0.016466642419110007,0.028985507246376812,0.67
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Contextul furnizat nu conține informații despre instrucțiunea SQL folosită pentru actualizarea datelor dintr-o bază de date. 
",Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Contextul furnizat nu conține informații despre instrucțiunea SQL folosită pentru actualizarea datelor dintr-o bază de date. 
",UPDATE,0.0,0.0,0.0,1.0,0.0,0.0,1.0
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Contextul furnizat nu conține informații despre instrucțiunea SQL pentru ștergerea datelor dintr-o bază de date.  
",Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date']","Contextul furnizat nu conține informații despre instrucțiunea SQL pentru ștergerea datelor dintr-o bază de date.  
",DELETE,0.0,0.0,0.0,1.0,0.0,0.0,1.0
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Contextul furnizat nu oferă informații specifice despre instrucțiunea SQL utilizată pentru inserarea de date noi. 
",Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']","Contextul furnizat nu oferă informații specifice despre instrucțiunea SQL utilizată pentru inserarea de date noi. 
",INSERT INTO,0.0,0.0,0.0,1.0,0.0,0.0,1.0
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","```sql
SELECT FirstName
FROM Persons;
``` 
","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","```sql
SELECT FirstName
FROM Persons;
``` 
",SELECT FirstName FROM Persons,0.0,0.0,0.8730131150549707,0.0,0.21200626759025185,0.888888888888889,1.0
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu oferă informații despre sintaxa SQL.  Pentru a selecta toate coloanele dintr-un tabel numit ""Persons"", se folosește următoarea sintaxă SQL:

```sql
SELECT * FROM Persons;
```

Această instrucțiune va selecta toate coloanele (*) din tabelul ""Persons"". 
","Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu oferă informații despre sintaxa SQL.  Pentru a selecta toate coloanele dintr-un tabel numit ""Persons"", se folosește următoarea sintaxă SQL:

```sql
SELECT * FROM Persons;
```

Această instrucțiune va selecta toate coloanele (*) din tabelul ""Persons"". 
",SELECT * FROM Persons,0.0,0.0,0.9022275013106439,0.3333333333333333,0.0,0.13953488372093023,0.8
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```
","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter';
```
",SELECT * FROM Persons WHERE FirstName='Peter',0.0,0.0,0.9066067147206214,0.0,0.4428500142691474,0.923076923076923,1.0
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43']","```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

This SQL query will select all records from the ""Persons"" table where the ""FirstName"" column starts with the letter ""a"". 

Here's how it works:

* **SELECT *:** Selects all columns from the table.
* **FROM Persons:** Specifies the table to retrieve data from.
* **WHERE FirstName LIKE 'a%':** Filters the results to include only rows where the ""FirstName"" column starts with ""a"". 
    * `LIKE` operator is used for pattern matching.
    * `'a%'` is a wildcard pattern that matches any string starting with ""a"".

This is a basic example, and you can adjust the pattern within the `LIKE` operator to match more complex conditions as needed. 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43']","```sql
SELECT *
FROM Persons
WHERE FirstName LIKE 'a%';
```

This SQL query will select all records from the ""Persons"" table where the ""FirstName"" column starts with the letter ""a"". 

Here's how it works:

* **SELECT *:** Selects all columns from the table.
* **FROM Persons:** Specifies the table to retrieve data from.
* **WHERE FirstName LIKE 'a%':** Filters the results to include only rows where the ""FirstName"" column starts with ""a"". 
    * `LIKE` operator is used for pattern matching.
    * `'a%'` is a wildcard pattern that matches any string starting with ""a"".

This is a basic example, and you can adjust the pattern within the `LIKE` operator to match more complex conditions as needed. 
",SELECT * FROM Persons WHERE FirstName LIKE 'a%',0.0,0.0,0.8561948241954701,0.14285714285714285,0.1983211647113318,0.1217391304347826,1.0
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68\n']","Contextul furnizat nu conține informații despre operatorii OR și AND. Prin urmare, nu pot răspunde la solicitarea utilizatorului. 
",Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68\n']","Contextul furnizat nu conține informații despre operatorii OR și AND. Prin urmare, nu pot răspunde la solicitarea utilizatorului. 
",Adevărat,0.0,0.0,0.0,1.0,0.0,0.0,1.0
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']","```sql
SELECT *
FROM Persons
WHERE FirstName = 'Peter' AND LastName = 'Jackson';
```
",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',0.0,0.0,0.890844669725118,0.0,0.5653636138834067,0.9473684210526316,1.0
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
``` 
","Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","```sql
SELECT *
FROM Persons
WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';
``` 
",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',0.0,0.0,0.8634539502695487,0.0,0.5118285025257893,0.9473684210526316,1.0
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50']","Contextul furnizat nu conține informații despre instrucțiunile SQL pentru returnarea valorilor unice. 
",Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50']","Contextul furnizat nu conține informații despre instrucțiunile SQL pentru returnarea valorilor unice. 
",SELECT DISTINCT,0.0,0.0,0.0,1.0,0.0,0.0,0.0
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul furnizat nu conține informații despre cuvântul cheie SQL folosit pentru sortarea setului de rezultate. 
",Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul furnizat nu conține informații despre cuvântul cheie SQL folosit pentru sortarea setului de rezultate. 
",ORDER BY,0.0,0.0,0.0,1.0,0.0,0.0,0.0
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare SQL va returna toate înregistrările din tabelul ""Persons"" sortate descrescător după coloana ""FirstName"". 

* `SELECT *` - Selectează toate coloanele din tabelul ""Persons"".
* `FROM Persons` - Specifică tabelul din care se preiau datele.
* `ORDER BY FirstName DESC` - Sortează rezultatele în ordine descrescătoare după coloana ""FirstName"".
","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69']","```sql
SELECT *
FROM Persons
ORDER BY FirstName DESC;
```

Această interogare SQL va returna toate înregistrările din tabelul ""Persons"" sortate descrescător după coloana ""FirstName"". 

* `SELECT *` - Selectează toate coloanele din tabelul ""Persons"".
* `FROM Persons` - Specifică tabelul din care se preiau datele.
* `ORDER BY FirstName DESC` - Sortează rezultatele în ordine descrescătoare după coloana ""FirstName"".
",SELECT * FROM Persons ORDER BY FirstName DESC,0.0,0.0,0.7818913491676511,0.0,0.19121616355935117,0.22950819672131148,1.0
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu conține informații despre cum se inserează o înregistrare nouă în tabelul ""Persons"" folosind SQL. 
","Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu conține informații despre cum se inserează o înregistrare nouă în tabelul ""Persons"" folosind SQL. 
","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",0.0,0.0,0.0,1.0,0.020244462660665506,0.08,0.0
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere""]","Contextul furnizat nu conține informații despre cum se inserează date în tabelul ""Persons"".  Așadar, nu pot răspunde la solicitare. 

Pentru a insera ""Olsen"" ca ""LastName"" în tabelul ""Persons"", ai nevoie de o instrucțiune SQL `INSERT`.  Iată un exemplu generic:

```sql
INSERT INTO Persons (LastName) 
VALUES ('Olsen');
```

Asigurați-vă că înlocuiți numele tabelului și coloanei cu cele corecte din baza de date.
","Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere""]","Contextul furnizat nu conține informații despre cum se inserează date în tabelul ""Persons"".  Așadar, nu pot răspunde la solicitare. 

Pentru a insera ""Olsen"" ca ""LastName"" în tabelul ""Persons"", ai nevoie de o instrucțiune SQL `INSERT`.  Iată un exemplu generic:

```sql
INSERT INTO Persons (LastName) 
VALUES ('Olsen');
```

Asigurați-vă că înlocuiți numele tabelului și coloanei cu cele corecte din baza de date.
",INSERT INTO Persons (LastName) VALUES ('Olsen'),0.0,0.0,0.9052884254833203,0.2,0.02627961710408444,0.1621621621621622,0.57
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10']","Contextul furnizat nu oferă informații despre cum să modificați numele din coloana ""LastName"" a tabelului ""Persons"". Informațiile din context se referă la clauza WHERE, adăugarea de înregistrări noi și descrierea tabelelor. 

Pentru a schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" a tabelului ""Persons"", aveți nevoie de o instrucțiune SQL UPDATE. O instrucțiune simplă ar putea arăta astfel:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această instrucțiune va actualiza toate înregistrările din tabelul ""Persons"" unde ""LastName"" este ""Hansen"" cu valoarea ""Nilsen"". 

Asigurați-vă că înlocuiți ""Persons"" cu numele tabelului dumneavoastră și ""LastName"" cu numele coloanei din tabelul dumneavoastră. 
","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51\n"", 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39\n', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10']","Contextul furnizat nu oferă informații despre cum să modificați numele din coloana ""LastName"" a tabelului ""Persons"". Informațiile din context se referă la clauza WHERE, adăugarea de înregistrări noi și descrierea tabelelor. 

Pentru a schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" a tabelului ""Persons"", aveți nevoie de o instrucțiune SQL UPDATE. O instrucțiune simplă ar putea arăta astfel:

```sql
UPDATE Persons
SET LastName = 'Nilsen'
WHERE LastName = 'Hansen';
```

Această instrucțiune va actualiza toate înregistrările din tabelul ""Persons"" unde ""LastName"" este ""Hansen"" cu valoarea ""Nilsen"". 

Asigurați-vă că înlocuiți ""Persons"" cu numele tabelului dumneavoastră și ""LastName"" cu numele coloanei din tabelul dumneavoastră. 
",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',0.0,0.0,0.9013943590374026,0.3333333333333333,0.02276859592073037,0.13333333333333333,0.67
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
```

Această comandă SQL va șterge toate înregistrările din tabelul ""Persons"" unde coloana ""FirstName"" este egală cu ""Peter"". 
","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","[""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40']","```sql
DELETE FROM Persons WHERE FirstName = 'Peter';
```

Această comandă SQL va șterge toate înregistrările din tabelul ""Persons"" unde coloana ""FirstName"" este egală cu ""Peter"". 
",DELETE FROM Persons WHERE FirstName = 'Peter',0.0,0.0,0.7965524709602091,0.0,0.1475641481372325,0.3870967741935484,1.0
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu conține informații despre SQL. De aceea, nu pot răspunde la întrebarea ta.  

Pentru a returna numărul de înregistrări din tabelul ""Persons"", puteți utiliza o interogare SQL simplă:

```sql
SELECT COUNT(*) FROM Persons;
```

Această interogare va returna un singur rezultat, care este numărul total de rânduri din tabelul ""Persons"".
","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30']","Contextul furnizat nu conține informații despre SQL. De aceea, nu pot răspunde la întrebarea ta.  

Pentru a returna numărul de înregistrări din tabelul ""Persons"", puteți utiliza o interogare SQL simplă:

```sql
SELECT COUNT(*) FROM Persons;
```

Această interogare va returna un singur rezultat, care este numărul total de rânduri din tabelul ""Persons"".
",SELECT COUNT(*) FROM Persons,0.0,0.0,0.9057088837143028,0.0,0.0,0.12698412698412698,0.86
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)']","Contextul furnizat nu conține informații despre tipuri de ""join"" în bazele de date. Prin urmare, nu pot răspunde la întrebarea ""Care este cel mai cunoscut tip de join?"".
",Care este cel mai cunoscut tip de join?,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)']","Contextul furnizat nu conține informații despre tipuri de ""join"" în bazele de date. Prin urmare, nu pot răspunde la întrebarea ""Care este cel mai cunoscut tip de join?"".
",INNER JOIN,0.0,0.0,0.0,1.0,0.0,0.06060606060606061,1.0
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43']","Operatorul folosit pentru a selecta valori dintr-un interval este **BETWEEN...AND...**. 
",Ce operator este folosit pentru a selecta valori dintr-un interval?,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43']","Operatorul folosit pentru a selecta valori dintr-un interval este **BETWEEN...AND...**. 
",BETWEEN,0.8666666666377778,1.0,0.8898804149195035,1.0,0.018160849415439308,0.15384615384615385,0.0
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Da, afirmația ""Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL"" este corectă. Conform contextului furnizat, constrângerea NOT NULL ""asigură faptul că o coloană să nu conţină valoarea nulă"". Aceasta înseamnă că orice valoare introdusă în coloana respectivă trebuie să fie o valoare validă, diferită de NULL. 
",Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","Da, afirmația ""Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL"" este corectă. Conform contextului furnizat, constrângerea NOT NULL ""asigură faptul că o coloană să nu conţină valoarea nulă"". Aceasta înseamnă că orice valoare introdusă în coloana respectivă trebuie să fie o valoare validă, diferită de NULL. 
",Adevărat,0.99999999995,1.0,0.8141346257480923,0.75,0.0,0.0,0.0
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14']","Contextul furnizat nu conține informații despre operatorii folosiți pentru căutarea unui model specificat într-o coloană. Prin urmare, nu pot răspunde la întrebarea ta. 
",Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14']","Contextul furnizat nu conține informații despre operatorii folosiți pentru căutarea unui model specificat într-o coloană. Prin urmare, nu pot răspunde la întrebarea ta. 
",LIKE,0.0,0.0,0.0,0.5,0.0,0.0,1.0
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15']","Din contextul dat, nu este disponibilă informația necesară pentru a răspunde la întrebarea ""Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit 'Customers'?"" 

Contextul se concentrează pe explicarea avantajelor utilizării vederilor în SQL și pe prezentarea elementelor limbajului SQL, dar nu include detalii despre instrucțiunile SQL pentru crearea de tabele. 
","Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15']","Din contextul dat, nu este disponibilă informația necesară pentru a răspunde la întrebarea ""Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit 'Customers'?"" 

Contextul se concentrează pe explicarea avantajelor utilizării vederilor în SQL și pe prezentarea elementelor limbajului SQL, dar nu include detalii despre instrucțiunile SQL pentru crearea de tabele. 
",CREATE TABLE Customers,0.0,0.0,0.0,1.0,0.0,0.03125,0.33
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47\n']","Contextul furnizat nu conține informații despre actualizarea salariilor sau despre calculul salariului mediu al companiei. Prin urmare, nu pot răspunde la promptul utilizatorului. 
",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47\n']","Contextul furnizat nu conține informații despre actualizarea salariilor sau despre calculul salariului mediu al companiei. Prin urmare, nu pot răspunde la promptul utilizatorului. 
",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,0.0,0.0,0.0,1.0,0.0,0.0,0.0
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83']","Contextul furnizat nu conține informații despre ștergerea angajaților sau despre interogări SQL care calculează salariul mediu al unui departament. Prin urmare, nu pot răspunde la cererea dumneavoastră.
",Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83']","Contextul furnizat nu conține informații despre ștergerea angajaților sau despre interogări SQL care calculează salariul mediu al unui departament. Prin urmare, nu pot răspunde la cererea dumneavoastră.
",DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,0.0,0.0,0.0,0.6666666666666666,0.0,0.0,0.0
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47']","Contextul furnizat nu conține exemple sau informații care să ajute la formularea unei interogări SQL pentru actualizarea salariilor.  
 
Pentru a genera o interogare SQL care să actualizeze salariile angajaților din departamentul 30 cu 5% din salariul mediu al departamentului, ai nevoie de o bază de date cu tabelele și coloanele relevante.  
 
Iată un exemplu general al unei interogări SQL care poate fi adaptată la structura ta de date:  
 
```sql
UPDATE EMP
SET sal = sal + (
    SELECT AVG(sal) * 0.05
    FROM EMP
    WHERE deptno = 30
)
WHERE deptno = 30;
```
 
Această interogare:  
 
* **UPDATE EMP:** Specifică tabelul ce va fi actualizat.
* **SET sal = sal + (...):** Modifică salariul (sal) cu o valoare calculată.
* **SELECT AVG(sal) * 0.05 FROM EMP WHERE deptno = 30:** Calculează 5% din salariul mediu al angajaților din departamentul 30.
* **WHERE deptno = 30:** Specifică că update-ul se aplică doar angajaților din departamentul 30.  
 
Înainte de a rula această interogare, este recomandat să o testezi pe o copie de rezervă a bazei de date pentru a evita modificări nedorite.  
 
Asigura-te că adaptezi numele tabelelor, coloanelor și condițiile la structura ta de date.
","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47']","Contextul furnizat nu conține exemple sau informații care să ajute la formularea unei interogări SQL pentru actualizarea salariilor.  
 
Pentru a genera o interogare SQL care să actualizeze salariile angajaților din departamentul 30 cu 5% din salariul mediu al departamentului, ai nevoie de o bază de date cu tabelele și coloanele relevante.  
 
Iată un exemplu general al unei interogări SQL care poate fi adaptată la structura ta de date:  
 
```sql
UPDATE EMP
SET sal = sal + (
    SELECT AVG(sal) * 0.05
    FROM EMP
    WHERE deptno = 30
)
WHERE deptno = 30;
```
 
Această interogare:  
 
* **UPDATE EMP:** Specifică tabelul ce va fi actualizat.
* **SET sal = sal + (...):** Modifică salariul (sal) cu o valoare calculată.
* **SELECT AVG(sal) * 0.05 FROM EMP WHERE deptno = 30:** Calculează 5% din salariul mediu al angajaților din departamentul 30.
* **WHERE deptno = 30:** Specifică că update-ul se aplică doar angajaților din departamentul 30.  
 
Înainte de a rula această interogare, este recomandat să o testezi pe o copie de rezervă a bazei de date pentru a evita modificări nedorite.  
 
Asigura-te că adaptezi numele tabelelor, coloanelor și condițiile la structura ta de date.
","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",0.0,0.0,0.8456837863696028,0.1,0.0,0.17391304347826084,0.8
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34\n']","Contextul furnizat nu conține informații despre o bază de date sau structura tabelelor. Prin urmare, nu pot genera o interogare SQL completă. 

Totuși, pot oferi o schemă generală a interogării:

```sql
UPDATE Angajati 
SET JOB = 'SENIOR'
WHERE YEAR(DataAngajarii) < 2000;
```

Această interogare presupune că:

* Există o tabelă numită ""Angajati"".
* Tabela ""Angajati"" are o coloană numită ""JOB"" care stochează funcția angajatului.
* Tabela ""Angajati"" are o coloană numită ""DataAngajarii"" care stochează data angajării.

Pentru a genera o interogare corectă, ar trebui să specificați numele exact al tabelei, coloanelor și tipul de bază de date pe care o utilizați. 
",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49\n', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34\n']","Contextul furnizat nu conține informații despre o bază de date sau structura tabelelor. Prin urmare, nu pot genera o interogare SQL completă. 

Totuși, pot oferi o schemă generală a interogării:

```sql
UPDATE Angajati 
SET JOB = 'SENIOR'
WHERE YEAR(DataAngajarii) < 2000;
```

Această interogare presupune că:

* Există o tabelă numită ""Angajati"".
* Tabela ""Angajati"" are o coloană numită ""JOB"" care stochează funcția angajatului.
* Tabela ""Angajati"" are o coloană numită ""DataAngajarii"" care stochează data angajării.

Pentru a genera o interogare corectă, ar trebui să specificați numele exact al tabelei, coloanelor și tipul de bază de date pe care o utilizați. 
","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",0.0,0.0,0.0,0.6,0.0,0.12173913043478261,0.5
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22\n']","I'm sorry, I can't answer the question ""Cum e vremea la galati?"". The provided context is about databases and doesn't contain any information about weather in Galati. 
",Cum e vremea la galati ?,"['copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22\n']","I'm sorry, I can't answer the question ""Cum e vremea la galati?"". The provided context is about databases and doesn't contain any information about weather in Galati. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.0,0.6666666666666666,0.0,0.05128205128205128,0.67
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25']","I'm sorry, but the context provided does not have information about Michael Jackson's age. Therefore, I cannot answer your query. 
",Cati ani a trait Michael Jackson ?,"['copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25']","I'm sorry, but the context provided does not have information about Michael Jackson's age. Therefore, I cannot answer your query. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,1.0
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5']","I cannot answer your question based on the context provided. The context contains text snippets related to database courses and examples, but there is no information about a specific book. 
",Ce o carte ?,"['copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5']","I cannot answer your question based on the context provided. The context contains text snippets related to database courses and examples, but there is no information about a specific book. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,0.67
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","I'm sorry, but I cannot answer that question. The provided context discusses database concepts and SQL code, which does not provide information about ""cat face"" or simple arithmetic.  

If you would like to ask a question related to SQL or database concepts, I would be happy to try my best to answer it. 
",Cat face 2 + 2 ?,"['copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13\n', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17']","I'm sorry, but I cannot answer that question. The provided context discusses database concepts and SQL code, which does not provide information about ""cat face"" or simple arithmetic.  

If you would like to ask a question related to SQL or database concepts, I would be happy to try my best to answer it. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.0,0.5,0.0,0.0,0.0
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n']","Din contextul furnizat, putem deduce următoarele diferențe cheie între bazele de date distribuite și NoSQL:

* **Bazele de date distribuite:**
    * Pot avea atât datele, cât și sistemul de gestiune distribuite pe mai multe calculatoare interconectate.
    * Pot fi centralizate sau distribuite.
* **Bazele de date NoSQL:**
    * Sunt o categorie modernă de sisteme de gestionare a bazelor de date care elimină limitările sistemelor relaționale.
    * Sunt concepute pentru a stoca și interoga mai eficient datele nestructurate și semi-structurate.
    * Oferă scalabilitate orizontală, flexibilitate și performanță ridicată.

Prin urmare, o afirmație corectă cu privire la diferențele dintre cele două tipuri de baze de date ar putea fi: **Bazele de date NoSQL sunt concepute pentru a gestiona eficient date nestructurate și semi-structurate, în timp ce bazele de date distribuite pot avea datele și sistemul de gestiune distribuite pe mai multe calculatoare.**
",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n']","Din contextul furnizat, putem deduce următoarele diferențe cheie între bazele de date distribuite și NoSQL:

* **Bazele de date distribuite:**
    * Pot avea atât datele, cât și sistemul de gestiune distribuite pe mai multe calculatoare interconectate.
    * Pot fi centralizate sau distribuite.
* **Bazele de date NoSQL:**
    * Sunt o categorie modernă de sisteme de gestionare a bazelor de date care elimină limitările sistemelor relaționale.
    * Sunt concepute pentru a stoca și interoga mai eficient datele nestructurate și semi-structurate.
    * Oferă scalabilitate orizontală, flexibilitate și performanță ridicată.

Prin urmare, o afirmație corectă cu privire la diferențele dintre cele două tipuri de baze de date ar putea fi: **Bazele de date NoSQL sunt concepute pentru a gestiona eficient date nestructurate și semi-structurate, în timp ce bazele de date distribuite pot avea datele și sistemul de gestiune distribuite pe mai multe calculatoare.**
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.854589003612953,0.8571428571428571,0.0,0.0,0.0
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Bazele de date NoSQL oferă mai multe avantaje semnificative comparativ cu bazele de date distribuite tradiționale, dar cel mai important este **scalabilitatea orizontală**. Acestea pot gestiona volume mari de date prin distribuirea lor pe mai multe servere, ceea ce le permite să se adapteze la creșterea rapidă a datelor.
",Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Bazele de date NoSQL oferă mai multe avantaje semnificative comparativ cu bazele de date distribuite tradiționale, dar cel mai important este **scalabilitatea orizontală**. Acestea pot gestiona volume mari de date prin distribuirea lor pe mai multe servere, ceea ce le permite să se adapteze la creșterea rapidă a datelor.
",Nu am gasit informatii in curs despre intrebarea ta,0.4166666666458333,1.0,0.866275485542276,0.5,0.0,0.0,0.0
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Textul furnizat nu oferă informații specifice despre când o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL. În schimb, textul se concentrează pe o descriere generală a bazelor de date, inclusiv tipuri de baze de date (relaționale, NoSQL) și avantajele/dezavantajele lor.

Pentru a răspunde la întrebarea ta, ar trebui să luăm în considerare diferențele cheie dintre bazele de date distribuite și bazele de date NoSQL:

* **Baze de date distribuite:** Acestea împart datele pe mai multe servere, îmbunătățind scalabilitatea și disponibilitatea.
* **Baze de date NoSQL:**  Acestea sunt concepute pentru a gestiona date nestructurate sau semi-structurate, oferind flexibilitate și performanță ridicată pentru volume mari de date.

**Scenarii în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL:**

* **Aplicații cu cerințe de scalabilitate extrem de ridicate:** Bazele de date distribuite pot gestiona volume masive de date prin distribuție pe mai multe servere, ceea ce poate fi esențial pentru aplicații cu creștere rapidă.
* **Disponibilitate ridicată:**  Bazele de date distribuite asigură redundanță, asigurând funcționarea aplicației chiar dacă un server eșuează.
* **Cerințe complexe de tranzacții:** Bazele de date distribuite oferă un control mai bun asupra tranzacțiilor complexe, asigurând consistența datelor.

**Scenarii în care o bază de date NoSQL ar fi mai potrivită decât o bază de date distribuită:**

* **Date nestructurate sau semi-structurate:** Bazele de date NoSQL sunt optimizate pentru a gestiona date complexe și variabile, cum ar fi date de social media, IoT sau jurnale.
* **Performanță ridicată pentru operațiuni de citire/scriere:** Bazele de date NoSQL sunt concepute pentru a oferi latență redusă pentru operațiunile comune de citire/scriere.

În concluzie, alegerea dintre o bază de date distribuită și o bază de date NoSQL depinde de cerințele specifice ale aplicației. Dacă scalabilitatea, disponibilitatea și tranzacțiile complexe sunt prioritare, o bază de date distribuită ar putea fi o alegere mai bună. Dacă aveți nevoie de flexibilitate, performanță ridicată pentru operațiuni de citire/scriere și gestionarea datelor nestructurate, o bază de date NoSQL ar putea fi o alegere mai potrivită.
",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Textul furnizat nu oferă informații specifice despre când o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL. În schimb, textul se concentrează pe o descriere generală a bazelor de date, inclusiv tipuri de baze de date (relaționale, NoSQL) și avantajele/dezavantajele lor.

Pentru a răspunde la întrebarea ta, ar trebui să luăm în considerare diferențele cheie dintre bazele de date distribuite și bazele de date NoSQL:

* **Baze de date distribuite:** Acestea împart datele pe mai multe servere, îmbunătățind scalabilitatea și disponibilitatea.
* **Baze de date NoSQL:**  Acestea sunt concepute pentru a gestiona date nestructurate sau semi-structurate, oferind flexibilitate și performanță ridicată pentru volume mari de date.

**Scenarii în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL:**

* **Aplicații cu cerințe de scalabilitate extrem de ridicate:** Bazele de date distribuite pot gestiona volume masive de date prin distribuție pe mai multe servere, ceea ce poate fi esențial pentru aplicații cu creștere rapidă.
* **Disponibilitate ridicată:**  Bazele de date distribuite asigură redundanță, asigurând funcționarea aplicației chiar dacă un server eșuează.
* **Cerințe complexe de tranzacții:** Bazele de date distribuite oferă un control mai bun asupra tranzacțiilor complexe, asigurând consistența datelor.

**Scenarii în care o bază de date NoSQL ar fi mai potrivită decât o bază de date distribuită:**

* **Date nestructurate sau semi-structurate:** Bazele de date NoSQL sunt optimizate pentru a gestiona date complexe și variabile, cum ar fi date de social media, IoT sau jurnale.
* **Performanță ridicată pentru operațiuni de citire/scriere:** Bazele de date NoSQL sunt concepute pentru a oferi latență redusă pentru operațiunile comune de citire/scriere.

În concluzie, alegerea dintre o bază de date distribuită și o bază de date NoSQL depinde de cerințele specifice ale aplicației. Dacă scalabilitatea, disponibilitatea și tranzacțiile complexe sunt prioritare, o bază de date distribuită ar putea fi o alegere mai bună. Dacă aveți nevoie de flexibilitate, performanță ridicată pentru operațiuni de citire/scriere și gestionarea datelor nestructurate, o bază de date NoSQL ar putea fi o alegere mai potrivită.
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.8495360652162197,0.5,0.016466642419110007,0.01578947368421053,0.15
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit includ:

* **Lipsa unui standard unificat:** Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce face dificilă migrarea între diferite sisteme și necesită o învățare separată pentru fiecare.
* **Consistența datelor:** Majoritatea bazelor NoSQL sacrifică consistența datelor în favoarea disponibilității și performanței. Acest lucru poate duce la probleme de sincronizare a datelor între nodurile distribuite și la inconsistențe în rezultatele interogărilor. 
* **Managementul distribuției:** Gestionarea distribuției datelor pe mai multe noduri, inclusiv replicarea, echilibrarea sarcinii și gestionarea defecțiunilor, poate fi complexă și necesită o infrastructură robustă.
* **Transacții complexe:** Unele implementări NoSQL nu oferă suport pentru tranzacții complexe, ceea ce poate limita aplicabilitatea în scenariile care necesită integritate datelor atomice.
* **Securitatea datelor:** Securitatea datelor într-un sistem distribuit NoSQL poate fi mai complexă decât în bazele de date relaționale, necesitând mecanisme de autentificare, autorizare și criptare adaptate la arhitectura distribuită.

Acestea sunt doar câteva dintre provocările întâlnite în utilizarea bazelor de date NoSQL într-un sistem distribuit. Este important să se ia în considerare cu atenție aceste provocări înainte de a alege o soluție NoSQL pentru un anumit scenariu. 
",Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP). \n \n \n ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14\n']","Principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit includ:

* **Lipsa unui standard unificat:** Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce face dificilă migrarea între diferite sisteme și necesită o învățare separată pentru fiecare.
* **Consistența datelor:** Majoritatea bazelor NoSQL sacrifică consistența datelor în favoarea disponibilității și performanței. Acest lucru poate duce la probleme de sincronizare a datelor între nodurile distribuite și la inconsistențe în rezultatele interogărilor. 
* **Managementul distribuției:** Gestionarea distribuției datelor pe mai multe noduri, inclusiv replicarea, echilibrarea sarcinii și gestionarea defecțiunilor, poate fi complexă și necesită o infrastructură robustă.
* **Transacții complexe:** Unele implementări NoSQL nu oferă suport pentru tranzacții complexe, ceea ce poate limita aplicabilitatea în scenariile care necesită integritate datelor atomice.
* **Securitatea datelor:** Securitatea datelor într-un sistem distribuit NoSQL poate fi mai complexă decât în bazele de date relaționale, necesitând mecanisme de autentificare, autorizare și criptare adaptate la arhitectura distribuită.

Acestea sunt doar câteva dintre provocările întâlnite în utilizarea bazelor de date NoSQL într-un sistem distribuit. Este important să se ia în considerare cu atenție aceste provocări înainte de a alege o soluție NoSQL pentru un anumit scenariu. 
",Nu am gasit informatii in curs despre intrebarea ta,0.99999999995,0.0,0.8940022722020297,0.25,0.0,0.008968609865470852,0.0
