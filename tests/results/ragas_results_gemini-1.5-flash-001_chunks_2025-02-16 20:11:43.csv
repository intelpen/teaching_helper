,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCurs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\nCurs - Baze de date 2', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO cheie candidat a unei relaţii R este o mulţime \nminimă de atribute de care toate celelalte atribute ale \nlui R sunt dependente funcţional. \nCheia primară a unei relaţii R este una din cheile \ncandidat care a fost desemnată în acest scop.\nO cheie străină a unei relaţii R este o mulţime de \natribute din schema relaţională care formează o cheie \nprimară pentru o altă relaţie. \nCurs - Baze de date\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00 42', '\n']"," modelul de date relaţional este prezentat ca predominant.  ""O cheie candidat a unei relaţii R este o mulţime minimă de atribute de care toate celelalte atribute ale lui R sunt dependente funcţional"". 
","În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['1. ', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nVederile se folosesc pentru că oferă: \n1. Acces restricţionat la date (vederile pot \nselecţiona anumite coloane dintr-o tabelă)\n2. Posibilitatea lucrului cu interogări complexe\n3. Independenţa datelor\n4. Posibilitatea prezentării de date identice în \nvederi diferite\nCurs - BAZE DE DATE 5', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCurs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\nCurs - Baze de date 2', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO cheie candidat a unei relaţii R este o mulţime \nminimă de atribute de care toate celelalte atribute ale \nlui R sunt dependente funcţional. \nCheia primară a unei relaţii R este una din cheile \ncandidat care a fost desemnată în acest scop.\nO cheie străină a unei relaţii R este o mulţime de \natribute din schema relaţională care formează o cheie \nprimară pentru o altă relaţie. \nCurs - Baze de date\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00 42', '\n']"," modelul de date relaţional este prezentat ca predominant.  ""O cheie candidat a unei relaţii R este o mulţime minimă de atribute de care toate celelalte atribute ale lui R sunt dependente funcţional"". 
",relațional,0.07142857142142857,1.0,0.771851988016451,0.6666666666666666,0.0,0.10526315789473684,0.0
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '\n', '2. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Are facilităţi de salvare/restaurare automate şi \ninteligente\n• Permite partiţionarea integrală pentru tabele şi indecşi\n• Are mesagerie integrală, prin comunicarea între \naplicaţii şi procesare offline (chiar dacă aplicaţiile nu \nsunt conectate)\n• Prelucrarea paralelă pentru: \n– replicare\n– cereri de regăsire\n– actualizare\n10Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n3. Instrumentele sunt componente destinate \nîntreţinerii şi bunei funcţionări a unei BD Oracle. \nENTERPRISE MANAGER CONSOLE conţine mai multe \nutilitare destinate administratorului BD:\n- deschidere / închidere BD\n- autorizarea accesului\n- refacerea BD\n- conversii de date\n31Curs - Baze de date', '\n']","limbajul integrat in Oracle pentru scrierea procedurilor stocate este **PL/SQL**. 
",Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '\n', '2. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Are facilităţi de salvare/restaurare automate şi \ninteligente\n• Permite partiţionarea integrală pentru tabele şi indecşi\n• Are mesagerie integrală, prin comunicarea între \naplicaţii şi procesare offline (chiar dacă aplicaţiile nu \nsunt conectate)\n• Prelucrarea paralelă pentru: \n– replicare\n– cereri de regăsire\n– actualizare\n10Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n3. Instrumentele sunt componente destinate \nîntreţinerii şi bunei funcţionări a unei BD Oracle. \nENTERPRISE MANAGER CONSOLE conţine mai multe \nutilitare destinate administratorului BD:\n- deschidere / închidere BD\n- autorizarea accesului\n- refacerea BD\n- conversii de date\n31Curs - Baze de date', '\n']","limbajul integrat in Oracle pentru scrierea procedurilor stocate este **PL/SQL**. 
",PL/SQL,0.49999999995,1.0,0.8864953791094144,0.0,0.09103526405546068,0.3076923076923077,0.67
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," clauza WHERE se utilizează pentru filtrarea rândurilor dintr-o interogare SQL. 
",Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," clauza WHERE se utilizează pentru filtrarea rândurilor dintr-o interogare SQL. 
",WHERE,0.0,0.0,0.8272136551973781,0.0,0.04196114906296548,0.15384615384615385,0.0
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," nu exista informatii care sa raspunda la intrebarea ta in contextul dat. 
",Ce funcție SQL transformă șirurile de caractere în majuscule?,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\nExistă:\n1. Constante numerice, de exemplu 4, 12.34, .9, etc. \n– Se observă că dacă un număr real are partea \nîntreagă egală cu zero, atunci ea nu mai trebuie \nprecizată.\n2. Constante alfanumerice (sau şir de caractere)\n– Constantele şir de caractere sunt scrise între \napostrofuri şi sunt case-sensitive. \n– Exemple: ‘abc’, ‘baza de date’.\n69Curs - Baze de date', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," nu exista informatii care sa raspunda la intrebarea ta in contextul dat. 
",UPPER,0.0,0.0,0.0,1.0,0.0,0.0,
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', '\n']","clauza **GROUP BY** este folosita pentru a grupa înregistrările pentru a calcula valori agregate folosind funcțiile de grup. 
",Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['1. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nFuncţiile de grup sunt funcţii care operează pe \nun set de rânduri pentru a da un rezultat pe întreg\nsetul.\nParametrii şi descrierea funcţiilor de grup. \nFuncţiile de grup sunt: \n1. AVG \n2. COUNT \n3. MAX \n4. MIN \n5. STDDEV \n6. SUM \n7. VARIANCE\nCurs 5 - BAZE DE DATE 14', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nRezultatul obtinut - Numărul angajaţilor din departamentul cu id-\nul 30. \nCurs 5 - BAZE DE DATE 25', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', '\n']","clauza **GROUP BY** este folosita pentru a grupa înregistrările pentru a calcula valori agregate folosind funcțiile de grup. 
",GROUP BY,0.11688311687727272,0.0,0.8667400952260348,1.0,0.03454447598433575,0.18181818181818182,1.0
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n']","nu există o subinterogare care să returneze o singură valoare pentru o condiție din clauza WHERE. 
",Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n']","nu există o subinterogare care să returneze o singură valoare pentru o condiție din clauza WHERE. 
",subinterogare single-row,0.0,0.0,0.853353635604329,0.0,0.024455939372403628,0.1,0.0
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 32', '\n']","nu se poate raspunde la aceasta intrebare. Cursul nu prezinta informatii despre  instrucţiunile SQL ce permit inserarea sau actualizarea condiționată a datelor. 
",Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 32', '\n']","nu se poate raspunde la aceasta intrebare. Cursul nu prezinta informatii despre  instrucţiunile SQL ce permit inserarea sau actualizarea condiționată a datelor. 
",MERGE,0.0,0.0,0.0,1.0,0.0,0.0,0.0
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n']","constrângerea SQL `NOT NULL` impune ca o coloană să nu accepte valori NULL. 
",Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['1. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n']","constrângerea SQL `NOT NULL` impune ca o coloană să nu accepte valori NULL. 
",NOT NULL,0.1249999999875,1.0,0.8190156925998328,1.0,0.052559234208168874,0.25,0.67
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","o vedere se creează cu instrucțiunea `CREATE VIEW`. 
","Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","o vedere se creează cu instrucțiunea `CREATE VIEW`. 
",CREATE VIEW,0.49999999995,1.0,0.8596151426618475,0.0,0.08392229812593097,0.3636363636363636,1.0
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","'Nu există informații disponibile în contextul furnizat pentru a răspunde la această întrebare.' 
","Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","'Nu există informații disponibile în contextul furnizat pentru a răspunde la această întrebare.' 
",SEQUENCE,0.0,0.0,0.0,1.0,0.0,0.0,
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","instructiunea SQL pentru a crea un utilizator nou in Oracle nu este furnizata in textul dat. 
","Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","instructiunea SQL pentru a crea un utilizator nou in Oracle nu este furnizata in textul dat. 
",CREATE USER,0.0,0.0,0.0,1.0,0.0,0.0,1.0
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n2. Nivelul conceptual este nivelul de mijloc al \nabstractizării, şi care se concentrează pe \ndescrierea datelor care sunt în baza de date şi \npe relaţiile dintre aceste date. \nDe acest nivel de abstractizare sunt interesaţi:\n–Administratorii bazei de date\n–Administratorii securităţii bazelor de date\nCurs - Baze de date\n 27', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \nCurs - Baze de date\n 29', '\n']"," textul descrie modelul relațional de baze de date.  
","Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n7.1.2. Actualizarea datelor dintr-o tabelă\nÎn sintaxă: \n• tabela - numele tabelei \n• coloana - numele coloanei în care vor fi introduse \ndatele \n• valoare - valoarea corespunzătoare din subquery \n(subinterogare)\n• condiţie- identificarea câmpurilor care vor fi \nactualizate\nCurs 7 - BAZE DE DATE 22', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n2. Nivelul conceptual este nivelul de mijloc al \nabstractizării, şi care se concentrează pe \ndescrierea datelor care sunt în baza de date şi \npe relaţiile dintre aceste date. \nDe acest nivel de abstractizare sunt interesaţi:\n–Administratorii bazei de date\n–Administratorii securităţii bazelor de date\nCurs - Baze de date\n 27', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \nCurs - Baze de date\n 29', '\n']"," textul descrie modelul relațional de baze de date.  
",relațional,0.0,1.0,0.7861813781221061,0.0,0.05522397783539471,0.3636363636363636,0.0
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"['1. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","cuvântul cheie SQL pentru definirea unei chei primare este **PRIMARY KEY**. 
",Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"['1. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","cuvântul cheie SQL pentru definirea unei chei primare este **PRIMARY KEY**. 
",PRIMARY KEY,0.49999999995,1.0,0.8605145829636519,0.0,0.052559234208168874,0.2857142857142857,1.0
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n', '4. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '5. ', 'Curs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n);', '\n']","etapa care transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei, se numește **Modelarea logică**. 
","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","['1. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n', '4. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '5. ', 'Curs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n);', '\n']","etapa care transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei, se numește **Modelarea logică**. 
",modelarea logică,0.07142857142142857,1.0,0.8760540791529897,0.5,0.015732934811145335,0.16666666666666669,0.0
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nScheme \nO schema este o colectie de obiecte, cum ar fi: \n✓tabele\n✓indecsi\n✓vizualizari\n✓secvente\nSchema este detinuta de un utilizator al bazei de \ndate si are acelasi nume cu utilizatorul.\nCurs - BAZE DE DATE 9', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nb) De asemenea nu se pot modifica date printr-o vedere \ndacă aceasta verifică condiţiile de mai sus şi dacă există \ncoloane definite prin expresii cum ar fi SALARIU*12. \nc) Adăugarea de date printr-o vedere este imposibilădacă\nvederea conţine elementele enumerate mai sus şi dacă\nexistă coloane NOT NULL în tabela neselectate de către\nvedere.\nPrin adăugare de date se modifică de fapt tabela propriu-\nzisă deci în coloanele neselectate se va adăuga NULL\nceea ce încalcă constrângerea.\nCurs - BAZE DE DATE 35', '\n']","o baza de date contine diverse obiecte precum tabele, vederi, secvente, indecsi si sinonime.  
","Ce este o bază de date, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nScheme \nO schema este o colectie de obiecte, cum ar fi: \n✓tabele\n✓indecsi\n✓vizualizari\n✓secvente\nSchema este detinuta de un utilizator al bazei de \ndate si are acelasi nume cu utilizatorul.\nCurs - BAZE DE DATE 9', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nb) De asemenea nu se pot modifica date printr-o vedere \ndacă aceasta verifică condiţiile de mai sus şi dacă există \ncoloane definite prin expresii cum ar fi SALARIU*12. \nc) Adăugarea de date printr-o vedere este imposibilădacă\nvederea conţine elementele enumerate mai sus şi dacă\nexistă coloane NOT NULL în tabela neselectate de către\nvedere.\nPrin adăugare de date se modifică de fapt tabela propriu-\nzisă deci în coloanele neselectate se va adăuga NULL\nceea ce încalcă constrângerea.\nCurs - BAZE DE DATE 35', '\n']","o baza de date contine diverse obiecte precum tabele, vederi, secvente, indecsi si sinonime.  
","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",0.0,0.0,0.792276537608425,1.0,0.038101828249592094,0.16666666666666663,0.0
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['1. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '\n', '3. ', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', '\n']","Oracle este un sistem de gestiune a bazelor de date (SGBD), folosit in cadrul cursului ""Baze de date"" pentru a ilustra conceptele teoretice si practice.
",Ce reprezintă Oracle în cursul prezentat?,"['1. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConfirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '\n', '3. ', '2.4. ORACLE Database 11g Expres Edition\nPas 1: Se porneste instalarea fisierului executabil si se vor \nurma pasii indicati de catre programul de instalare.\n42Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nIntroducere\n➢Pentru o bună înţelegere a noţiunilor teoretice şi \npractice prezentate în acest curs, este necesară \nparcurgerea anterioară a disciplinelor Programarea \ncalculatoarelor, Proiectarea algoritmilor si \nProgramare orientate pe obiecte.\n➢Cursul de Baze de date este structurat în 13 cursuri \n(capitole), fiecare dintre acestea cuprinzând câte \nun număr de 13 laboratoare (activităţi practice) la \ncare prezenţa va fi obligatorie.\nCurs - Baze de date 12', '\n']","Oracle este un sistem de gestiune a bazelor de date (SGBD), folosit in cadrul cursului ""Baze de date"" pentru a ilustra conceptele teoretice si practice.
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",0.0,0.0,0.8370414463601108,0.5,0.055177848898164926,0.21276595744680854,0.33
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nFuncţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În mod normal (fără clauza ORDER BY) rândurile sunt \nreturnate într-o ordine convenită de Oracle însă ea \nfiind consistentă de la cerere la cerere. \n➢Cu ajutorul clauzei ORDER BY rândurile vor fi afişate în \nordinea solicitată (cu toate acestea nu se va modifica \nordinea internă a rândurilor din baza de date).\n➢Clauza ORDER BY trebuie să fie ultima clauză din cerere \n(interogare).\nCurs - Baze de date 70', '\n']","clauza ORDER BY este folosita pentru a sorta liniile din rezultat in functie de criteriile specificate.  Serverul sorteaza liniile inainte de a trimite rezultatul,  daca lipseste, liniile sunt intr-o ordine independenta de continutul lor sau de ordinea in care ele au fost adaugate in tabela. 
",Ce face clauza ORDER BY într-o interogare SELECT?,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În clauza ORDER BY se pot folosi coloane care nu sunt \nconţinute în SELECT.\n \nExemplu: \n  Listaţi toţi angajaţii ordonându-i după salariu (în \nordine crescătoare).\nSELECT ename, job\nFROM EMP\nORDER BY sal;  \nCurs - Baze de date 80', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n➢Într-o instrucţiune SELECT se poate folosi o singură clauză \nORDER BY şi, dacă se foloseşte, trebuie să fie ultima clauza a \ninterogării principale.\n➢Un subquery nu poate avea propria clauză ORDER BY.\n➢Singura limită a numărului de interogări este dimensiunea \nbuffer-ului folosit de interogare.\n➢Dacă subinterogarea returnează null sau nu returneaza nici o \nlinie, atunci interogarea exterioară nu va returna nimic.\nCurs 6 - BAZE DE DATE 8', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nFuncţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza ORDER BY\n➢În mod normal (fără clauza ORDER BY) rândurile sunt \nreturnate într-o ordine convenită de Oracle însă ea \nfiind consistentă de la cerere la cerere. \n➢Cu ajutorul clauzei ORDER BY rândurile vor fi afişate în \nordinea solicitată (cu toate acestea nu se va modifica \nordinea internă a rândurilor din baza de date).\n➢Clauza ORDER BY trebuie să fie ultima clauză din cerere \n(interogare).\nCurs - Baze de date 70', '\n']","clauza ORDER BY este folosita pentru a sorta liniile din rezultat in functie de criteriile specificate.  Serverul sorteaza liniile inainte de a trimite rezultatul,  daca lipseste, liniile sunt intr-o ordine independenta de continutul lor sau de ordinea in care ele au fost adaugate in tabela. 
","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",0.39915584414786104,1.0,0.8399712452128224,1.0,0.050132693406316396,0.1846153846153846,0.8
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," nu pot răspunde la întrebare. Contextul furnizat nu conține informații despre categoriile de funcții în SQL. 
","În ce două categorii se împart funcțiile în SQL, conform cursului?","['1. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']"," nu pot răspunde la întrebare. Contextul furnizat nu conține informații despre categoriile de funcții în SQL. 
",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,0.0,0.0,0.0,0.5,0.08745825313180626,0.17391304347826086,
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['1. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","funcțiile de grup sunt utilizate pentru a calcula valori agregate, cum ar fi suma, media, numărul, valoarea minimă sau valoarea maximă a datelor dintr-un set de înregistrări.
","Ce sunt funcțiile de grup în SQL, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","funcțiile de grup sunt utilizate pentru a calcula valori agregate, cum ar fi suma, media, numărul, valoarea minimă sau valoarea maximă a datelor dintr-un set de înregistrări.
","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",0.0,0.0,0.8681961334517627,0.16666666666666666,0.03901663112717908,0.25925925925925924,0.73
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['1. ', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n \n 6.1. SINGLE ROW SUBQUERIES\n \n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31', '\n']","o subinterogare (subquery) este o instrucţiune SELECT care este inclusă în clauza unei alte instrucţiuni SELECT. 
",Ce este o subinterogare (subquery) în SQL?,"['1. ', 'copyright@www.adrian.runceanu.ro\n6. SUBQUERIES (Subinterogari)\n În SQL, subinterogările ne permit să aflăm o \ninformaţie care ne este necesară pentru a \nobţine informaţia pe care o vrem.\n➢O subinterogare (subquery) este o instrucţiune \nSELECT care este inclusă în clauza unei alte \ninstrucţiuni SELECT.\nCurs 6 - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. Subinterogări (Subqueries)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n 6.1. SINGLE ROW SUBQUERIES\n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 10', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n6. SUBQUERIES (Subinterogări)\n \n 6.1. SINGLE ROW SUBQUERIES\n \n 6.2. MULTIPLE ROW SUBQUERIES\nCurs 6 - BAZE DE DATE 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31', '\n']","o subinterogare (subquery) este o instrucţiune SELECT care este inclusă în clauza unei alte instrucţiuni SELECT. 
","O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",0.3214285714125,0.0,0.905055454086217,1.0,0.04281981560061815,0.4878048780487805,0.0
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['1. ', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nS.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n2. Limbajul de manipulare a datelor (LMD) permite \nmodificarea conţinutului tabelelor. \nComenzile utilizate sunt:\n1. INSERT – pentru adăugarea de noi linii într-o tabelă\n2. UPDATE – pentru modificarea valorilor memorate \nîntr-o tabelă\n3. DELETE – pentru ştergerea liniilor dintr-o tabelă\n62Curs - Baze de date', '\n']","limbajul de manipulare a datelor (LMD) permite modificarea conţinutului tabelelor.  Comenzile utilizate sunt:  INSERT – pentru adăugarea de noi linii într-o tabelă,  UPDATE – pentru modificarea valorilor memorate într-o tabelă,  DELETE – pentru ştergerea liniilor dintr-o tabelă. 
",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['1. ', 'copyright@www.adrian.runceanu.ro\n7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nS.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\n2. Limbajul de manipulare a datelor (LMD) permite \nmodificarea conţinutului tabelelor. \nComenzile utilizate sunt:\n1. INSERT – pentru adăugarea de noi linii într-o tabelă\n2. UPDATE – pentru modificarea valorilor memorate \nîntr-o tabelă\n3. DELETE – pentru ştergerea liniilor dintr-o tabelă\n62Curs - Baze de date', '\n']","limbajul de manipulare a datelor (LMD) permite modificarea conţinutului tabelelor.  Comenzile utilizate sunt:  INSERT – pentru adăugarea de noi linii într-o tabelă,  UPDATE – pentru modificarea valorilor memorate într-o tabelă,  DELETE – pentru ştergerea liniilor dintr-o tabelă. 
","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",0.3214285714125,1.0,0.8541645072578556,1.0,0.029048161683970807,0.1818181818181818,0.33
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31', '\n', '2. ', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n);"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21', '\n', '4. ', 'FOREIGN KEY (CursID) REFERENCES Curs(ID) \n); \n \nExplicație: \n➢ Student și Curs sunt entități separate, evitând redundanța datelor. \n➢ Inscriere leagă studenții de cursuri prin referințe, menținând integritatea datelor. \n \nScenariul 3: Sistem de gestionare a rezervărilor la un hotel \nDescriere: \nUn hotel stochează toate rezervările într-un singur tabel care include informații despre clienți, \ncamere și durata șederii. \nCerințe pentru normalizare: \n1. Crearea unui tabel Client pentru a reține informațiile clienților. \n2. Crearea unui tabel Camera pentru a stoca detalii despre camere. \n3. Crearea unui tabel Rezervare pentru a înregistra fiecare rezervare și a evita redundanțele. \n \nScenariul 4: Sistem de gestionare a angajaților și departamentelor într-o companie \nDescriere: \nO companie păstrează într-un tabel unic date despre angajați, departamente și salarii, ceea ce \nduce la redundanță și anomalii la actualizare. \nCerințe pentru normalizare: \n1. Separarea angajaților și departamentelor în tabele distincte. \n2. Crearea unui tabel Plata pentru a înregistra salariile și a menține consistența. \n \nScenariul 5: Sistem de gestionare a pacienților într-un spital \nDescriere: \nUn spital înregistrează pacienți, doctori și tratamente într-un singur tabel, ceea ce creează \nprobleme de integritate a datelor. \nCerințe pentru normalizare: \n1. Crearea unui tabel Pacient pentru a stoca datele pacienților. \n2. Crearea unui tabel Doctor pentru informațiile despre medici. \n3. Crearea unui tabel Consultatie care să lege pacienții, doctorii și tratamentele administrate. \n \n \nReferințe și resurse web \n1) Connolly, T. & Begg, C. (2014). Database Systems: A Practical Approach to Design, \nImplementation, and Management. Pearson. \n2) Silberschatz, A., Korth, H., & Sudarshan, S. (2020). Database System Concepts. McGraw-\nHill. \n3) Elmasri, R., & Navathe, S. (2016). Fundamentals of Database Systems. Pearson. \n4) W3Schools SQL Tutorial \n5) MongoDB Documentation \n6) PostgreSQL Documentation \n7) Redis Documentation', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24', '\n']","constrângerea FOREIGN KEY definește o coloană sau o combinație de coloane ca foreign key și stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite. O valoare care apare într-o tabelă trebuie să se regăsească și în cea de-a 2-a tabelă, pe coloana unde formează cheia primară. Constrângerile de tip FOREIGN KEY pot fi definite la nivel de coloană sau tabelă. 
","Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nSe poate adăuga o constrângere şi unei tabele existent (nu \nnumai odată cu crearea lui).\nÎn următorul exemplu vom creea o constrângere FOREIGN \nKEY în tabela EMP. \nConstrângerea asigură existenţa unui manager dacă \nexistă angajat în tabela EMP.\nALTER TABLE EMP\nADD CONSTRAINT FK_Mgr \nFOREIGN KEY(Mgr) REFERENCES EMP (empno)\nCurs 8 - BAZE DE DATE 31', '\n', '2. ', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n);"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21', '\n', '4. ', 'FOREIGN KEY (CursID) REFERENCES Curs(ID) \n); \n \nExplicație: \n➢ Student și Curs sunt entități separate, evitând redundanța datelor. \n➢ Inscriere leagă studenții de cursuri prin referințe, menținând integritatea datelor. \n \nScenariul 3: Sistem de gestionare a rezervărilor la un hotel \nDescriere: \nUn hotel stochează toate rezervările într-un singur tabel care include informații despre clienți, \ncamere și durata șederii. \nCerințe pentru normalizare: \n1. Crearea unui tabel Client pentru a reține informațiile clienților. \n2. Crearea unui tabel Camera pentru a stoca detalii despre camere. \n3. Crearea unui tabel Rezervare pentru a înregistra fiecare rezervare și a evita redundanțele. \n \nScenariul 4: Sistem de gestionare a angajaților și departamentelor într-o companie \nDescriere: \nO companie păstrează într-un tabel unic date despre angajați, departamente și salarii, ceea ce \nduce la redundanță și anomalii la actualizare. \nCerințe pentru normalizare: \n1. Separarea angajaților și departamentelor în tabele distincte. \n2. Crearea unui tabel Plata pentru a înregistra salariile și a menține consistența. \n \nScenariul 5: Sistem de gestionare a pacienților într-un spital \nDescriere: \nUn spital înregistrează pacienți, doctori și tratamente într-un singur tabel, ceea ce creează \nprobleme de integritate a datelor. \nCerințe pentru normalizare: \n1. Crearea unui tabel Pacient pentru a stoca datele pacienților. \n2. Crearea unui tabel Doctor pentru informațiile despre medici. \n3. Crearea unui tabel Consultatie care să lege pacienții, doctorii și tratamentele administrate. \n \n \nReferințe și resurse web \n1) Connolly, T. & Begg, C. (2014). Database Systems: A Practical Approach to Design, \nImplementation, and Management. Pearson. \n2) Silberschatz, A., Korth, H., & Sudarshan, S. (2020). Database System Concepts. McGraw-\nHill. \n3) Elmasri, R., & Navathe, S. (2016). Fundamentals of Database Systems. Pearson. \n4) W3Schools SQL Tutorial \n5) MongoDB Documentation \n6) PostgreSQL Documentation \n7) Redis Documentation', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24', '\n']","constrângerea FOREIGN KEY definește o coloană sau o combinație de coloane ca foreign key și stabilește o relație între o cheie primară și una unică în aceeași tabelă sau în tabele diferite. O valoare care apare într-o tabelă trebuie să se regăsească și în cea de-a 2-a tabelă, pe coloana unde formează cheia primară. Constrângerile de tip FOREIGN KEY pot fi definite la nivel de coloană sau tabelă. 
","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",0.39915584414786104,1.0,0.8906340248946464,1.0,0.09279771067975602,0.21359223300970873,0.4
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nVerificăm că vederea nu mai există.\nSELECT OBJECT_NAME, OBJECT_TYPE \nFROM USER_OBJECTS \nWHERE OBJECT_TYPE='VIEW';\n  \nCurs - BAZE DE DATE 48"", '\n']","o vedere (view) în SQL este o cerere SQL care are un nume și care se utilizează pentru a vizualiza conținutul unei tabele.  
","Ce este o vedere (view) în SQL, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nVerificăm că vederea nu mai există.\nSELECT OBJECT_NAME, OBJECT_TYPE \nFROM USER_OBJECTS \nWHERE OBJECT_TYPE='VIEW';\n  \nCurs - BAZE DE DATE 48"", '\n']","o vedere (view) în SQL este o cerere SQL care are un nume și care se utilizează pentru a vizualiza conținutul unei tabele.  
","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",0.0,0.0,0.8895631194891283,1.0,0.03787865612579481,0.24489795918367346,0.5
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['1. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '2. ', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","secvențele se folosesc pentru a micșora timpul necesar din partea utilizatorilor pentru a-și crea cererile SQL. 
","De ce se folosesc secvențele în SQL, potrivit cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '2. ', ""copyright@www.adrian.runceanu.ro\nExemplu 2 - Utilizarea unei secvente: \n• Pentru inserarea in baza de date in tabela de \ndepartamente vom folosi in cererea noastra SQL \nsecventa pe care am creat-o mai inainte. \n• Pentru inserare se va folosi cererea urmatoare:\nINSERT INTO dept(deptno, dname, loc)\nVALUES (dept_seq_1.NEXTVAL, 'Support', 'Timisoara');\nCurs - BAZE DE DATE 18"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\ntt\n1) Securitatea sistemului acopera accesarea si \nutilizarea bazei de date la nivelul sistemului, cum \nar fi: numele utilizatorului si parola, spatiul pe \ndisc alocat utilizatorilor, si operatiile de sistem \npermise utilizatorilor. \nCurs - BAZE DE DATE 6\nhttps://www.scnsoft.com/blog/database-security-best-practices', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","secvențele se folosesc pentru a micșora timpul necesar din partea utilizatorilor pentru a-și crea cererile SQL. 
","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",0.19999999998,0.0,0.9332570004237469,0.0,0.022974228909810365,0.16666666666666669,0.0
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['1. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7', '\n']","securitatea bazei de date poate fi clasificata în doua categorii: securitatea sistemului si securitatea datelor. 
","Ce acoperă securitatea bazei de date, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7', '\n']","securitatea bazei de date poate fi clasificata în doua categorii: securitatea sistemului si securitatea datelor. 
","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",0.19999999998,1.0,0.7998768301344238,1.0,0.06660282196825948,0.2222222222222222,0.0
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['1. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Sinonimele sunt niste aliasuri pe care le putem \nadauga oricarui obiect din baza de date pentru a \nsimplifica accesul la aceasta resursa. \n➢Sinonimele sunt folosite pentru cazul in care exista in \ndiferite scheme din baza de date tabele cu mai multe \ndenumiri, cand denumirile obiectelor sunt foarte \nlungi si/sau greu de tinut minte de catre \nprogramatorul care trebuie sa le foloseasca si in alte \ncazuri. \nCurs - BAZE DE DATE 42', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66', '\n']"," nu se ofera informatii despre avantajele bazelor de date fata de fisierele traditionale. 
","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Sinonimele sunt niste aliasuri pe care le putem \nadauga oricarui obiect din baza de date pentru a \nsimplifica accesul la aceasta resursa. \n➢Sinonimele sunt folosite pentru cazul in care exista in \ndiferite scheme din baza de date tabele cu mai multe \ndenumiri, cand denumirile obiectelor sunt foarte \nlungi si/sau greu de tinut minte de catre \nprogramatorul care trebuie sa le foloseasca si in alte \ncazuri. \nCurs - BAZE DE DATE 42', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSisteme de baze de date\nAlte clasificari ale sistemelor de baze de date:\n1. Clasificare după numărul de utilizatori\n2. Clasificare după numărul de staţii pe care este \nstocată baza de date\nCurs - Baze de date 66', '\n']"," nu se ofera informatii despre avantajele bazelor de date fata de fisierele traditionale. 
","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",0.0,0.0,0.0,1.0,0.0,0.07407407407407408,0.0
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"['1. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n']","modelul relațional de baze de date are următoarele caracteristici:
* O parte structurală, care descrie schema bazei de date ca o colecție de scheme de relații și o bază de date ca o colecție de relații.
* O parte de integritate, care se bazează pe chei primare și chei străine.
* O parte de manipulare, care se bazează pe algebra relațională și calcul relațional. 
","Ce caracteristici are modelul relațional de baze de date, conform cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\n1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\nCurs - Baze de date 36', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n Modelul de date obiect-relaţional\n(Object-Relational Model) reprezintă\nextinderea modelului relaţional cu\ncaracteristici ale modelului obiect, extindere\nnecesară pentru realizarea bazelor de date\ncare definesc şi prelucrează tipuri de date\ncomplexe.\nCurs - Baze de date 58', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n']","modelul relațional de baze de date are următoarele caracteristici:
* O parte structurală, care descrie schema bazei de date ca o colecție de scheme de relații și o bază de date ca o colecție de relații.
* O parte de integritate, care se bazează pe chei primare și chei străine.
* O parte de manipulare, care se bazează pe algebra relațională și calcul relațional. 
","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",0.49999999995,0.6666666666666666,0.873506853377019,1.0,0.025963742211370638,0.19148936170212766,0.33
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['1. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a \nbazelor de date\n46Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n']","'Înainte de a începe să realizăm o aplicaţie cu baze de date relaţionale trebuie să cunoaştem principalele concepte din teoria relaţională. Acestea sunt absolut necesare, atât pentru analiza şi proiectarea bazei de date relaţionale, cât şi pentru elaborarea programelor de aplicaţie într-un SGBD relaţional ales.' 
","Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['1. ', 'copyright@www.adrian.runceanu.ro\n1.4. Modelul de date obiect-relaţional\n✓ În esenţă, modelul obiect-relaţional păstrează \nstructurarea datelor în relaţii (reprezentate ca tabele), \ndar adaugă posibilitatea definirii unor noi tipuri de \ndate, pentru domeniile de valori ale atributelor. \n✓Tipurile de date definite de utilizator pot fi extinse \nprin mecanismul de moştenire şi pentru fiecare tip sau \nsubtip se pot defini metode pe care le pot executa \nobiectele de acel tip.\nCurs - Baze de date 59', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\nCurs - Baze de date 54', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\nPrezentăm în continuare aceste concepte:\n1. DOMENIUL reprezintă un ansamblu de valori, \ncaracterizat printr-un nume. \n➢Domeniul se poate definit explicit, prin \nenumerarea tuturor valorilor care aparţin \nacestuia, sau implicit, prin precizarea \nproprietăţilor pe care le au valorile domeniului \nrespectiv.\nCurs - Baze de date 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a \nbazelor de date\n46Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConcepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\nCurs - Baze de date 47', '\n']","'Înainte de a începe să realizăm o aplicaţie cu baze de date relaţionale trebuie să cunoaştem principalele concepte din teoria relaţională. Acestea sunt absolut necesare, atât pentru analiza şi proiectarea bazei de date relaţionale, cât şi pentru elaborarea programelor de aplicaţie într-un SGBD relaţional ales.' 
","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",0.0,0.0,0.897237146877428,1.0,0.0,0.0273972602739726,0.0
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['1. ', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 57', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 35', '\n']"," Modelul relațional este cel mai utilizat model de baze de date, alături de modelul orientat obiect. 
","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['1. ', 'copyright@www.adrian.runceanu.ro\nModele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\nCurs - Baze de date\n 34', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 60', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 19', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 57', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\nCurs - Baze de date 35', '\n']"," Modelul relațional este cel mai utilizat model de baze de date, alături de modelul orientat obiect. 
","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",0.0,0.0,0.8794495133604364,0.0,0.024909628623695168,0.19999999999999998,0.0
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Permite lucrul cu depozite de date (Data Warehouse) \ncare conţin date multidimensionale (cu tehnologia \nOLAP)\n• Conţine foarte multe produse ceea ce-l face să fie o \nplatformă pentru baze de date:\n– servere (Oracle 8, Application, Security, Internet Commerce, \netc)\n– instrumente (Designer, Developer, Express, WebDB, etc)\n– aplicaţii (Financials, Projects, Market Manager, \nManufacturing, etc)\n12Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle Database 12c prezintă o arhitectură nouă, cu \nmai multe entităţi găzduite, care permite unificarea \nrapidă a mai multor baze de date şi gestionarea \nacestora ca serviciu cloud. \n➢Oracle Database 12c include, de asemenea, capacităţi \nde procesare a datelor în memorie, care oferă o \nperformanţă analitică inovatoare. \n➢Inovaţiile suplimentare pentru baze de date oferă noi \nnivele de eficienţă, performanţă, securitate şi \ndisponibilitate.[*]\n21Curs - Baze de date\n[*] https://www.oracle.com/ro/database/index.html', '\n']","SGBD-ul Oracle a evoluat de la o arhitectura client/server la o arhitectura cloud, cu mai multe entitati gazduite, in Oracle Database 12c. Acesta a fost extins cu facilitati OO, permite lucrul cu depozite de date multidimensionale si ofera instrumente si aplicatii diverse. 
",Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n Componentele care formează arhitectura de bază \nOracle (figura urmatoare) sunt dispuse într-o \nconfiguraţie client/server. \n  Aceste componente sunt plasate pe calculatoare \ndiferite într-o reţea asigurând funcţionalităţi specifice, \nastfel: \n- serverul asigură memorarea şi manipularea datelor, \nprecum şi administrarea bazei de date,\n- iar clientul asigură interfaţa cu utilizatorul şi lansează \naplicaţia care accesează datele din baza de date. \n23Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle este un sistem de gestiune a bazelor de date \n(SGBD) complet relaţional, extins, cu facilităţi din \ntehnologia orientată obiect (OO). \n➢SGBD-ul Oracle este realizat de firma Oracle \nCorporation care a fost înfiinţată în anul 1977 în SUA -\nCalifornia şi acum este cel mai mare furnizor de \nsoftware de gestiunea datelor. \n➢Acesta este operaţional pe toată gama de calculatoare \n(micro, mini, mainframe) sub diverse sisteme de \noperare. \n5Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Permite lucrul cu depozite de date (Data Warehouse) \ncare conţin date multidimensionale (cu tehnologia \nOLAP)\n• Conţine foarte multe produse ceea ce-l face să fie o \nplatformă pentru baze de date:\n– servere (Oracle 8, Application, Security, Internet Commerce, \netc)\n– instrumente (Designer, Developer, Express, WebDB, etc)\n– aplicaţii (Financials, Projects, Market Manager, \nManufacturing, etc)\n12Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n➢Oracle Database 12c prezintă o arhitectură nouă, cu \nmai multe entităţi găzduite, care permite unificarea \nrapidă a mai multor baze de date şi gestionarea \nacestora ca serviciu cloud. \n➢Oracle Database 12c include, de asemenea, capacităţi \nde procesare a datelor în memorie, care oferă o \nperformanţă analitică inovatoare. \n➢Inovaţiile suplimentare pentru baze de date oferă noi \nnivele de eficienţă, performanţă, securitate şi \ndisponibilitate.[*]\n21Curs - Baze de date\n[*] https://www.oracle.com/ro/database/index.html', '\n']","SGBD-ul Oracle a evoluat de la o arhitectura client/server la o arhitectura cloud, cu mai multe entitati gazduite, in Oracle Database 12c. Acesta a fost extins cu facilitati OO, permite lucrul cu depozite de date multidimensionale si ofera instrumente si aplicatii diverse. 
","Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",0.07142857142142857,0.5,0.8259168858802112,0.8,0.1713461058400089,0.25,0.22
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['1. ', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nREZULTAT\n Numarul coloanelor din rezultat este egal cu \nnumarul expresiilor din lista aflata pe clauza \nSELECT. \n  Aceste expresii dau si numele coloanelor din \nrezultat.\n  În lipsa clauzei DISTINCT, numarul de linii din \nrezultat este egal cu numarul liniilor din tabela \ncare îndeplinesc conditia WHERE sau, când \nclauza respectiva lipseste, cu numarul total de \nlinii din tabela.\nCurs - Baze de date 7', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n4.3.1. Clauza GROUP BY\n➢Folosind GROUP BY nu se pot extrage şi coloane \nindividuale, ci doar coloane ce rămân identice în tot \ngrupul.\n➢Folosind WHERE se pot exclude rânduri, înaintea \nîmpărţirii lor în grupuri.\n➢Nu pot fi folosite aliasuri de coloane în clauza GROUP \nBY.\n➢Implicit, rândurile sunt sortate crescător după coloana \n(coloanele) specificate în GROUP BY. \n➢Acest lucru poate fi schimbat folosind ORDER BY.\nCurs 5 - BAZE DE DATE 32', '\n']","clauza `WHERE` este folosita pentru a filtra datele înainte de a fi grupate, `GROUP BY` pentru a agrupa datele și `ORDER BY` pentru a sorta rezultatele finale. 
","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['1. ', 'copyright@www.adrian.runceanu.ro\nEFECT\n Daca exista cuvântul cheie DISTINCT, din \nrezultat se elimina liniile duplicat.\n  Înainte de a trimite rezultatul, serverul îl \nsorteaza în functie de criteriile specificate de \nclauza ORDER BY.\n  În cazul în care ORDER BY lipseste, liniile din \nrezultat sunt într-o ordine independenta de \ncontinutul lor sau de ordinea în care ele au fost \nadaugate în tabela.\nCurs - Baze de date 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nREZULTAT\n Numarul coloanelor din rezultat este egal cu \nnumarul expresiilor din lista aflata pe clauza \nSELECT. \n  Aceste expresii dau si numele coloanelor din \nrezultat.\n  În lipsa clauzei DISTINCT, numarul de linii din \nrezultat este egal cu numarul liniilor din tabela \ncare îndeplinesc conditia WHERE sau, când \nclauza respectiva lipseste, cu numarul total de \nlinii din tabela.\nCurs - Baze de date 7', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n4.3.1. Clauza GROUP BY\n➢Folosind GROUP BY nu se pot extrage şi coloane \nindividuale, ci doar coloane ce rămân identice în tot \ngrupul.\n➢Folosind WHERE se pot exclude rânduri, înaintea \nîmpărţirii lor în grupuri.\n➢Nu pot fi folosite aliasuri de coloane în clauza GROUP \nBY.\n➢Implicit, rândurile sunt sortate crescător după coloana \n(coloanele) specificate în GROUP BY. \n➢Acest lucru poate fi schimbat folosind ORDER BY.\nCurs 5 - BAZE DE DATE 32', '\n']","clauza `WHERE` este folosita pentru a filtra datele înainte de a fi grupate, `GROUP BY` pentru a agrupa datele și `ORDER BY` pentru a sorta rezultatele finale. 
","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",0.07142857142142857,0.5,0.834042792886705,1.0,0.03661266708615257,0.16216216216216217,0.75
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['1. ', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.3. Imbricarea functiilor de grup\nFuncţiile de grup pot fi imbricate cu o adâncime de 2.\nRezultatul obtinut - Salariul mediu maxim. \nCurs 5 - BAZE DE DATE 52', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n']"," nu se poate raspunde la intrebare, deoarece informatiile din CONTEXT nu contin informatii despre functiile UPPER, LOWER si INITCAP. 
","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['1. ', 'copyright@www.adrian.runceanu.ro\n•Operatorul ALL din interogarea principala compara o \nvaloare cu oricare valoare returnata de subinterogare. \nAstfel:\n> ALL inseamna mai mare decat maximul\n< ALL inseamna mai mic decat minimul\nCurs 6 - BAZE DE DATE 52', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.3. Imbricarea functiilor de grup\nFuncţiile de grup pot fi imbricate cu o adâncime de 2.\nRezultatul obtinut - Salariul mediu maxim. \nCurs 5 - BAZE DE DATE 52', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n']"," nu se poate raspunde la intrebare, deoarece informatiile din CONTEXT nu contin informatii despre functiile UPPER, LOWER si INITCAP. 
","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",0.0,0.0,0.0,0.5,0.07681104116622756,0.10526315789473684,
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['1. ', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\nSubcereri din mai multe tabele\n  Subcererile (subinterogările) nu sunt limitate \nla o singură interogare (cerere). \n  Aşa cum se poate observa în exemplul \nurmător, pot fi mai mult de o singură \ninterogare. \n  De asemenea se pot face interogări din \ntabele diferite.\nCurs 6 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']","o subinterogare single-row se execută mai întâi și returnează o singură valoare. Această valoare este apoi folosită de interogarea principală în clauza WHERE. Subinterogarea single-row poate include mai multe tabele și poate fi corelată cu interogarea principală. 
",Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['1. ', 'copyright@www.adrian.runceanu.ro\nSfaturi în utilizarea subinterogarilor\n1. Includerea subinterogarilor în paranteze\n2. Plasarea subinterogarilor în partea dreapta a \noperatorului de comparare\n3. A nu se adauga clauza ORDER BY într-o \nsubinterogare\n4. Folosirea operatorilor single-row în subinterogari \nsingle-row\n5. Folosirea operatorilor multiple-row în \nsubinterogari multiple-row\nCurs 6 - BAZE DE DATE 67', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Exemplul este format din 3 blocuri de cereri: \n– o cerere exterioara\n– doua cereri interne\n• Blocurile de cereri interne sunt primele executate, \nproducand rezultatele cererii: FUNCTIONAR (CLERK), \nrespectiv 1300. \n• Blocul exterior de cereri este apoi procesat si foloseste \nvalorile returnate de catre cererile interne pentru a \nfinaliza propriile conditii de cautare.\n• Ambele cereri interne returneaza valori singulare \n(FUNCTIONAR si 1300), astfel ca aceasta instructiune \nSQL este denumita o subinterogare single-row.\nCurs 6 - BAZE DE DATE 15', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\nSubcereri din mai multe tabele\n  Subcererile (subinterogările) nu sunt limitate \nla o singură interogare (cerere). \n  Aşa cum se poate observa în exemplul \nurmător, pot fi mai mult de o singură \ninterogare. \n  De asemenea se pot face interogări din \ntabele diferite.\nCurs 6 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']","o subinterogare single-row se execută mai întâi și returnează o singură valoare. Această valoare este apoi folosită de interogarea principală în clauza WHERE. Subinterogarea single-row poate include mai multe tabele și poate fi corelată cu interogarea principală. 
","O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",0.37499999998125,0.5,0.8133716207395771,0.4,0.15467334611288458,0.2962962962962963,0.57
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['1. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Sinonimele sunt niste aliasuri pe care le putem \nadauga oricarui obiect din baza de date pentru a \nsimplifica accesul la aceasta resursa. \n➢Sinonimele sunt folosite pentru cazul in care exista in \ndiferite scheme din baza de date tabele cu mai multe \ndenumiri, cand denumirile obiectelor sunt foarte \nlungi si/sau greu de tinut minte de catre \nprogramatorul care trebuie sa le foloseasca si in alte \ncazuri. \nCurs - BAZE DE DATE 42', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCand se creaza indecșii?\nExista mai multe situatii care necesita crearea indecsilor in \nbaza de date. \nUn index este creat daca:\n➢o singura coloana contine o varietate foarte mare de \nvalori si un numar mare de valori.\n➢campul din baza de date contine multe inregistrari de \ntip null\n➢campurile sunt folosite foarte frecvent in conditile de \nselectare a inregistrarilor sau in cazuri de JOIN\nCurs - BAZE DE DATE 31', '\n']","instrucțiunea UPDATE poate fi utilizată împreună cu o subinterogare pentru a actualiza date selective, dar contextul furnizat nu oferă informații despre cum se realizează acest lucru. 
",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['1. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCand nu se creaza indecsii si de ce?\n➢In general nu tot timpul este necesar si bine sa fie creati \nindexi in baza de date.\n➢O creare excesiva de indecsi in baza de date are si multe \nneajunsuri. \n➢In momentul in care sunt adaugati indecsi, baza de date \nface o repunere la zi a lor pentru fiecare operatie care \neste executata. \n➢In momentul in care sunt creati prea multi indecsi \noperatile de extragere din baza de date isi amelioreaza \nviteza doar cu un raport mic dar pentru fiecare \noperatiune de inserare sau stergere timpul necesar \ncreste simtitor precum si resursele folosite. \nCurs - BAZE DE DATE 33', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nCrearea indecșilor \nIndecsii sunt creati in doua feluri:\n1. Automat: In momentul in care se creaza o cheie \nprimara asupra tabelelor, in momentul in care se creaza \no restrictie ca inregistrarile din baza de date sa fie unice \nsi in alte situatii asemanatoare.\n2. Manual: Se pot defini indecsi manuali care nu trebuie \nsa contina o restrictie cum este cazul indecsilor unici.\nCurs - BAZE DE DATE 28', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Sinonimele sunt niste aliasuri pe care le putem \nadauga oricarui obiect din baza de date pentru a \nsimplifica accesul la aceasta resursa. \n➢Sinonimele sunt folosite pentru cazul in care exista in \ndiferite scheme din baza de date tabele cu mai multe \ndenumiri, cand denumirile obiectelor sunt foarte \nlungi si/sau greu de tinut minte de catre \nprogramatorul care trebuie sa le foloseasca si in alte \ncazuri. \nCurs - BAZE DE DATE 42', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCand se creaza indecșii?\nExista mai multe situatii care necesita crearea indecsilor in \nbaza de date. \nUn index este creat daca:\n➢o singura coloana contine o varietate foarte mare de \nvalori si un numar mare de valori.\n➢campul din baza de date contine multe inregistrari de \ntip null\n➢campurile sunt folosite foarte frecvent in conditile de \nselectare a inregistrarilor sau in cazuri de JOIN\nCurs - BAZE DE DATE 31', '\n']","instrucțiunea UPDATE poate fi utilizată împreună cu o subinterogare pentru a actualiza date selective, dar contextul furnizat nu oferă informații despre cum se realizează acest lucru. 
",UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,0.0,0.0,0.0,0.5,0.08922776443800856,0.22950819672131145,0.5
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","['1. ', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n);"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nO FOREIGN KEY este definită utilizând o combinaţie a \nurmătoarelor cuvinte cheie:\n⮚FOREIGN KEY este utilizată pentru a defini o coloană \nîn tabelul copil la nivel de tabela \n⮚REFERENCES identifică tabela şi coloana în tabela \npărinte \n⮚ON DELETE CASCADE indică faptul că atunci când \nrândul din tabela părinte va fi şters, rândul dependent \ndin tabela copil va fi de asemenea şters. \n⮚ON DELETE SET NULL converteşte valorile FOREIGN \nKEY în valori nule atunci când valoarea părinte este \nştearsă. \nCurs 8 - BAZE DE DATE 25', '\n']","constrângerile de integritate asigură securitatea și consistența datelor prin stabilirea unor reguli specifice pentru valorile din tabelă. 
- **Cheia primară (PRIMARY KEY)** garantează unicitatea fiecărei înregistrări dintr-un tabel, prevenind duplicarea informațiilor.
- **Cheia străină (FOREIGN KEY)** asigură relația corectă între tabele, garantând că datele din tabelele ""copil"" se referă la date existente în tabelele ""părinte"".
- **Constrângeri CHECK** restricționează valorile care pot fi introduse într-o coloană, asigurând integritatea datelor și conformitatea cu regulile specificate.
- **NOT NULL** impune ca un atribut să nu fie gol, asigurând completarea obligatorie a informațiilor.
- **UNIQUE** garantează că un atribut are valori unice, prevenind duplicarea datelor.
 
Folosind aceste constrângeri, puteți controla integritatea datelor, prevenind erorile și asigurând o consistență a datelor.
","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","['1. ', ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n);"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nObservaţii\n1. Dacă se activează o constrângere, această \nconstrângere se aplică la toate datele din tabela.\n1. Dacă se activează o constrângere UNIQUE sau \nPRIMARY se creează automat un index UNIQUE sau \nPRIMARY.\n1. Clauza ENABLE se poate utiliza în ambele declaraţii \nCREATE TABLE cât şi ALTER TABLE.\nCurs 8 - BAZE DE DATE 41', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n• După cum am observat a dispărut din sintaxa \nFOREIGN KEY.\n• O constrângere de tip FOREIGN KEY este \ndefinită într-o tabela copil, iar tabela care \nconţine coloana la care se face referinţă este \npărintele.\nCurs 8 - BAZE DE DATE 24', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea FOREIGN KEY\n• Constrângerea FOREIGN KEY defineşte o coloană \nsau o combinaţie de coloane ca foreign key şi \nstabileşte o relaţie între o cheie primară şi una unică \nîn aceeaşi tabela sau în tabele diferite. \n• O valoare care apare într-o tabela trebuie să se \nregăsească şi în cea de-a 2-a tabela, pe coloana \nunde formează cheia primară. \n• Constrângerile de tip FOREIGN KEY pot fi definite la \nnivel de coloană sau tabela.\nCurs 8 - BAZE DE DATE 21', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nO FOREIGN KEY este definită utilizând o combinaţie a \nurmătoarelor cuvinte cheie:\n⮚FOREIGN KEY este utilizată pentru a defini o coloană \nîn tabelul copil la nivel de tabela \n⮚REFERENCES identifică tabela şi coloana în tabela \npărinte \n⮚ON DELETE CASCADE indică faptul că atunci când \nrândul din tabela părinte va fi şters, rândul dependent \ndin tabela copil va fi de asemenea şters. \n⮚ON DELETE SET NULL converteşte valorile FOREIGN \nKEY în valori nule atunci când valoarea părinte este \nştearsă. \nCurs 8 - BAZE DE DATE 25', '\n']","constrângerile de integritate asigură securitatea și consistența datelor prin stabilirea unor reguli specifice pentru valorile din tabelă. 
- **Cheia primară (PRIMARY KEY)** garantează unicitatea fiecărei înregistrări dintr-un tabel, prevenind duplicarea informațiilor.
- **Cheia străină (FOREIGN KEY)** asigură relația corectă între tabele, garantând că datele din tabelele ""copil"" se referă la date existente în tabelele ""părinte"".
- **Constrângeri CHECK** restricționează valorile care pot fi introduse într-o coloană, asigurând integritatea datelor și conformitatea cu regulile specificate.
- **NOT NULL** impune ca un atribut să nu fie gol, asigurând completarea obligatorie a informațiilor.
- **UNIQUE** garantează că un atribut are valori unice, prevenind duplicarea datelor.
 
Folosind aceste constrângeri, puteți controla integritatea datelor, prevenind erorile și asigurând o consistență a datelor.
","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",0.3214285714125,0.5,0.8442644957215223,0.8,0.03419798030780472,0.1694915254237288,0.61
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nPentru a vedea faptul că vederea a fost creată într-adevăr folosim aceeaşi \nsintaxă ca mai sus, deci vom interoga tabela de obiecte USER_OBJECTS. \nSELECT OBJECT_NAME, OBJECT_TYPE \nFROM USER_OBJECTS \nWHERE OBJECT_TYPE = 'VIEW'\nCurs - BAZE DE DATE 15"", '\n']","vederile oferă o serie de avantaje, printre care:

- Simplifică interogările complexe: Subcererea care defineşte vederea poate conţine cereri SELECT complexe incluzând join-uri, grupuri sau alte subcereri.
- Oferă o interfață mai simplă pentru utilizatori: Vederile pot fi create pentru a ascunde detaliile complexe ale bazei de date, expunând doar informațiile relevante utilizatorilor.
- Creșterea securității: Prin controlul accesului la vederi, se pot limita drepturile utilizatorilor la anumite date din baza de date. 
- Îmbunătățirea performanței: Vederile pot fi optimizate pentru a executa rapid interogările.
",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nReguli pentru crearea vederilor\n• Subcererea care defineşte vederea poate conţine cereri \nSELECT complexe incluzând join-uri, grupuri sau alte \nsubcereri. \n• Subcererea principală a vederii nu trebuie să conţina \nclauza ORDER BY. Aceasta se utilizează când se extrag \ndate din vedere.\n• Dacă nu se specifică un nume pentru constrângerea \nWITH CHECK OPTION, sistemul atribuie în mod implicit \nun nume\n• Cu ajutorul opţiunii OR REPLACE vederea este alterată\nfără a o distruge, a o recrea şi a reacorda drepturi asupra \nei. Curs - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nPentru a vedea faptul că vederea a fost creată într-adevăr folosim aceeaşi \nsintaxă ca mai sus, deci vom interoga tabela de obiecte USER_OBJECTS. \nSELECT OBJECT_NAME, OBJECT_TYPE \nFROM USER_OBJECTS \nWHERE OBJECT_TYPE = 'VIEW'\nCurs - BAZE DE DATE 15"", '\n']","vederile oferă o serie de avantaje, printre care:

- Simplifică interogările complexe: Subcererea care defineşte vederea poate conţine cereri SELECT complexe incluzând join-uri, grupuri sau alte subcereri.
- Oferă o interfață mai simplă pentru utilizatori: Vederile pot fi create pentru a ascunde detaliile complexe ale bazei de date, expunând doar informațiile relevante utilizatorilor.
- Creșterea securității: Prin controlul accesului la vederi, se pot limita drepturile utilizatorilor la anumite date din baza de date. 
- Îmbunătățirea performanței: Vederile pot fi optimizate pentru a executa rapid interogările.
","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",0.0,0.0,0.8572227900810537,0.18181818181818182,0.013580197220741514,0.13432835820895522,0.38
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['1. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', '\n']","Secventele contribuie la performanta bazelor de date prin generarea de numere unice de identificare (de ex. chei primare) in mod eficient, evitand problemele de sincronizare si consumul excesiv de timp al procesorului in cazul in care mai multe aplicatii acceseaza simultan baza de date.
",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['1. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\nDe ce folosim secventele?\n➢Aplicaţiile au în general nevoie în cadrul tabelelor de \na conţine unele numere de identificare unice per \ntabelă cum este şi cazul cheilor primare. \n➢Acestea pot fi calculate de către aplicaţie direct \nfolosind anumiţi algoritmi în funcţie de înregistrările \ndeja existente şi apoi pot fi introduse în baza de date \nodată cu celelalte date. \nCurs - BAZE DE DATE 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1. Secventele\n➢În acest caz însă apar mari probleme de sincronizare \nastfel încât dacă mai multe instanţe a aceleaşi \naplicaţii accesează în acelaşi timp aproximativ datele \ndeja existente în baza de date rezultatul cheilor va fi \nacelaşi. \n➢De asemenea sunt necesare de la una la mai multe \ncereri la baza de date pentru a determina care sunt \nvalorile deja existente astfel încât aplicaţia consuma \nmai mult timp procesor pentru fiecare inserare şi \ndevine mult mai lentă. \nCurs - BAZE DE DATE 7', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', '\n']","Secventele contribuie la performanta bazelor de date prin generarea de numere unice de identificare (de ex. chei primare) in mod eficient, evitand problemele de sincronizare si consumul excesiv de timp al procesorului in cazul in care mai multe aplicatii acceseaza simultan baza de date.
","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",0.0,0.0,0.8839128722251206,0.3333333333333333,0.03821774391346778,0.15,0.5
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date', '\n', '4. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n3. Instrumentele sunt componente destinate \nîntreţinerii şi bunei funcţionări a unei BD Oracle. \nENTERPRISE MANAGER CONSOLE conţine mai multe \nutilitare destinate administratorului BD:\n- deschidere / închidere BD\n- autorizarea accesului\n- refacerea BD\n- conversii de date\n31Curs - Baze de date', '\n']","controlul accesului și gestionarea privilegiilor în Oracle se face prin diverse instrumente, precum ENTERPRISE MANAGER CONSOLE, care permit administratorului BD să gestioneze diverse operațiuni, inclusiv:
- autorizarea accesului. 
",Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11Curs - Baze de date\nSGBD Oracle 8i (continuare)', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• În Oracle 9i APPLICATION SERVER se pot creea \nşi utiliza aplicaţii Web care sunt foarte rapide şi \npermit integrarea serviciilor de Internet. \n18Curs - Baze de date', '\n', '4. ', '2.4. ORACLE Database 11g Expres Edition\nPas 2: La un moment se va solicita introducerea unei parole \npentru utilizatorul SYS si pentru SYSTEM. Aceasta trebuie \nretinuta pentru a putea fi utilizata ulterior.\n43Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n2.2. Arhitectura SGBD-ului ORACLE\n3. Instrumentele sunt componente destinate \nîntreţinerii şi bunei funcţionări a unei BD Oracle. \nENTERPRISE MANAGER CONSOLE conţine mai multe \nutilitare destinate administratorului BD:\n- deschidere / închidere BD\n- autorizarea accesului\n- refacerea BD\n- conversii de date\n31Curs - Baze de date', '\n']","controlul accesului și gestionarea privilegiilor în Oracle se face prin diverse instrumente, precum ENTERPRISE MANAGER CONSOLE, care permit administratorului BD să gestioneze diverse operațiuni, inclusiv:
- autorizarea accesului. 
","Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",0.0,0.0,0.9289386706304125,0.5,0.018154533256373548,0.14492753623188406,0.0
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['1. ', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței', '\n', '2. ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor.', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nUtilizatorii: \nDiferite persoane sau grupuri de \npersoane care folosesc informaţiile sunt\ndefinite ca utilizatori.\nHardware: De obicei noţiunea de \nhardware constă din device-uri fizice, cum \nar fi harddisk-uri, imprimante, interfeţe de \nintrare/ieşire şi procesorul de date cu\nmemoria sa asociată.\nCurs - Baze de date\n 23', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 41', '\n']","sistemele de fișiere tradiționale au limitări semnificative, cum ar fi redundanța și inconsistența datelor, lipsa integrității, dificultăți în accesul la date, lipsa securității și dificultăți în partajarea datelor.  Bazele de date moderne rezolvă aceste probleme prin utilizarea unui sistem centralizat de gestionare a datelor, oferind avantaje precum eliminarea redundanței, îmbunătățirea integrității, acces flexibil la date, securitate sporită și partajare eficientă a datelor. 
",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['1. ', '2 \n \n1.2.2. Limitări ale sistemelor tradiționale de fișiere: \n1. Redundanță și inconsistență - Aceleași date pot fi stocate în mai multe fișiere, ducând la \ninconsistențe și consum excesiv de spațiu. \n2. Lipsa integrității  - Nu există mecanisme automate pentru a asigura corectitudinea și \nvaliditatea datelor. \n3. Dificultăți în accesul la date  - Accesul la date necesită dezvoltarea de programe \npersonalizate pentru fiecare tip de interogare. \n4. Lipsa securității  - Nu există mecanisme eficiente pentru restricționarea accesului la \nanumite date. \n5. Dificultăți în partajarea datelor - Accesul simultan la fișiere de către mai mulți utilizatori \neste dificil de gestionat. \n \n1.3. Bazele de date moderne \nBazele de date elimină majoritatea acestor probleme prin utilizarea unui sistem centralizat \nde gestionare a datelor. Acestea permit accesul eficient la informații, reduc redundanța și oferă \nmecanisme avansate de securitate și integritate. \n \n1.4.Avantajele bazelor de date față de fișierele tradiționale: \n1. Eliminarea redundanței  - Datele sunt normalizate și stocate într -un mod care \nminimizează duplicările. \n2. Îmbunătățirea integrității - Se pot defini constrângeri care asigură coerența și validitatea \ndatelor. \n3. Acces flexibil la date  - Utilizatorii pot efectua interogări complexe folosind limbaje \nprecum SQL. \n4. Securitate sporită - Se pot implementa niveluri diferite de acces pentru utilizatori. \n5. Partajare eficientă a datelor - Mai mulți utilizatori pot accesa simultan baza de date fără \na afecta integritatea informațiilor. \n \n \n1.5. Componentele unui sistem de baze de date \nUn sistem de baze de date este compus din mai multe elemente esențiale care asigură \nfuncționarea și gestionarea eficientă a datelor. Aceste componente includ hardware, software, date, \nutilizatori și proceduri.  \n \n \n1. Hardware \nHardware-ul reprezintă infrastructura fizică necesară pentru \noperarea unei baze de date. Acesta include: \n✓ Servere și stații de lucru \n✓ Dispozitive de stocare (SSD, HDD, unități cloud) \n✓ Rețele de comunicație \n✓ Procesoare și memorie RAM pentru optimizarea \nperformanței', '\n', '2. ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor.', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nUtilizatorii: \nDiferite persoane sau grupuri de \npersoane care folosesc informaţiile sunt\ndefinite ca utilizatori.\nHardware: De obicei noţiunea de \nhardware constă din device-uri fizice, cum \nar fi harddisk-uri, imprimante, interfeţe de \nintrare/ieşire şi procesorul de date cu\nmemoria sa asociată.\nCurs - Baze de date\n 23', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 41', '\n']","sistemele de fișiere tradiționale au limitări semnificative, cum ar fi redundanța și inconsistența datelor, lipsa integrității, dificultăți în accesul la date, lipsa securității și dificultăți în partajarea datelor.  Bazele de date moderne rezolvă aceste probleme prin utilizarea unui sistem centralizat de gestionare a datelor, oferind avantaje precum eliminarea redundanței, îmbunătățirea integrității, acces flexibil la date, securitate sporită și partajare eficientă a datelor. 
","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",0.4499999999775,1.0,0.848027842659563,1.0,0.03630906651274709,0.17886178861788618,0.74
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","['1. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","Modelul relational asigura integritatea datelor prin utilizarea cheilor primare și a cheilor străine. Acestea definesc relațiile între tabele, asigurând consistența și corectitudinea datelor. SQL joacă un rol crucial în implementarea constrângerilor, permițând definirea regulilor de integritate a datelor, cum ar fi:

- **Cheia primară**:  ""Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare."" 
- **Cheia străină**: ""Cheile străine definesc relațiile între tabele."" 

Cu ajutorul instrucțiunilor SQL, se pot defini constrângeri pentru a garanta:

- **Unicitatea datelor**: prin definirea cheii primare.
- **Întreaga**: prin verificarea existenței datelor din tabelele legate prin cheile străine.

Exemple de instrucțiuni SQL:

```sql
-- Definirea cheii primare
ALTER TABLE Student
ADD CONSTRAINT PK_Student PRIMARY KEY (ID_Student);

-- Definirea cheii străine
ALTER TABLE Inscriere
ADD CONSTRAINT FK_Student FOREIGN KEY (ID_Student) REFERENCES Student(ID_Student);
```
",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"['1. ', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere"", '\n', '2. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '3. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian Runceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","Modelul relational asigura integritatea datelor prin utilizarea cheilor primare și a cheilor străine. Acestea definesc relațiile între tabele, asigurând consistența și corectitudinea datelor. SQL joacă un rol crucial în implementarea constrângerilor, permițând definirea regulilor de integritate a datelor, cum ar fi:

- **Cheia primară**:  ""Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare."" 
- **Cheia străină**: ""Cheile străine definesc relațiile între tabele."" 

Cu ajutorul instrucțiunilor SQL, se pot defini constrângeri pentru a garanta:

- **Unicitatea datelor**: prin definirea cheii primare.
- **Întreaga**: prin verificarea existenței datelor din tabelele legate prin cheile străine.

Exemple de instrucțiuni SQL:

```sql
-- Definirea cheii primare
ALTER TABLE Student
ADD CONSTRAINT PK_Student PRIMARY KEY (ID_Student);

-- Definirea cheii străine
ALTER TABLE Inscriere
ADD CONSTRAINT FK_Student FOREIGN KEY (ID_Student) REFERENCES Student(ID_Student);
```
","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",0.49999999995,1.0,0.8549549322979466,0.2727272727272727,0.1004916995660316,0.1452513966480447,0.46
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['1. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n3. Nivelul de vizualizare este cel mai înalt nivel de \nabstractizare. \nDe obicei, acest nivel este modalitatea prin care \nutilizatorii finali folosesc datele. \nFiecare utilizator final are o vizualizare specifică\nasupra datelor pe care îl interezează. \nAceastă vizualizare a datelor nu presupune ca\nutilizatorul să stie sau să înţeleagă caracteristicile \ninterne ale datelor (cum ar modalitatea lor de \nreprezentare sau de stocare).\nCurs - Baze de date 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n']"," o subinterogare corelata se executa o data pentru fiecare linie considerata de interogarea principala si care la executie foloseste o valoare dintr-o coloana din interogarea exterioara. 
",Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['1. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n2. Persistenţa obiectelor. Obiectele pot persista \nmai mult decât programul care a creat aceste \nobiecte.\n3. Concurenţa acceselor. BDOO poate să fie \npartajată simultan de către tranzacţiile care o \nconsultă şi o modifică.\n4. Fiabilitatea obiectelor. În cazul unei \ndefecţiuni, obiectele trebuie restaurate la \nstarea pe care au avut-o înainte de defecţiune.\nCurs - Baze de date 51', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\nCaracteristicile obligatorii ale unui SGBDOO sunt:\n1. Manipularea obiectelor atomice şi complexe (colecţii \nimbricate). \nUn constructor este o funcţie asociată unei clase care \npermite crearea şi iniţializarea unui obiect (în memorie). \nUn destructor este o funcţie asociată unei clase care \npermite distrugerea unui obiect. \nNoţiunea de obiect complex s-a născut prin aplicarea \nde constructori asupra obiectelor simple. \nO condiţie privind constructorii, referitoare la MDOO, \no constituie ortogonalitatea care presupune ca fiecare \nconstructor să fie aplicabil fiecărui obiect.\nCurs - Baze de date 50', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n3. Nivelul de vizualizare este cel mai înalt nivel de \nabstractizare. \nDe obicei, acest nivel este modalitatea prin care \nutilizatorii finali folosesc datele. \nFiecare utilizator final are o vizualizare specifică\nasupra datelor pe care îl interezează. \nAceastă vizualizare a datelor nu presupune ca\nutilizatorul să stie sau să înţeleagă caracteristicile \ninterne ale datelor (cum ar modalitatea lor de \nreprezentare sau de stocare).\nCurs - Baze de date 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n']"," o subinterogare corelata se executa o data pentru fiecare linie considerata de interogarea principala si care la executie foloseste o valoare dintr-o coloana din interogarea exterioara. 
","Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",0.49999999995,0.0,0.7539638310545212,1.0,0.008431231673981868,0.05714285714285714,0.0
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['1. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nAdăugarea unei constrângeri\nSe poate adăuga o constrângere pentru o tabela \nexistent utilizând ALTER TABLE şi clauza ADD.\nSintaxa\nCurs 8 - BAZE DE DATE 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n2. Nivelul conceptual este nivelul de mijloc al \nabstractizării, şi care se concentrează pe \ndescrierea datelor care sunt în baza de date şi \npe relaţiile dintre aceste date. \nDe acest nivel de abstractizare sunt interesaţi:\n–Administratorii bazei de date\n–Administratorii securităţii bazelor de date\nCurs - Baze de date\n 27', '\n']","Constrângerile și vederile pot fi utilizate pentru implementarea politicilor de securitate în baze de date.  Constrângerile pot limita valorile pe care le pot primi anumite coloane, asigurând astfel integritatea datelor și restricționând accesul la informații sensibile. Vederile pot fi folosite pentru a filtra datele, oferind acces limitat la informații specifice pentru anumite roluri.  De exemplu, o vedere poate fi creata pentru a afișa doar datele care sunt relevante pentru un anumit departament, restricționând accesul la informații sensibile pentru alți utilizatori. 
",Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['1. ', 'copyright@www.adrian.runceanu.ro\ntt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n1.3.Modelul de  date orientate obiect\n8. Polimorfismul.\nCodul unei metode trebuie ales în funcţie de \nparametrii săi.\n9. Extensibilitatea.\nSGBDOO trebuie să includă pe lângă clasele sale şi \ntipurile predefinite şi instrumentele care să permită \nutilizatorului definirea unor noi clase şi tipuri.\nCurs - Baze de date 54', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExista unele restrictii in cazul alterarii unei secvente deja existe. \nAcestea sunt:\n1. Userul care executa actiunea de alterare trebuie sa aiba \ndrepturile necesare sau sa fie proprietarul secventei.\n2. Numai numerele care vor fi generate in viitor vor fi afectate.\n3. Secventa va trebui distrusa si recreata pentru ca valoarea de \ninceput sa poata fi modificata\n4. Anumite validari logice de genul ca valoarea maxima nou \nsetata trebuie sa nu fie mai mica decat valoarea care exista \ndeja, trebuie indeplinite.\nCurs - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nAdăugarea unei constrângeri\nSe poate adăuga o constrângere pentru o tabela \nexistent utilizând ALTER TABLE şi clauza ADD.\nSintaxa\nCurs 8 - BAZE DE DATE 28', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\n2. Nivelul conceptual este nivelul de mijloc al \nabstractizării, şi care se concentrează pe \ndescrierea datelor care sunt în baza de date şi \npe relaţiile dintre aceste date. \nDe acest nivel de abstractizare sunt interesaţi:\n–Administratorii bazei de date\n–Administratorii securităţii bazelor de date\nCurs - Baze de date\n 27', '\n']","Constrângerile și vederile pot fi utilizate pentru implementarea politicilor de securitate în baze de date.  Constrângerile pot limita valorile pe care le pot primi anumite coloane, asigurând astfel integritatea datelor și restricționând accesul la informații sensibile. Vederile pot fi folosite pentru a filtra datele, oferind acces limitat la informații specifice pentru anumite roluri.  De exemplu, o vedere poate fi creata pentru a afișa doar datele care sunt relevante pentru un anumit departament, restricționând accesul la informații sensibile pentru alți utilizatori. 
","Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",0.0,0.0,0.9466179946590388,0.0,0.12204552478504598,0.19999999999999998,0.43
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","SQL este un limbaj care se foloseste pentru a interacționa cu baze de date. 
",Ce înseamnă SQL?,"['1. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n', '4. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","SQL este un limbaj care se foloseste pentru a interacționa cu baze de date. 
",Structured Query Language,0.0,0.0,0.8578447924600315,1.0,0.0,0.0,0.0
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', '\n']","instructiunea SQL folosita pentru extragerea datelor dintr-o baza de date este **SELECT**. 
",Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', '\n']","instructiunea SQL folosita pentru extragerea datelor dintr-o baza de date este **SELECT**. 
",SELECT,0.0909090909,1.0,0.8843741852165931,1.0,0.024455939372403628,0.14285714285714288,1.0
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['1. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '\n']","instrucțiunea SQL pentru actualizarea datelor este **UPDATE**. 
",Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['1. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '\n']","instrucțiunea SQL pentru actualizarea datelor este **UPDATE**. 
",UPDATE,0.0,0.0,0.8670834810406903,0.0,0.03747776736677921,0.2222222222222222,0.0
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n']","instructiunea SQL pentru ștergerea datelor dintr-o bază de date este **DELETE**. 
",Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n']","instructiunea SQL pentru ștergerea datelor dintr-o bază de date este **DELETE**. 
",DELETE,0.0,0.0,0.8473479293421348,1.0,0.02627961710408444,0.15384615384615385,1.0
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '4. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '\n']"," instrucțiunea SQL pentru inserarea de date noi se numește `INSERT`. 
",Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['1. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '4. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nFuncţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '\n']"," instrucțiunea SQL pentru inserarea de date noi se numește `INSERT`. 
",INSERT INTO,0.0,0.0,0.8644279738277487,0.0,0.033864985683445356,0.14285714285714285,1.0
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n']"," `SELECT FirstName FROM Persons;` 
","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n']"," `SELECT FirstName FROM Persons;` 
",SELECT FirstName FROM Persons,0.0,0.0,0.881852631182475,0.0,0.4111336169005198,1.0,1.0
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n']"," `SELECT * FROM Persons;` 
","Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n']"," `SELECT * FROM Persons;` 
",SELECT * FROM Persons,0.0,0.0,0.8893797363036615,0.0,0.4111336169005198,1.0,1.0
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n']"," `SELECT * FROM Persons WHERE FirstName = 'Peter';` 
","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n']"," `SELECT * FROM Persons WHERE FirstName = 'Peter';` 
",SELECT * FROM Persons WHERE FirstName='Peter',0.0,0.0,0.9066067147206214,0.0,0.6786502681586727,1.0,1.0
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n']"," nu pot răspunde la această întrebare. Contextul furnizat nu conține informații relevante despre selectarea înregistrărilor dintr-un tabel în funcție de valoarea unei coloane. 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n']"," nu pot răspunde la această întrebare. Contextul furnizat nu conține informații relevante despre selectarea înregistrărilor dintr-un tabel în funcție de valoarea unei coloane. 
",SELECT * FROM Persons WHERE FirstName LIKE 'a%',0.0,0.0,0.0,0.0,0.0,0.0,
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCLAUZA WHERE\nNOT IN intoarce fals daca lista contine valori \nnule:\nExemplu 18:\nSELECT NUME, AN, DATAN\nFROM STUDENT\nWHERE INDRUMATOR=1001 OR INDRUMATOR=1234;\nCurs - Baze de date 29', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\nPrecizari\n➢Pentru a putea acorda privilegii asupra unui obiect, \ncel ce vrea sa acorde privilegii  trebuie sa detina \nobiectul în schema sa sau trebuie sa detina privilegii \nde obiect WITH GRANT OPTION.\n➢Un proprietar de obiect  poate acorda orice privilegii \nde obiect asupra obiectului sau oricarui utilizator sau \nrol din baza de date.\n➢Proprietarul unui obiect  câstiga automat toate \nprivilegiile de obiect asupra acestuia.\nCurs - BAZE DE DATE 36', '\n']"," SELECT NUME, AN, DATAN FROM STUDENT WHERE INDRUMATOR=1001 OR INDRUMATOR=1234;
",Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['1. ', 'copyright@www.adrian.runceanu.ro\n7.1.4. Instrucţiunea Merge\nInstrucţiunea efectuează:\nUPDATE dacă înregistrarea există deja în tabel \nINSERT dacă înregistrarea este nouă. \nObs: DEFAULT reprezintă valoarea implicită a unei \ncoloane, dacă a fost definită la crearea tabelului. \nAltfel este null.\nCurs 7 - BAZE DE DATE 36', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCLAUZA WHERE\nNOT IN intoarce fals daca lista contine valori \nnule:\nExemplu 18:\nSELECT NUME, AN, DATAN\nFROM STUDENT\nWHERE INDRUMATOR=1001 OR INDRUMATOR=1234;\nCurs - Baze de date 29', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\n➢Diferite privilegii de obiect sunt disponibile \npentru diferite tipuri de obiecte de schema. \n➢Un utilizator are automat privilegii de obiect \nasupra obiectelor de schema continute în \nschema sa. \n➢Un utilizator poate acorda orice privilegiu de \nobiect asupra oricarei scheme de obiect pe \ncare o detine unui alt utilizator sau unui rol. \nCurs - BAZE DE DATE 29', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Dar ordinea se poate modifica \ndacă se folosesc paranteze. \nCurs - Baze de date 68', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nAcordarea privilegiilor de obiect\nPrecizari\n➢Pentru a putea acorda privilegii asupra unui obiect, \ncel ce vrea sa acorde privilegii  trebuie sa detina \nobiectul în schema sa sau trebuie sa detina privilegii \nde obiect WITH GRANT OPTION.\n➢Un proprietar de obiect  poate acorda orice privilegii \nde obiect asupra obiectului sau oricarui utilizator sau \nrol din baza de date.\n➢Proprietarul unui obiect  câstiga automat toate \nprivilegiile de obiect asupra acestuia.\nCurs - BAZE DE DATE 36', '\n']"," SELECT NUME, AN, DATAN FROM STUDENT WHERE INDRUMATOR=1001 OR INDRUMATOR=1234;
",Adevărat,0.0,0.0,0.7099843078975292,1.0,0.0,0.0,0.0
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n']","`SELECT * FROM Persons WHERE FirstName = 'Peter' AND LastName = 'Jackson';` 
","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n']","`SELECT * FROM Persons WHERE FirstName = 'Peter' AND LastName = 'Jackson';` 
",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',0.0,0.0,0.8848473223669898,0.0,0.7760114635728617,1.0,1.0
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n']","`SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';` 
","Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n']","`SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen';` 
",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',0.0,0.0,0.8695891978285156,0.0,0.7361703354503862,1.0,1.0
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","nu exista informatii care sa raspunda la aceasta intrebare. 
",Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['1. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '5. ', 'Baze de date\nAdrian \nRunceanu\nLimbajul SQL\nUCB: Universitatea Constantin Brâncuși din Târgu-Jiu\nAutomatică și Informatică Aplicată', '\n']","nu exista informatii care sa raspunda la aceasta intrebare. 
",SELECT DISTINCT,0.0,0.0,0.0,1.0,0.0,0.0,
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', '\n']","cuvântul cheie SQL folosit pentru a sorta multimea de rezultate este **ORDER BY**. 
",Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['1. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCrearea vederilor\nVederile simple sunt acele vederi care: \n1. Interoghează o singură tabelă\n2. Nu conţin funcţii\n3. Nu conţin grupuri de date\n4. Oferă posibilitatea efectuării de operaţii DML \n(INSERT, UPDATE, DELETE)\nNOTĂ: \nO vedere are un nume şi este generată de o \ncerere SQL. \nCurs - BAZE DE DATE 8', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nPentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrdinea de executie a functiilor de \ngrup\n• Ordinea de execuţie are o importanţă foarte mare, \ndeoarece are un impact direct asupra vitezei. \n• Cu cât mai multe înregistrări pot fi eliminate utilizând \nclauza WHERE, cu atât mai puţin va dura gruparea şi \noperaţiile ce urmează. \n• Dacă o cerere SQL este concepută să elimine \nînregistrări/grupuri doar folosind clauza HAVING, \natunci ar fi bine de încercat dacă este posibil şi prin \nclauza WHERE. De obicei, totuşi, această rescriere nu \nva fi posibilă. \nCurs 5 - BAZE DE DATE 50', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', '\n']","cuvântul cheie SQL folosit pentru a sorta multimea de rezultate este **ORDER BY**. 
",ORDER BY,0.0,0.0,0.8463574744384413,0.0,0.04573913556123801,0.25,1.0
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 20', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 9', '\n']"," `SELECT * FROM Persons ORDER BY FirstName DESC;` 
","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 69', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 20', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\nCurs - Baze de date 9', '\n']"," `SELECT * FROM Persons ORDER BY FirstName DESC;` 
",SELECT * FROM Persons ORDER BY FirstName DESC,0.0,0.0,0.8795356497013604,0.0,0.6786502681586727,1.0,1.0
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n']","nu se poate răspunde la această întrebare, deoarece contextul furnizat nu conține informații despre inserarea de date în tabele. 
","Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', '\n']","nu se poate răspunde la această întrebare, deoarece contextul furnizat nu conține informații despre inserarea de date în tabele. 
","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",0.0,0.0,0.0,1.0,0.01914603069010251,0.0,
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n']"," nu se poate raspunde la cererea ta cu informatiile furnizate. Contextul furnizat nu contine informatii despre cum se insereaza date intr-un tabel SQL.
","Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n']"," nu se poate raspunde la cererea ta cu informatiile furnizate. Contextul furnizat nu contine informatii despre cum se insereaza date intr-un tabel SQL.
",INSERT INTO Persons (LastName) VALUES ('Olsen'),0.0,0.0,0.0,1.0,0.0,0.0,
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.1. Clauza GROUP BY\n➢Folosind GROUP BY nu se pot extrage şi coloane \nindividuale, ci doar coloane ce rămân identice în tot \ngrupul.\n➢Folosind WHERE se pot exclude rânduri, înaintea \nîmpărţirii lor în grupuri.\n➢Nu pot fi folosite aliasuri de coloane în clauza GROUP \nBY.\n➢Implicit, rândurile sunt sortate crescător după coloana \n(coloanele) specificate în GROUP BY. \n➢Acest lucru poate fi schimbat folosind ORDER BY.\nCurs 5 - BAZE DE DATE 32', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n']","nu pot raspunde la intrebare. Contextul furnizat nu contine informatii despre modificarea datelor in tabele. 
","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au data \nde angajare 9/28/1981. \nCurs - Baze de date 39', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\n• Deoarece se poate insera o nouă linie ce conţine valori \npentru fiecare coloană, lista coloanelor nu mai este \nnecesară în clauza INSERT. \n• Totuşi dacă nu utilizăm lista de coloane, valorile trebuie \nsă fie listate în ordinea coloanelor din tabelă, iar o \nvaloare trebuie utilizată pentru fiecare coloană. \n• Pentru o utilizare mai uşoară putem folosi comanda \nDESCRIBE dept, care ne afişează câmpurile tabelei în \nordinea lor, precum şi tipul fiecărui câmp.\nCurs 7 - BAZE DE DATE 10', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.1. Clauza GROUP BY\n➢Folosind GROUP BY nu se pot extrage şi coloane \nindividuale, ci doar coloane ce rămân identice în tot \ngrupul.\n➢Folosind WHERE se pot exclude rânduri, înaintea \nîmpărţirii lor în grupuri.\n➢Nu pot fi folosite aliasuri de coloane în clauza GROUP \nBY.\n➢Implicit, rândurile sunt sortate crescător după coloana \n(coloanele) specificate în GROUP BY. \n➢Acest lucru poate fi schimbat folosind ORDER BY.\nCurs 5 - BAZE DE DATE 32', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n']","nu pot raspunde la intrebare. Contextul furnizat nu contine informatii despre modificarea datelor in tabele. 
",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',0.0,0.0,0.0,0.0,0.0,0.0,
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n']","nu se poate răspunde la această întrebare, deoarece contextul oferit nu include informații despre ștergerea înregistrărilor din tabele. Contextul se referă la funcții SQL și clauze, dar nu include informații despre comanda DELETE. 
","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","['1. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n']","nu se poate răspunde la această întrebare, deoarece contextul oferit nu include informații despre ștergerea înregistrărilor din tabele. Contextul se referă la funcții SQL și clauze, dar nu include informații despre comanda DELETE. 
",DELETE FROM Persons WHERE FirstName = 'Peter',0.0,0.0,0.0,1.0,0.0,0.045454545454545456,0.22
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n']"," `SELECT count(*) FROM Persons;` 
","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 30', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE a acestei cereri SQL compară\nnumele din tabela Angajaţi cu 'Smith'. \n  Pentru comparaţie numele sunt convertite în \nlitere mici şi din această cauză se obţine un rezultat.\nExemplu:\nSELECT empno, UPPER(ename), job, deptno\nFROM EMP\nWHERE INITCAP(ename) = 'Smith';\nCurs 4 - BAZE DE DATE 24\n4.2.1. Funcţii pentru şiruri de caractere"", '\n']"," `SELECT count(*) FROM Persons;` 
",SELECT COUNT(*) FROM Persons,0.0,0.0,0.8809451960090412,0.0,0.4111336169005198,1.0,1.0
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '\n', '3. ', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLISTA SELECT\nAlias de coloana:\nExemplu 7:\nSELECT TIP AS ""Tip bursa"", \' are valoarea \' || SUMA ||\n\'.Lei\' AS Descriere\nFROM BURSA;\nRezultat:\nTip bursa    DESCRIERE\n--------------------          --------------------------\nFARA BURSA    are valoarea .Lei\nBURSA SOCIALA    are valoarea 100.Lei\n   . . . . . . . . . . . . . . . . . .\nCurs - Baze de date 18', '\n']","nu pot raspunde la intrebarea ta. Contextul furnizat nu contine informatii despre tipuri de join. 
",Care este cel mai cunoscut tip de join?,"['1. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '\n', '3. ', '7\nResurse Baze de date\n1. Suport curs - varianta electronică disponibilă\npe: https://www.runceanu.ro/adrian/   \nNotă: Actualizarea site-ului se face saptamanal.\n2. curs pe Teams (FI-AIA-2-Baze de date-2024-2025)\n3. laborator pe Teams (FI-AIA-2-Baze de date-2024-\n2025)', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nDeci se pune problema cand nu sunt necesari indecsii:\n✓Cand tabela pe care se doreste adaugarea este mica.\n✓Cand coloanele pe care se adauga indecsii nu sunt \nfolosite frecvent pentru executarea de extrageri de \ninregistrari\n✓Cand cererile de tip SELECT in general extrag un numar \nmare de inregistrari (mai mare de 2-4%)\n✓Cand operatiuni de UPDATE sunt foarte des utilizate.\n✓Cand coloanele indexate sunt referentiate ca parte \nintegranta a unor expresii.\nCurs - BAZE DE DATE 34', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLISTA SELECT\nAlias de coloana:\nExemplu 7:\nSELECT TIP AS ""Tip bursa"", \' are valoarea \' || SUMA ||\n\'.Lei\' AS Descriere\nFROM BURSA;\nRezultat:\nTip bursa    DESCRIERE\n--------------------          --------------------------\nFARA BURSA    are valoarea .Lei\nBURSA SOCIALA    are valoarea 100.Lei\n   . . . . . . . . . . . . . . . . . .\nCurs - Baze de date 18', '\n']","nu pot raspunde la intrebarea ta. Contextul furnizat nu contine informatii despre tipuri de join. 
",INNER JOIN,0.0,0.0,0.0,1.0,0.0,0.11764705882352941,
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', '\n', '3. ', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nValori de NULL intr-o subinterogare \n• In cazul in care subinterogarea returneaza \nvreuna din valori NULL si interogarea \nprincipala are operator NOT IN, atunci \ninterogarea principala nu va returna niciun \nrand. \n• Motivul este ca o comparatie cu NULL conduce \nla un rezultat NULL. \nCurs 6 - BAZE DE DATE 59', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']","operatorul folosit pentru a selecta valori dintr-un interval este **BETWEEN...AND...**. 
",Ce operator este folosit pentru a selecta valori dintr-un interval?,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n1. BETWEEN...AND... \nCondiţia BETWEEN poate fi folosită pentru a \nselecta rânduri pe baza unui interval de \nvalori(conţinut în condiţie).\nIntervalul este inclusiv, are o limită inferioară şi o \nlimită superioară şi neapărat prima specificată\ntrebuie să fie limita inferioară. \nCurs - Baze de date 44', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n Clauza WHERE poate compara valori în coloană, \nvalori literale, expresii aritmetice sau funcţii.\nWHERE - restricţionează cererea la rândurile care \nîndeplinesc o condiţie;\nCondiţie este alcătuită din trei elemente:\n1. Un nume de coloană \n2. Un operator de comparaţie \n3. Un nume de coloană, constantă sau listă de valori\nCurs - Baze de date 31', '\n', '3. ', 'Clauza WHERE\nC. Condiţii de comparare \n  În SQL sunt 4 operatori care pot fi folosiţi pentru \ntoate tipurile de date: \nOperator Semnificaţie\nBETWEEN...AND... între 2 valori (inclusiv)\nIN (lista) compară cu o listă de valori\nLIKE compară cu un model de tip caracter\nIS NULL este o valoare nulă\nCurs - Baze de date 43', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nValori de NULL intr-o subinterogare \n• In cazul in care subinterogarea returneaza \nvreuna din valori NULL si interogarea \nprincipala are operator NOT IN, atunci \ninterogarea principala nu va returna niciun \nrand. \n• Motivul este ca o comparatie cu NULL conduce \nla un rezultat NULL. \nCurs 6 - BAZE DE DATE 59', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']","operatorul folosit pentru a selecta valori dintr-un interval este **BETWEEN...AND...**. 
",BETWEEN,0.37499999998125,1.0,0.8900109443572791,1.0,0.018160849415439308,0.15384615384615385,0.0
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14', '\n']"," constrângerea de tip NOT NULL asigură  faptul că o coloană să nu conţină valoarea  nulă. 
",Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['1. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \nCurs - Baze de date 60', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExemplu\nÎn exemplul următor constrângerea NOT NULL se \naplică coloanelor ENAME şi HIREDATE din tabela \nemp_new. \n⮚Pentru coloana ENAME constrângerea nu este \ndenumită astfel încât serverul Oracle o să creeze un \nnume pentru ea.\n⮚Pentru coloana HIREDATE constrângerea este \ndenumită: ""NOT NULL"".\nCurs 8 - BAZE DE DATE 14', '\n']"," constrângerea de tip NOT NULL asigură  faptul că o coloană să nu conţină valoarea  nulă. 
",Adevărat,0.3214285714125,1.0,0.843377231284738,1.0,0.0,0.0,0.0
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nInserarea unor valori speciale \nFuncţia SYSDATE înregistrează data curentă şi ora. \nPutem utiliza diferite funcţii pentru a insera \nvalori speciale în tabela noastră.\nCurs 7 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \nCurs - Baze de date 52', '\n']","operatorul LIKE este folosit pentru a căuta un model specificat într-o coloană. 
",Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['1. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n7.1.1. Adăugare o nouă \nînregistrare\nInserarea unor valori speciale \nFuncţia SYSDATE înregistrează data curentă şi ora. \nPutem utiliza diferite funcţii pentru a insera \nvalori speciale în tabela noastră.\nCurs 7 - BAZE DE DATE 13', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \nCurs - Baze de date 52', '\n']","operatorul LIKE este folosit pentru a căuta un model specificat într-o coloană. 
",LIKE,0.07142857142142857,1.0,0.862828135720538,1.0,0.033864985683445356,0.13333333333333333,0.0
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n']","nu pot răspunde la întrebarea ta. Contextul oferit nu conține informații despre instrucțiunile SQL utilizate pentru crearea tabelelor. 
","Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['1. ', 'copyright@www.adrian.runceanu.ro\nAvantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67Curs - Baze de date', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.2. Funcţii referitoare la o singură înregistrare\n 4.2.1. Funcţii pentru şiruri de caractere\n 4.2.2. Funcţii de tip numeric\n4.2.3. Funcţii de tip dată calendaristică şi oră\n 4.2.4. Funcţii de conversie dintr-un tip în altul\n 4.2.5. Funcţii generale\n  4.2.6. Funcţii condiţionale\nCurs 4 - BAZE DE DATE 15', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n3. Sinonime\n➢Principalul avantaj al utilizarii lor este pentru \nmicsorarea timpul necesar din partea utilizatorilor \npentru a-si crea cererile SQL. \n➢In felul acesta tabelele, vederile, secventele, \nprocedurile sau alte obiecte au un nume alternativ \npentru acces.\nCurs - BAZE DE DATE 43', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\n3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", '\n']","nu pot răspunde la întrebarea ta. Contextul oferit nu conține informații despre instrucțiunile SQL utilizate pentru crearea tabelelor. 
",CREATE TABLE Customers,0.0,0.0,0.0,0.5,0.0,0.0,0.0
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n']","`UPDATE EMP SET sal = sal + (SELECT AVG(sal) FROM EMP) * 0.1 WHERE deptno = 10;` 
",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n']","`UPDATE EMP SET sal = sal + (SELECT AVG(sal) FROM EMP) * 0.1 WHERE deptno = 10;` 
",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,0.0,0.0,0.8371747636310429,0.0,0.2904276735563091,0.8666666666666667,1.0
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN - Aflati angajatii \ncare au salariul egal cu salariul \ncel mai mare din fiecare \ndepartament \nCurs 6 - BAZE DE DATE 46', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n5. Listaţi toţi angajaţii care au fost angajaţi în anul 1981. \n6. Afişaţi numele, salariul anual şi comisionul pentru toţi \nvânzătorii ai căror salariu lunar este mai mare decât \ncomisionul lor. \n- Ieşirea va fi ordonată după salariu, cele mai mari \nprimele. \n- Dacă doi sau mai mulţi angajaţi au acelaşi salariu \ntrebuie sortaţi după nume în ordinea celor mai mari \nsalarii.\nCurs - Baze de date 84', '\n']","nu se poate genera o interogare care sa sterga angajati. Contextul furnizat include doar exemple de interogari select. 
",Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY - Aflati angajatii \ncare au salariul mai mare decat \nvreun angajat al departamentului \n20 si nu fac parte din acest \ndepartament. \nCurs 6 - BAZE DE DATE 48', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN - Aflati angajatii \ncare au salariul egal cu salariul \ncel mai mare din fiecare \ndepartament \nCurs 6 - BAZE DE DATE 46', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n5. Listaţi toţi angajaţii care au fost angajaţi în anul 1981. \n6. Afişaţi numele, salariul anual şi comisionul pentru toţi \nvânzătorii ai căror salariu lunar este mai mare decât \ncomisionul lor. \n- Ieşirea va fi ordonată după salariu, cele mai mari \nprimele. \n- Dacă doi sau mai mulţi angajaţi au acelaşi salariu \ntrebuie sortaţi după nume în ordinea celor mai mari \nsalarii.\nCurs - Baze de date 84', '\n']","nu se poate genera o interogare care sa sterga angajati. Contextul furnizat include doar exemple de interogari select. 
",DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,0.0,0.0,0.0,1.0,0.0,0.0625,0.0
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45', '\n']"," nu pot raspunde la cererea ta. Contextul furnizat nu contine informatii despre actualizarea salariilor angajatilor. 
","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu IN\nAflati angajatii care au salariul egal cu salariul cel \nmai mare din fiecare departament \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal IN\n             ( SELECT MAX(sal)\n                FROM EMP\n          GROUP BY deptno )\n  subinterogarea ofera salariile maxime din fiecare \ndepartament si prin interogarea principala se afla \nangajatii cu aceste salarii.\nCurs 6 - BAZE DE DATE 45', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nExemplu ANY \nAflati angajatii care au salariul mai mare decat vreun \nangajat al departamentului 20 si nu fac parte din \nacest departament.\nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal > ANY\n                ( SELECT sal\n                 FROM EMP\n                 WHERE deptno = 20 )\nAND deptno <> 20;\nCurs 6 - BAZE DE DATE 47', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul total pe fiecare funcţie, fără a lua în \ncalcul MANAGERII, excluzând funcţiile cu suma salariilor sub \n6000$ cu ordonare după total.\nCurs 5 - BAZE DE DATE 47', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n4.3.2. Excluderea grupurilor \n(clauza HAVING)\nRezultatul obtinut - Salariul maxim pe fiecare departament unde \nacesta depăşeşte 2000$. \nCurs 5 - BAZE DE DATE 45', '\n']"," nu pot raspunde la cererea ta. Contextul furnizat nu contine informatii despre actualizarea salariilor angajatilor. 
","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",0.0,0.0,0.0,0.5,0.0,0.0,0.0
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul între 1000 şi 3000. \nCurs - Baze de date 46', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']"," nu pot răspunde la această solicitare. Contextul furnizat nu conține informații specifice despre modificarea funcțiilor angajaților, despre modificarea funcțiilor în ""SENIOR"" sau despre selectarea angajaților în funcție de anul angajării. 
",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['1. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au salariul \nîn lista (1250, 2450, 3000, 5000).\nCurs - Baze de date 49', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nExercitii\n1. Listaţi toţi angajaţii care au salariul între 1500 \nşi 3000. \n2. Listaţi numele angajaţilor ordonându-i în \nordine alfabetică.\n3. Listaţi toţi angajaţii ai căror nume conţin LL sau \nTT în interior. \n4. Listaţi toţi angajaţii care nu au manager. \nCurs - Baze de date 83', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\nCurs - Baze de date 34', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul între 1000 şi 3000. \nCurs - Baze de date 46', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n']"," nu pot răspunde la această solicitare. Contextul furnizat nu conține informații specifice despre modificarea funcțiilor angajaților, despre modificarea funcțiilor în ""SENIOR"" sau despre selectarea angajaților în funcție de anul angajării. 
","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",0.0,0.0,0.0,0.75,0.0,0.04,0.0
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nModificarea unei vederi\nPână acum am verificat dacă vederea \nexistă sau nu şi numai în cazul în care nu exista \no cream. \nAvem posibilitatea de a crea o vedere chiar \ndacă ea există, înlocuind-o pe cea veche cu o \nnouă versiune. \nCurs - BAZE DE DATE 28', '\n']","nu pot raspunde la intrebarea ta. Contextul furnizat contine informatii despre bazele de date, nu despre prognoze meteo. 
",Cum e vremea la galati ?,"['1. ', 'copyright@www.adrian.runceanu.ro\nNOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nClauza WITH CHECK OPTION\n  Se foloseşte pentru a ne asigura că \noperaţia care se efectuează pe o vedere \nrespectă domeniul vederii, adică nu va \nintroduce modificări care vor determina ca \nliniile inserate să nu mai fie văzute de vedere. \nCurs - BAZE DE DATE 40', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\n6.1. SINGLE ROW SUBQUERIES\n• Subinterogările pot fi plasate şi în clauza HAVING. \n• Deoarece clauza HAVING are întotdeauna o condiţie de grup, şi \nsubinterogarea va avea aproape întotdeauna o condiţie de grup.\nCurs 6 - BAZE DE DATE 22', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nSubcereri corelate \n• O subinterogare corelata este o subinterogare \ncare se executa o data pentru fiecare linie \nconsiderata de interogarea principala si care la \nexecutie foloseste o valoare dintr-o coloana \ndin interogarea exterioara.\n• Ea se poate identifica prin folosirea unei \ncoloane a interogarii exterioare in clauza \noperatorului interogarii interioare. \nCurs 6 - BAZE DE DATE 56', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nModificarea unei vederi\nPână acum am verificat dacă vederea \nexistă sau nu şi numai în cazul în care nu exista \no cream. \nAvem posibilitatea de a crea o vedere chiar \ndacă ea există, înlocuind-o pe cea veche cu o \nnouă versiune. \nCurs - BAZE DE DATE 28', '\n']","nu pot raspunde la intrebarea ta. Contextul furnizat contine informatii despre bazele de date, nu despre prognoze meteo. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.6666666666666666,0.09846052248031867,0.2222222222222222,0.67
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'CLAUZA WHERE\nOperatori de \ncomparare\n< Mai mic\n<= Mai mic sau egal\n> Mai mare\n>= Mai mare sau egal\n<> Diferit\n!= Diferit\n^= Diferit\nCurs - Baze de date 22', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51"", '\n']","nu pot raspunde la aceasta intrebare. Contextul furnizat nu contine informatii despre Michael Jackson. 
",Cati ani a trait Michael Jackson ?,"['1. ', 'CLAUZA WHERE\nOperatori de \ncomparare\n< Mai mic\n<= Mai mic sau egal\n> Mai mare\n>= Mai mare sau egal\n<> Diferit\n!= Diferit\n^= Diferit\nCurs - Baze de date 22', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nProbleme propuse\n1. Sa se mareasca cu 3% salariul angajatului cu \nprenumele ""ADAMS"". \n(2 solutii: una cu Select si una cu Update)  \nCurs 7 - BAZE DE DATE 59', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\ntt\nExemplu:\nALTER USER scott\nIDENTIFIED BY lion;\n➢Desi aceasta declaratie poate fi folosita pentru \nschimbarea parolei, exista multe alte optiuni. \n➢Pentru a putea schimba oricare alta optiune \ntrebuie sa avem privilegiul ALTER USER.\nCurs - BAZE DE DATE 25', '\n', '5. ', ""copyright@www.adrian.runceanu.ro\nClauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \nCurs - Baze de date 51"", '\n']","nu pot raspunde la aceasta intrebare. Contextul furnizat nu contine informatii despre Michael Jackson. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.5,0.0,0.2608695652173913,1.0
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCrearea unei vederi cu alias-uri de \ncoloană\nExemplu \nSă cream o vedere emp10 care va conţine \npersoanele din departamentul 10. \nMai întâi trebuie să ne asigurăm că vederea \nemp10 nu există deja. \nCurs - BAZE DE DATE 18', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 24', '\n']","nu pot raspunde la aceasta intrebare, deoarece nu exista informatii despre carti in contextul furnizat. 
",Ce o carte ?,"['1. ', 'copyright@www.adrian.runceanu.ro\nExemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nCereri Top N \nCererile Top N căuta cele mai mari n sau \ncele mai mici valori dintr-o coloană. \nFolosind cereri Top N putem afla de \nexemplu: \n–primii 3 salariaţi dintr-o companie\n–cele mai bine vândute 3 produse ale unei \ncompanii\nCurs - BAZE DE DATE 49', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nCrearea unei vederi cu alias-uri de \ncoloană\nExemplu \nSă cream o vedere emp10 care va conţine \npersoanele din departamentul 10. \nMai întâi trebuie să ne asigurăm că vederea \nemp10 nu există deja. \nCurs - BAZE DE DATE 18', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nCuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 24', '\n']","nu pot raspunde la aceasta intrebare, deoarece nu exista informatii despre carti in contextul furnizat. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0321858262703621,0.25,
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\n•COUNT(*) întoarce numărul de rânduri dintr-o tabela \ncare satisface criteriul de selecţie, incluzând rândurile \nduplicat şi rândurile conţinând valori nule.\n•Dacă clauza WHERE este introdusă, atunci COUNT(*) \nreturnează numărul de rânduri care satisfac condiţia \ndin clauza WHERE.\nCurs 5 - BAZE DE DATE 22', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \nCurs - Baze de date 52', '\n']"," 2 + 2 face 4. 
",Cat face 2 + 2 ?,"['1. ', 'copyright@www.adrian.runceanu.ro\n• Astfel ori de cate ori valoarea NULL face parte din \nraspunsurile subcererii nu trebuie folosit operatorul \nNOT IN. \n• De fapt operatorul NOT IN este echivalent cu <> ALL.\n• Returnarea de valori NULL de catre subinterogare nu \nprezinta nici o problema in cazul operatorului IN in \ninterogarea principala (in echivalent cu = ALL). \nCurs 6 - BAZE DE DATE 62', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\nAcum sa o cream avand optiunile urmatoare: \n• incepe la 120 \n• creste cu 10 unitati\n• valoare maxima este 9999 \n• fara ciclu \n• si fara cache\nCREATE SEQUENCE dept_seq_1\n  INCREMENT BY 1\n  START WITH 70\n  MAXVALUE 99\n  NOCACHE\n  NOCYCLE; \nCurs - BAZE DE DATE 13', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConstrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\n4.3. Funcții de grup\n•COUNT(*) întoarce numărul de rânduri dintr-o tabela \ncare satisface criteriul de selecţie, incluzând rândurile \nduplicat şi rândurile conţinând valori nule.\n•Dacă clauza WHERE este introdusă, atunci COUNT(*) \nreturnează numărul de rânduri care satisfac condiţia \ndin clauza WHERE.\nCurs 5 - BAZE DE DATE 22', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nClauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \nCurs - Baze de date 52', '\n']"," 2 + 2 face 4. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.8882559037166161,0.0,0.0,0.0,
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '\n', '3. ', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul.', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n']","bazele de date distribuite stochează atât datele, cât și sistemul de gestiune pe mai multe calculatoare interconectate, în timp ce bazele de date NoSQL oferă o flexibilitate mai mare în modelarea datelor și o performanță ridicată pentru gestionarea unor volume mari de date. 
",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['1. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\n2. Clasificare după numărul de staţii\npe care este stocată baza de date\n✓Există două categorii de sisteme de baze de date:\n1. centralizate \n2. distribuite\n1. Un sistem de baze de date centralizat (Centralized \nDatabase System) este un sistem de baze de date în \ncare datele şi sistemul de gestiune sunt stocate pe un \nsingur calculator.\n2. Un sistem de baze de date distribuit (Distributed \nDatabase System) poate avea atât datele, cât şi sistemul \nde gestiune, distribuite pe mai multe calculatoare \ninterconectate printr-o reţea de comunicaţie.\nCurs - Baze de date 68', '\n', '3. ', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul.', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nOrice firmă utilizează baze de date pentru păstrarea \nşi gestionarea informaţiilor. Câteva astfel de aplicaţii sunt \nuzuale:\n1.bazele de date ale liniilor aeriene care sunt accesate \nsimultan din sute de agenţii pentru a realiza rezervări şi \nvânzări de locuri pentru date şi zboruri diferite\n2.bazele de date ale băncilor care permit realizarea a mii \nde tranzacţii zilnic\n3.bazele de date ale supermagazinelor care sunt accesate \natât de la casele de marcaj cât şi de la echipamentele de \ninventariere\n4.bazele de date ale bibliotecilor care păstrează milioane \nde titluri şi permit localizarea unei lucrări folosind diferite \ncriterii (cuvinte cheie, titlu, autori, domeniu)\nCurs - Baze de date 17', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n']","bazele de date distribuite stochează atât datele, cât și sistemul de gestiune pe mai multe calculatoare interconectate, în timp ce bazele de date NoSQL oferă o flexibilitate mai mare în modelarea datelor și o performanță ridicată pentru gestionarea unor volume mari de date. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,0.0,0.8609204338917172,1.0,0.0,0.0,0.0
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '2. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor.', '\n', '5. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n']","bazele de date NoSQL oferă avantajul major al **flexibilității**. Aceasta le permite să se adapteze rapid la schimbările din structura datelor, spre deosebire de bazele de date relaționale, care sunt mai rigide. 
",Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['1. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n', '2. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor.', '\n', '5. ', '2.6. Elemente ale limbajului SQL\nOperaţiile realizate cu ajutorul comenzii SELECT\n73Curs - Baze de date', '\n']","bazele de date NoSQL oferă avantajul major al **flexibilității**. Aceasta le permite să se adapteze rapid la schimbările din structura datelor, spre deosebire de bazele de date relaționale, care sunt mai rigide. 
",Nu am gasit informatii in curs despre intrebarea ta,0.19999999998,0.0,0.8622796815534177,1.0,0.0,0.0,0.0
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n']","o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL în scenariile în care este necesară o scalabilitate limitată și o flexibilitate medie, precum și pentru aplicații ca CRM, ERP și eCommerce. 
",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['1. ', 'copyright@www.adrian.runceanu.ro\n➢O bază de date conţine şi alte obiecte decât cele cu \ncare v-aţi familiarizat în celelalte cursuri. \n➢Obiectele care pot exista într-o bază de date sunt: \n1. tabele \n2. vederi (views)\n3. secvenţe\n4. indecşi \n5. sinonime\nCurs - BAZE DE DATE 4', '\n', '2. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', 'copyright@www.adrian.runceanu.ro\nPrivilegii\nAdministratorul bazei de date este un utilizator de nivel \nînalt ce are posibilitatea de a acorda accesul utilizatorilor \nla baza de date si la obiectele sale. \nUtilizatorii necesita privilegii de sistem pentru a dobândi \nacces la baza de date si privilegii de obiect pentru a \nputea manipula continutul obiectelor în baza de date. \nUtilizatorilor li se poate da de asemeni privilegiul de a \nacorda privilegii aditionale altor utilizatori sau unor \nroluri, cum sunt numite grupurile de privilegii adiacente.\nCurs - BAZE DE DATE 8', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\n1.1.Sisteme de baze de date\nDatele: \nSunt informaţii pe care diferiţi utilizatori (firme, \nagenţii, sau simpli utilizatori) le colectează pentru a-şi \nîndeplini scopurile sau misiunile. \nDatele individuale sunt stocate în mulţimi de date \nrelaţionate (legate) numite înregistrări. \nO colecţie de înregistrări dependente se numeşte \nbază de date.\nCurs - Baze de date\n 22', '\n']","o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL în scenariile în care este necesară o scalabilitate limitată și o flexibilitate medie, precum și pentru aplicații ca CRM, ERP și eCommerce. 
",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.9697966995722677,0.0,0.0,0.0,0.0
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['1. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '8 \n \nExemplu 1 - MongoDB (bază de date orientată pe documente): \n{ \n    ""_id"": ObjectId(""60c72b2f5f1b2c6d88fdf301""), \n    ""nume"": ""Maria Ionescu"", \n    ""email"": ""maria@example.com"", \n    ""adresa"": { \n        ""oras"": ""București"", \n        ""strada"": ""Bd. Unirii"" \n    } \n} \n \nInterogare MongoDB: \n{ ""nume"": ""Maria Ionescu"" } \n \nExemplu 2 - Redis (bază de date key-value): \nSET user:1000 ""Ion Popescu"" \nGET user:1000 \n \nProiectarea unei baze de date NoSQL: \nProiectarea unei baze de date NoSQL trebuie să țină cont de cerințele aplicației. De \nexemplu, pentru o aplicație de rețele sociale, un model de bază de date NoSQL ar trebui să permită \nstocarea rapidă a mesajelor și a relațiilor între utilizatori fără a impune constrângerile unei baze de \ndate relaționale. \n \n \nReferințe și resurse web \n1) Connolly, T. & Begg, C. (2014). Database Systems: A Practical Approach to Design, \nImplementation, and Management. Pearson. \n2) Silberschatz, A., Korth, H., & Sudarshan, S. (2020). Database System Concepts. McGraw-\nHill. \n3) Elmasri, R., & Navathe, S. (2016). Fundamentals of Database Systems. Pearson. \n4) W3Schools SQL Tutorial \n5) MongoDB Documentation \n6) PostgreSQL Documentation \n7) Redis Documentation', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n']","principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit sunt:

* **Lipsa unui standard unificat**: Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce face dificilă interoperabilitatea și migrarea între sisteme.
* **Consistența datelor**: Majoritatea bazelor NoSQL sacrifică consistența în favoarea disponibilității și performanței (modelul CAP), ceea ce poate duce la probleme de integritate a datelor în cazul operațiilor complexe sau distribuite. 
",Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['1. ', '7 \n \n✓ Flexibilitate în modelarea datelor \n✓ Performanță ridicată pentru date mari și distribuție geografică \nDezavantaje: \n✓ Lipsa standardizării interogărilor \n✓ Unele implementări nu oferă suport pentru tranzacții complexe \n \n \n2.5. Compararea tipurilor de baze de date \n \nTip de bază de \ndate Structură Scalabilitate Flexibilitate Cazuri de utilizare \nIerarhică Arbore Redusă Scăzută Sistemele bancare vechi \nRețea Grafic Medie Medie Aplicații complexe \nRelațională Tabelară Scalabilitate \nlimitată Medie CRM, ERP, eCommerce \nNoSQL Diversă Mare Mare Big Data, IoT, social \nmedia \n \n \n3. Baze de date NoSQL \nBazele de date NoSQL sunt o categorie modernă de sisteme de gestionare a bazelor de date \ncare elimină limitările sistemelor relaționale pentru a permite o stocare și o interogare mai eficiente \na datelor nestructurate și semi-structurate. \n \n3.1. Utilizări comune \n✓ Big Data: MongoDB, Cassandra \n✓ Caching și sesiuni web: Redis, Memcached \n✓ Aplicații distribuite: DynamoDB, CouchDB \n✓ Rețele sociale și grafică de date: Neo4j, ArangoDB \n \n \n3.2. Avantajele bazelor de date NoSQL \n✓ Scalabilitate orizontală: Pot gestiona volume mari de date prin distribuire pe mai multe \nservere. \n✓ Flexibilitate: Nu impun o schemă strictă a datelor, ceea ce permite schimbări rapide. \n✓ Performanță ridicată: Se adaptează bine la cerințele aplicațiilor moderne, unde latența \nredusă este esențială. \n \n1.3.3 Dezavantajele bazelor de date NoSQL \n✓ Lipsa unui standard unificat:  Fiecare sistem are propriul model de interogare și \nadministrare. \n✓ Consistența datelor:  Majoritatea bazelor NoSQL sacrifică consistența în favoarea \ndisponibilității și performanței (modelul CAP).', '\n', '2. ', 'copyright@www.adrian.runceanu.ro\ntt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', '\n', '3. ', 'copyright@www.adrian.runceanu.ro\nConţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\nCurs - Baze de date\n 14', '\n', '4. ', '8 \n \nExemplu 1 - MongoDB (bază de date orientată pe documente): \n{ \n    ""_id"": ObjectId(""60c72b2f5f1b2c6d88fdf301""), \n    ""nume"": ""Maria Ionescu"", \n    ""email"": ""maria@example.com"", \n    ""adresa"": { \n        ""oras"": ""București"", \n        ""strada"": ""Bd. Unirii"" \n    } \n} \n \nInterogare MongoDB: \n{ ""nume"": ""Maria Ionescu"" } \n \nExemplu 2 - Redis (bază de date key-value): \nSET user:1000 ""Ion Popescu"" \nGET user:1000 \n \nProiectarea unei baze de date NoSQL: \nProiectarea unei baze de date NoSQL trebuie să țină cont de cerințele aplicației. De \nexemplu, pentru o aplicație de rețele sociale, un model de bază de date NoSQL ar trebui să permită \nstocarea rapidă a mesajelor și a relațiilor între utilizatori fără a impune constrângerile unei baze de \ndate relaționale. \n \n \nReferințe și resurse web \n1) Connolly, T. & Begg, C. (2014). Database Systems: A Practical Approach to Design, \nImplementation, and Management. Pearson. \n2) Silberschatz, A., Korth, H., & Sudarshan, S. (2020). Database System Concepts. McGraw-\nHill. \n3) Elmasri, R., & Navathe, S. (2016). Fundamentals of Database Systems. Pearson. \n4) W3Schools SQL Tutorial \n5) MongoDB Documentation \n6) PostgreSQL Documentation \n7) Redis Documentation', '\n', '5. ', 'copyright@www.adrian.runceanu.ro\nLimbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '\n']","principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit sunt:

* **Lipsa unui standard unificat**: Fiecare sistem NoSQL are propriul model de interogare și administrare, ceea ce face dificilă interoperabilitatea și migrarea între sisteme.
* **Consistența datelor**: Majoritatea bazelor NoSQL sacrifică consistența în favoarea disponibilității și performanței (modelul CAP), ceea ce poate duce la probleme de integritate a datelor în cazul operațiilor complexe sau distribuite. 
",Nu am gasit informatii in curs despre intrebarea ta,0.49999999995,0.0,1.0000000000000002,0.42857142857142855,0.0,0.0,0.0
