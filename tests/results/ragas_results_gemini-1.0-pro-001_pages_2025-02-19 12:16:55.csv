,initial_Generator,initial_Dificultate,initial_Capitole Principale,initial_Capitole Asociate,initial_user_input,initial_reference,initial_Evaluare Professor,initial_Unde se afla raspunsul,initial_retrieved_contexts,initial_response,user_input,retrieved_contexts,response,reference,context_precision,context_recall,answer_relevancy,faithfulness,bleu_score,rouge_score,factual_correctness
0,O3mini-high,LOW,C1,,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?",relațional,Este corect,,"['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]",Modelul relațional,"În contextul noțiunilor introductive, ce model de organizare a datelor este prezentat ca predominant în curs?","['1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere ""]",Modelul relațional,relațional,0.8592592592449382,1.0,0.0,0.0,0.0,0.8,
1,O3mini-high,LOW,C2,,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,PL/SQL,Este corect,,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']",PL/SQL,Ce limbaj integrat în Oracle este utilizat pentru scrierea procedurilor stocate?,"['2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\nÎncepând cu versiunea 5.0 SGBD Oracle are \nurmătoarele facilităţi suplimentare: \n- funcţionează în arhitectura client/server\n- are limbaj procedural propriu PL/SQL\n- are precompilatoare ca interfaţă cu limbajele \nuniversale\n7', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26']",PL/SQL,PL/SQL,0.8592592592449382,1.0,0.8337107296634162,0.5,0.0,1.0,0.0
2,O3mini-high,LOW,C3,,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,WHERE,Este corect,,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']",Informațiile furnizate nu conțin răspunsul la această întrebare.,Cu ce clauză SQL se filtrează rândurile dintr-o interogare?,"['Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61']",Informațiile furnizate nu conțin răspunsul la această întrebare.,WHERE,0.999999999975,1.0,0.0,0.0,0.0,0.0,
3,O3mini-high,LOW,C4,,Ce funcție SQL transformă șirurile de caractere în majuscule?,UPPER,Este corect,,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']",Informațiile furnizate nu conțin răspunsul la întrebarea dvs.,Ce funcție SQL transformă șirurile de caractere în majuscule?,"['Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări(linii)\n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 4 - BAZE DE DATE 6']",Informațiile furnizate nu conțin răspunsul la întrebarea dvs.,UPPER,0.0,0.0,0.0,1.0,0.0,0.0,0.0
4,O3mini-high,LOW,C5,,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,GROUP BY,Este corect,,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']",GROUP BY,Cu ce clauză se grupează înregistrările pentru a calcula valori agregate folosind funcțiile de grup?,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', '4.3. Funcții de grup\nFunctia Descriere \nAVG([DISTINCT|ALL]n)  Valoarea medie pentru grup, \nignorand valorile nule  \nCOUNT({*|[DISTINCT|ALL]expr})  \nNumarul de randuri unde expr \nevalueaza altceva in afara de \nnull (folosind * sunt numarate \ntoate randurile, incluzand \nduplicatele si pe cele cu valoare \nnula)  \nMAX([DISTINCT|ALL]expr)  Valoarea maxima a expr, \nignorand valorile nule  \nMIN([DISTINCT|ALL]expr)  Valoarea minima a expr, \nignorand valorile nule  \nSTDDEV([DISTINCT|ALL]x)  Deviatia standard pentru grup, \nignorand valorile nule  \nSUM([DISTINCT|ALL]x)  Suma valorilor pentru grup, \nignorand valorile nule  \nVARIANCE([DISTINCT|ALL]x)  Variatia pentru grup, ignorand \nvalorile nule  \n \nFiecare dintre aceste funcţii acceptă anumiţi parametri: \nCurs 5 - BAZE DE DATE 15', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7', 'Funcţii\n Funcţiile sunt o caracteristică importantă a \nSQL si sunt utilizate pentru:\n✓a realiza calcule asupra datelor\n✓a modifica date\n✓a manipula grupuri de înregistrări \n✓a schimba formatul datelor \n✓sau pentru a converti diferite tipuri de date \nCurs 5 - BAZE DE DATE 7']",GROUP BY,GROUP BY,0.999999999975,1.0,0.8018077200814666,1.0,0.0,1.0,
5,O3mini-high,LOW,C6,,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,subinterogare single-row,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']",Textul furnizat nu conține informații despre tipul de subinterogare descrisă în solicitare.,Cum se numește subinterogarea care returnează o singură valoare pentru o condiție din clauza WHERE?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51', 'Sintaxa conţine: \nO subcerere care întoarce elemente sortate şi \ncare conţine clauza ORDER BY. \nCa să avem cea mai mare valoare pe prima linie \nfolosim DESC. \nO cerere care selectează un anumit număr de \nlinii (N) ca rezultat final. Conţine: \n– ROWNUM care aloca o valoare începând de la 1 fiecărei \nlinii întoarse de subcerere.\n– WHERE care condiţionează numărul de linii întoarse\nCurs - BAZE DE DATE 51']",Textul furnizat nu conține informații despre tipul de subinterogare descrisă în solicitare.,subinterogare single-row,0.0,0.0,0.0,0.0,0.030890553181566974,0.11764705882352941,0.67
6,O3mini-high,LOW,C7,,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,MERGE,Este corect,,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']",Instrucțiunea MERGE,Ce instrucțiune SQL permite inserarea sau actualizarea condiționată a datelor?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4']",Instrucțiunea MERGE,MERGE,0.999999999975,1.0,0.8423116242779436,1.0,0.0,0.5,0.0
7,O3mini-high,LOW,C8,,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,NOT NULL,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']",Constrângerea NOT NULL,Ce constrângere SQL impune ca o coloană să nu accepte valori NULL?,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12']",Constrângerea NOT NULL,NOT NULL,0.0,1.0,0.8147436311839193,1.0,0.0,0.6666666666666666,
8,O3mini-high,LOW,C9,,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?",CREATE VIEW,Este corect,,"['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru a crea o vedere.,"Cu ce instrucțiune SQL se creează o vedere, adică o tabelă virtuală care extrage date din tabelele reale?","['Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Extragere de date dintr-o vedere\n➢Extragerea de date se face exact ca în cazul \nunei tabele. \n➢Se pot selecta anumite rânduri sau toată \nvederea. \nSELECT * FROM emp10;\nCurs - BAZE DE DATE 26\n', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru a crea o vedere.,CREATE VIEW,0.0,0.0,0.0,1.0,0.0,0.0,0.0
9,O3mini-high,LOW,C10,,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?",SEQUENCE,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']",Textul furnizat nu conține informații despre obiectul SQL utilizat pentru a genera automat valori unice.,"Ce obiect SQL este folosit pentru a genera automat valori unice, utile de obicei pentru identificatori?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 5 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12', 'Funcţii\n O observaţie importanta este faptul că dacă se \napelează o funcţie SQL ce are un argument (parametru) \negal cu valoarea Null, atunci în mod automat rezultatul \nva avea valoarea Null. \n  Singurele funcţii care nu respectă această regulă \nsunt: \n– CONCAT\n– DECODE\n– DUMP\n– NVL\n– REPLACE\nCurs 4 - BAZE DE DATE 12']",Textul furnizat nu conține informații despre obiectul SQL utilizat pentru a genera automat valori unice.,SEQUENCE,0.0,0.0,0.0,1.0,0.0,0.0,0.67
10,O3mini-high,LOW,C11,,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?",CREATE USER,Este corect,,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']",Textul furnizat nu conține informații despre instrucțiunile SQL utilizate pentru crearea de utilizatori noi conform politicilor de control al accesului în Oracle.,"Cu ce instrucțiune SQL se creează un utilizator nou în Oracle, conform politicilor de control al accesului?","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4', 'Serverul Oracle utilizează constrângeri pentru a preveni \npătrunderea de date invalide în tabele.\nPutem utiliza constrângeri pentru a realiza următoarele \nacțiuni:\n1. Impune reguli datelor unei tabele ori de câte ori un \nrând este inserat, modificat sau şters din tabela. \n2. Prevenirea ştergerii unei tabela în cazul în care există \ndependenţă de alte tabele \n3. Furnizarea regulilor pentru instrumentele Oracle, \ncum ar fi ORACLE DEVELOPER. \nCurs 8 - BAZE DE DATE 4']",Textul furnizat nu conține informații despre instrucțiunile SQL utilizate pentru crearea de utilizatori noi conform politicilor de control al accesului în Oracle.,CREATE USER,0.0,0.0,0.0,1.0,0.0,0.0,1.0
11,O3mini-high,LOW,C12,,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?",relațional,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']",Modelul relațional,"Ce model de baze de date, care organizează datele în tabele interconectate, este descris în acest capitol?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']",Modelul relațional,relațional,0.9999999999875,1.0,0.0,1.0,0.0,0.8,
12,O3mini-high,LOW,C13,,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,PRIMARY KEY,Este corect,,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']",PRIMARY KEY,Cu ce cuvânt cheie SQL se definește o cheie primară pentru a asigura identificarea unică a înregistrărilor în modelul relațional?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nCele mai importante constrângeri de integritate \nsunt: \nConstrângerea de integritate a entităţii care \nstabileşte că fiecare tuplu să fie unic identificat \nprintr-o cheie şi atributul cheie să nu poată fi null;\nCODSTUD NUMEPREN AN FACULTATE GRUPA MEDADM\n101 Popa Ionel 4 Inginerie 145 10.00\n102 Popescu Vasile 1 Drept 113 9.24\n103 Badea George 1 Inginerie 112 8.79\n104 Achim Mimi 2 Economic 126 9.31\n105 Ionescu Mioara 3 Litere 132 10.00\n40', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']",PRIMARY KEY,PRIMARY KEY,0.8687074829807873,1.0,0.8275121087159061,0.5,0.0,1.0,1.0
13,O3mini-high,LOW,C14,,"În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?",modelarea logică,Este corect,,"[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Etapa de modelare logică transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei.","În proiectarea bazelor de date relaționale, ce etapă transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei?","[' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', ' \nCurs 14. Proiectarea bazelor de date relaționale \n \n1. Procesul de proiectare \n \nProiectarea unei baze de date relaționale implică mai multe etape esențiale care asigură \nstructura optimă a datelor și eficiența utilizării acestora. \n \n1.1 Etapele proiectării bazelor de date \n1. Identificarea cerințelor - Colectarea cerințelor utilizatorilor și analiza acestora. \n2. Modelarea conceptuală - Crearea unui model abstract al bazei de date folosind diagrame \nER (Entity-Relationship). \n3. Modelarea logică - Transformarea modelului conceptual într-un model relațional. \n4. Modelarea fizică - Optimizarea modelului logic pentru implementare în SGBD. \n5. Normalizarea - Aplicarea regulilor pentru a elimina redundanța și asigura integritatea \ndatelor. \nExemplu de diagramă ER pentru o bază de date universitară: \nEntități: Student, Profesor, Curs \nRelații: Student se înscrie la Curs, Profesor predă Curs \n \n1.2 Exemplu de modelare conceptuală \nCREATE TABLE Student ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) \n); \n \nCREATE TABLE Profesor ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50) \n); \n \nCREATE TABLE Curs ( \n    Cod INT PRIMARY KEY , \n    Denumire V ARCHAR(100), \n    ProfesorID INT, \n    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ID) \n); \n \nCREATE TABLE Inscriere ( \n    StudentID INT, \n    CursCod INT, \n    PRIMARY KEY (StudentID, CursCod), \n    FOREIGN KEY (StudentID) REFERENCES Student(ID), \n    FOREIGN KEY (CursCod) REFERENCES Curs(Cod) \n); ', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.5. Modelul de date ierarhic\n✓În modelul de date ierarhic (Hierarchical Model) o \nbază de date se reprezintă printr-o structură ierarhică \nde înregistrări de date (records) conectate prin \nlegături (links).\n✓Modelul ierarhic a fost primul model folosit pentru \ndezvoltatea bazelor de date.\n✓Schema conceptuală a unei baze de date în modelul \nierarhic se reprezintă printr-un număr oarecare de \nscheme ierarhice.\n 61', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36']","Etapa de modelare logică transformă modelul conceptual într-un model relațional, pregătind implementarea efectivă a structurii bazei.",modelarea logică,0.999999999975,1.0,0.8218135652218382,0.5,0.021476912089159056,0.09523809523809525,0.0
14,O3mini-high,Medium,Curs 1,,"Ce este o bază de date, conform cursului?","O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",Este corect,,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']",O bază de date este reprezentată cu ajutorul modelului relațional ca o colecție de tabele.,"Ce este o bază de date, conform cursului?","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13', 'Conţinutul cursului\nÎn cadrul acestui curs se vor studia bazele de \ndate prelucrate cu ajutorul sistemului de \ngestiune a bazelor de date\nORACLE Database 12c Express Edition\n 13']",O bază de date este reprezentată cu ajutorul modelului relațional ca o colecție de tabele.,"O bază de date este o colecție organizată de date stocate electronic, care permite accesul, gestionarea și actualizarea eficientă a acestora.",0.8055555555287036,0.0,0.8880062740067308,1.0,0.170068171608128,0.46153846153846156,0.0
15,O3mini-high,Medium,Curs 2,,Ce reprezintă Oracle în cursul prezentat?,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",Este corect,sllde 5,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']",O versiune simplificată a server-ului de baze de date Oracle,Ce reprezintă Oracle în cursul prezentat?,"['2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.4. ORACLE Database 11g Expres Edition\n Aplicatiile de laborator pot fi executate cu \najutorul unei versiuni simplificate a server-ului \nOracle si anume: \nOracle Database 11g Expres Edition\nAceasta se poate descarca gratuit de pe site-ul:\nhttp://www.oracle.com/technetwork/products/exp\nress-edition/downloads/index.html \n40', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.2. Arhitectura SGBD-ului ORACLE\n1. Nucleul Oracle conţine componentele care \ndau tipul relaţional pentru SGBD Oracle:\n➢limbajul relaţional de regăsire SQL \n➢limbajul procedural propriu PL/SQL\n26', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38', '2.3. ORACLE Server\nB. Instanţa Oracle (Oracle instance) este \ncombinaţia logică dintre:\n✓structurile de memorie internă:\n✓SGA - system global area\n✓PGA - program global area\n✓şi procesele Oracle de bază activate la \nmomentul pornirii unei baze de date \n38']",O versiune simplificată a server-ului de baze de date Oracle,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect, operațional pe toată gama de calculatoare.",0.999999999975,0.0,0.8325832440695079,1.0,0.013599471925976851,0.060606060606060615,0.0
16,O3mini-high,Medium,Curs 3,,Ce face clauza ORDER BY într-o interogare SELECT?,"ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",Este corect,sllde 6,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza ORDER BY într-o interogare SELECT ordonează rezultatele interogării într-o ordine specifică, fie crescătoare (ASC), fie descrescătoare (DESC), pe baza unei coloane sau a unei expresii specificate.",Ce face clauza ORDER BY într-o interogare SELECT?,"['Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Exista niste constrangeri la folosirea pseudocoloanelor \nCURRVAL si NEXTVAL:\n➢Cand cererea SELECT se refera la obiecte de tip vedere\n➢Cand in cererea SELECT se utilizeaza cuvantul cheie \nDISTINCT\n➢Cand cererea SELECT contine GROUP BY , HAVING sau \nORDER BY\n➢Cand instructiunea SELECT este folosita intr-o sub-\ninterogare.\n➢Cand este utilizata expresia DEFAULT impreuna cu \nCREATE TABLE sau cu ALTER TABLE\nCurs - BAZE DE DATE 17', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4', 'SINTAXA\nSELECT [DISTINCT] lista_de_expresii\nFROM nume_tabela\nWHERE conditie_linie -- clauza optionala\nORDER BY criterii_sortare_rezultat; -- clauza \noptionala\n 4']","Clauza ORDER BY într-o interogare SELECT ordonează rezultatele interogării într-o ordine specifică, fie crescătoare (ASC), fie descrescătoare (DESC), pe baza unei coloane sau a unei expresii specificate.","ORDER BY sortează liniile rezultatului conform criteriilor specificate; fără aceasta, ordinea rezultatelor este independentă de ordinea inserării.",0.4362433862361155,0.5,0.8619830236806653,1.0,0.026556282775658278,0.11764705882352941,0.57
17,O3mini-high,Medium,Curs 4,,"În ce două categorii se împart funcțiile în SQL, conform cursului?",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,Este corect,slide 8,"['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","1. Funcţii referitoare la o singură înregistrare (single-row functions)
2. Funcţii referitoare la mai multe înregistrări (multiple-row functions)","În ce două categorii se împart funcțiile în SQL, conform cursului?","['Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se pot clasifica în două categorii:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 4 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Funcţii\nFuncţiile se clasifică în două tipuri:\n1. Funcţii referitoare la o singură înregistrare \n(single-row functions)\n2. Funcţii referitoare la mai multe înregistrări \n(multiple-row functions)\nCurs 5 - BAZE DE DATE 8', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']","1. Funcţii referitoare la o singură înregistrare (single-row functions)
2. Funcţii referitoare la mai multe înregistrări (multiple-row functions)",Funcțiile se clasifică în: 1. Funcții referitoare la o singură înregistrare; 2. Funcții referitoare la mai multe înregistrări (funcții de grup).,0.9999999999875,1.0,0.8024856847705667,1.0,0.0,0.693877551020408,0.0
18,O3mini-high,Medium,Curs 5,,"Ce sunt funcțiile de grup în SQL, conform cursului?","Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",Este corect,slide 14,"['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']",Informațiile furnizate nu conțin o definiție a funcțiilor de grup în SQL.,"Ce sunt funcțiile de grup în SQL, conform cursului?","['Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 13', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 40', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48', 'Limbajul SQL\nCereri SELECT pe o tabela\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\n4.3. Funcţii referitoare la mai multe înregistrări\n4.3.1. Clauza GROUP BY\n4.3.2. Excluderea grupurilor (clauza HAVING)\n4.3.3. Imbricarea funcţiilor de grup\nCurs 5 - BAZE DE DATE 48']",Informațiile furnizate nu conțin o definiție a funcțiilor de grup în SQL.,"Funcțiile de grup operează pe un set de rânduri, returnând un singur rezultat pentru fiecare grup (ex. AVG, COUNT, SUM).",0.9093537414836077,0.0,0.0,1.0,0.06837203339116284,0.15384615384615383,0.0
19,O3mini-high,Medium,Curs 6,,Ce este o subinterogare (subquery) în SQL?,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",Este corect,"slide 4,5","['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']",O subinterogare este o instrucțiune SELECT inclusă într-o clauză a unei alte instrucțiuni SQL.,Ce este o subinterogare (subquery) în SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']",O subinterogare este o instrucțiune SELECT inclusă într-o clauză a unei alte instrucțiuni SQL.,"O subinterogare este o instrucțiune SELECT inclusă într-o altă instrucțiune, executată prima, iar rezultatul ei este folosit de interogarea principală.",0.36547619046705354,1.0,0.9829838758574537,1.0,0.28751185327509865,0.6,0.4
20,O3mini-high,Medium,Curs 7,,Ce permite limbajul de manipulare al datelor (DML) în SQL?,"DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",Este corect,slide 4,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Insereaza, actualizeaza si sterge date din tabele",Ce permite limbajul de manipulare al datelor (DML) în SQL?,"['2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Insereaza, actualizeaza si sterge date din tabele","DML permite adăugarea, modificarea și ștergerea datelor din baza de date, fiind nucleul limbajului SQL.",0.0,0.0,0.7858074311129611,0.0,0.020822836897918785,0.08695652173913043,0.86
21,O3mini-high,Medium,Curs 8,,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",Este corect,slide 21,"['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']",Informațiile furnizate în acest context nu definesc constrângerea FOREIGN KEY în SQL.,"Ce definește constrângerea FOREIGN KEY în SQL, conform cursului?","['Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7', 'Definirea Constrângerilor\nSintaxa \nCREATE TABLE [schema.] table \n(column datatype [DEFAULT expr] \n[column_constraint], \n[table_constraint][...]);\nCurs 8 - BAZE DE DATE 7']",Informațiile furnizate în acest context nu definesc constrângerea FOREIGN KEY în SQL.,"FOREIGN KEY stabilește o relație între coloana din tabela copil și cheia primară a tabelei părinte, asigurând integritatea referențială.",0.0,0.0,0.0,1.0,0.036950502881463496,0.10526315789473685,0.0
22,O3mini-high,Medium,Curs 9,,"Ce este o vedere (view) în SQL, conform cursului?","O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",Este corect,slide 4,"['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']",Cursul nu definește ce este o vedere (view) în SQL.,"Ce este o vedere (view) în SQL, conform cursului?","['Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Limbajul SQL\nVederi (Views)\nCurs - BAZE DE DATE 3', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim cererea SQL \nSELECT. \nSELECT * \nFROM emp20;\nCurs - BAZE DE DATE 16\n', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']",Cursul nu definește ce este o vedere (view) în SQL.,"O vedere este o tabelă logică generată printr-o instrucțiune SELECT, fără a stoca date proprii, ci extrăgându-le din tabele.",0.8055555555287036,0.0,0.0,1.0,0.036766117401867277,0.1111111111111111,0.0
23,O3mini-high,Medium,Curs 10,,"De ce se folosesc secvențele în SQL, potrivit cursului?","Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",Este corect,slide 8,"['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']",Acest context nu conține informații despre utilizarea secvențelor în SQL.,"De ce se folosesc secvențele în SQL, potrivit cursului?","['De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60', 'Limbajul SQL\n \n  Limbajul SQL (Structured Query Language) se \nbazează pe studiile lui E.F. Codd, prima implementare a \nacestui limbaj datând din anul 1970.\n  Este un limbaj complet standardizat şi se poate \nutiliza pentru a accesa baze de date:\n1. Oracle\n2. SQL Server\n3. DB2 \n4. MySQL (open-source)\n5. MsSQL\n60']",Acest context nu conține informații despre utilizarea secvențelor în SQL.,"Secvențele generează automat numere întregi unice, esențiale pentru chei primare, evitând problemele de sincronizare.",0.0,0.0,0.0,1.0,0.0217212999031354,0.06666666666666667,
24,O3mini-high,Medium,Curs 11,,"Ce acoperă securitatea bazei de date, conform cursului?","Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",Este corect,slide 4,"['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']",Securitatea sistemului și securitatea datelor,"Ce acoperă securitatea bazei de date, conform cursului?","['tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33', '1.1.Sisteme de baze de date\nMetadatele sunt\nmemorate în \ndicţionarul de \ndate, care \ninclude:\n➢structura bazei\nde date sau\nschema\n➢constrângerile\nde integritate\n➢constrângerile\nde securitate\n 33']",Securitatea sistemului și securitatea datelor,"Securitatea bazei de date acoperă controlul accesului, acordarea privilegiilor de sistem și obiect, protejând datele într-un mediu multi-user.",0.20833333332291665,0.0,0.0,1.0,0.0051781526820915465,0.15384615384615385,0.33
25,O3mini-high,Medium,Curs 12,,"Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",Este corect,pagina 1,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","**Avantaje ale bazelor de date față de fișierele tradiționale:**

* **Reducerea redundanței:** Bazele de date stochează datele într-o singură locație centralizată, eliminând duplicarea și inconsecvențele.
* **Îmbunătățirea integrității:** Bazele de date impun reguli și restricții pentru a asigura acuratețea și validitatea datelor.
* **Acces facil:** Bazele de date oferă instrumente și limbaje de interogare care permit utilizatorilor să acceseze și să manipuleze datele în mod eficient.
* **Concurență:** Bazele de date permit mai multor utilizatori să acceseze și să modifice datele simultan fără a genera erori sau conflicte.
* **Securitate:** Bazele de date implementează mecanisme de securitate, cum ar fi controlul accesului și criptarea, pentru a proteja datele împotriva accesului neautorizat.
* **Independență a datelor:** Bazele de date permit modificarea structurii datelor fără a afecta aplicațiile care le utilizează.
* **Scalabilitate:** Bazele de date pot fi scalate pentru a gestiona volume mari de date și pot fi extinse pentru a îndeplini cerințe în schimbare.
* **Recuperare în caz de dezastru:** Bazele de date oferă mecanisme de recuperare în caz de dezastru, cum ar fi backup-uri și jurnalizare, pentru a proteja datele în cazul unei întreruperi a sistemului.","Care sunt avantajele bazelor de date față de fișierele tradiționale, conform cursului?","['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'Curs 1 \nNoţiuni introductive \ndespre \nteoria generală a bazelor de date\n 2', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26']","**Avantaje ale bazelor de date față de fișierele tradiționale:**

* **Reducerea redundanței:** Bazele de date stochează datele într-o singură locație centralizată, eliminând duplicarea și inconsecvențele.
* **Îmbunătățirea integrității:** Bazele de date impun reguli și restricții pentru a asigura acuratețea și validitatea datelor.
* **Acces facil:** Bazele de date oferă instrumente și limbaje de interogare care permit utilizatorilor să acceseze și să manipuleze datele în mod eficient.
* **Concurență:** Bazele de date permit mai multor utilizatori să acceseze și să modifice datele simultan fără a genera erori sau conflicte.
* **Securitate:** Bazele de date implementează mecanisme de securitate, cum ar fi controlul accesului și criptarea, pentru a proteja datele împotriva accesului neautorizat.
* **Independență a datelor:** Bazele de date permit modificarea structurii datelor fără a afecta aplicațiile care le utilizează.
* **Scalabilitate:** Bazele de date pot fi scalate pentru a gestiona volume mari de date și pot fi extinse pentru a îndeplini cerințe în schimbare.
* **Recuperare în caz de dezastru:** Bazele de date oferă mecanisme de recuperare în caz de dezastru, cum ar fi backup-uri și jurnalizare, pentru a proteja datele în cazul unei întreruperi a sistemului.","Avantajele: elimină redundanța, îmbunătățesc integritatea, oferă acces flexibil și securitate sporită.",0.999999999975,1.0,0.8388911591136928,0.6666666666666666,0.002361756552460452,0.05714285714285714,0.62
26,O3mini-high,Medium,Curs 13,,"Ce caracteristici are modelul relațional de baze de date, conform cursului?","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",Este corect,pagina 1,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, caracteristicile modelului relațional de baze de date includ:

- Organizarea datelor în tabele bidimensionale
- Utilizarea cheilor primare pentru identificarea unică a fiecărei înregistrări
- Cheile străine definesc relațiile între tabele
- Independența datelor față de aplicațiile care le folosesc
- Limbajul de interogare SQL este standardizat","Ce caracteristici are modelul relațional de baze de date, conform cursului?","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 43']","Conform cursului, caracteristicile modelului relațional de baze de date includ:

- Organizarea datelor în tabele bidimensionale
- Utilizarea cheilor primare pentru identificarea unică a fiecărei înregistrări
- Cheile străine definesc relațiile între tabele
- Independența datelor față de aplicațiile care le folosesc
- Limbajul de interogare SQL este standardizat","Modelul relațional organizează datele în tabele, utilizează chei primare și străine pentru integritate și oferă independența datelor față de aplicații.",0.9999999999875,1.0,0.8955906122964663,1.0,0.03976751378638311,0.3466666666666666,0.89
27,O3mini-high,Medium,Curs 14,,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",Este corect,pagina 1,"['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']",Textul furnizat nu conține informații despre etapele de proiectare a bazelor de date relaționale.,"Care sunt etapele proiectării bazelor de date relaționale, potrivit cursului?","['Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a \nbazelor de date\n46', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\n➢Înainte de a începe să realizăm o aplicaţie cu \nbaze de date relaţionale trebuie să cunoaştem \nprincipalele concepte din teoria relaţională.\n➢Acestea sunt absolut necesare, atât pentru \nanaliza şi proiectarea bazei de date \nrelaţionale, cât şi pentru elaborarea \nprogramelor de aplicaţie într-un SGBD \nrelaţional ales.\n 47', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54', 'Concepte de bază din teoria relațională a bazelor de \ndate\nPentru exemplificare considerăm următoarea baza de \ndate FACULTATEcare contine cinci tabele:\n1.Tabela GRUPE cu cheile: profil si codgr=codul grupei\n2.Tabela STUDENTI cu cheile: codgr si codst=codul \nstudentului\n3.Tabela DISCIPLINE cu cheile codob=codul disciplinei si \ndenumire\n4.Tabela PROFESORI cu cheile codprof=codul \nprofesorului, numele si specializarea\n5.Tabela INCADRARE care are chei de la celelalte tabele: \ncodgr, codob si codprof.\n 54']",Textul furnizat nu conține informații despre etapele de proiectare a bazelor de date relaționale.,"Etapele sunt: 1. Identificarea cerințelor, 2. Modelarea conceptuală, 3. Modelarea logică, 4. Modelarea fizică, 5. Normalizarea.",0.0,0.0,0.0,1.0,0.02627961710408444,0.058823529411764705,0.0
28,O3mini-high,High,"C1, C13",C12,"Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",Partial corect,C12,"['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Informațiile furnizate nu conțin o comparație a modelului relațional cu alte modele de baze de date sau o evidențiere a avantajelor fundamentale ale acestuia. Prin urmare, nu pot răspunde la această solicitare.","Comparați modelul relațional cu celelalte modele de baze de date, evidențiind avantajele fundamentale.","['Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Modele de baze de date\nVom prezenta acum două din modele de\nbaze de date care sunt cele mai utilizate:\n1. Modelul de date relaţional\n2. Modelul de date orientate obiect\n 34', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre teoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 57', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35', 'Noţiuni introductive \ndespre \nteoria generală a bazelor de date\n1.1. Sisteme de baze de date\n1.2. Modelul de date relaţional\n1.3. Modelul de date orientate obiect\n1.4. Modelul de date obiect-relaţional\n1.5. Modelul de date ierarhic\n1.6. Modelul de date reţea\n 35']","Informațiile furnizate nu conțin o comparație a modelului relațional cu alte modele de baze de date sau o evidențiere a avantajelor fundamentale ale acestuia. Prin urmare, nu pot răspunde la această solicitare.","Modelul relațional organizează datele în tabele, folosind chei primare și străine pentru integritate și independența datelor” – spre deosebire de modelele ierarhice sau de rețea, care sunt mai rigide.",0.0,0.0,0.0,1.0,0.0159426280433703,0.11428571428571428,0.0
29,O3mini-high,High,"C2, C12",C1,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",Este corect,C2,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']",Contextul furnizat nu conține informații despre evoluția Oracle SGBD-ului sau despre diferențele sale față de alte tipuri de baze de date moderne.,Explicați evoluția SGBD-ului Oracle și diferențele față de alte tipuri de baze de date moderne.,"['S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n3', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n22', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39', 'S.G.B.D. ORACLE\n2.1. Evoluţia şi facilităţile sistemului ORACLE\n2.2. Arhitectura SGBD-ului ORACLE\n2.3. ORACLE Server\n2.4. Oracle Database 11g Express Edition\n39']",Contextul furnizat nu conține informații despre evoluția Oracle SGBD-ului sau despre diferențele sale față de alte tipuri de baze de date moderne.,"Oracle este un SGBD complet relațional, extins, cu facilități din tehnologia orientată obiect” și a evoluat de la arhitectura client/server la NC, integrând tehnici cloud și inovații pentru performanță și flexibilitate.",0.0,0.0,0.0,0.5,0.01179049953454677,0.09523809523809525,0.25
30,O3mini-high,High,"C3, C4",C5,"Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",Este corect,C5,"['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Clauzele WHERE, ORDER BY și funcțiile agregate sunt combinate într-o interogare SQL pentru a obține rezultate sumare în modul următor:

```sql
SELECT [coloane de grup],[funcție agregată(coloană)]
FROM [tabel]
WHERE [condiție]
GROUP BY [coloane de grup]
ORDER BY [coloane de sortare] [ASC/DESC]
```

De exemplu:

```sql
SELECT nume_categorie, SUM(cantitate_vanduta)
FROM tabel_vanzari
WHERE data_vanzarii BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY nume_categorie
ORDER BY SUM(cantitate_vanduta) DESC
```

Această interogare va returna numele categoriilor de produse și cantitatea totală vândută pentru fiecare categorie, grupată pe nume de categorie. Rezultatele vor fi ordonate în ordine descrescătoare a cantității totale vândute.","Cum se combină clauzele WHERE, ORDER BY și funcțiile agregate pentru a obține rezultate sumare?","['4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Ordinea de executie a functiilor de \ngrup\n Serverul Oracle execută funcţiile de grup într-o \nanumită ordine:\n1. Selecţia rândurilor ce respectă clauza WHERE \n2. Gruparea rândurilor obţinute, respectând clauza \nGROUP BY \n3. Calcularea rezultatelor funcţiilor de grup pentru \nfiecare grup în parte \n4. Eliminarea grupurilor ce nu respectă clauza HAVING \n5. Ordonarea rezultatelor respectând clauza GROUP BY.\nCurs 5 - BAZE DE DATE 49', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71', 'Clauza ORDER BY\nunde:\nORDER BY - Specifică ordinea în care sunt ordonate \nrândurile\nASC - Ordonează rândurile crescător\nDESC - Ordonează rândurile descrescător \nSintaxa: \nSELECT coloana\nFROM tabela\n[WHERE conditie] \n[ORDER BY {coloana, expresie} \n[ASC/DESC]];\n 71']","Clauzele WHERE, ORDER BY și funcțiile agregate sunt combinate într-o interogare SQL pentru a obține rezultate sumare în modul următor:

```sql
SELECT [coloane de grup],[funcție agregată(coloană)]
FROM [tabel]
WHERE [condiție]
GROUP BY [coloane de grup]
ORDER BY [coloane de sortare] [ASC/DESC]
```

De exemplu:

```sql
SELECT nume_categorie, SUM(cantitate_vanduta)
FROM tabel_vanzari
WHERE data_vanzarii BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY nume_categorie
ORDER BY SUM(cantitate_vanduta) DESC
```

Această interogare va returna numele categoriilor de produse și cantitatea totală vândută pentru fiecare categorie, grupată pe nume de categorie. Rezultatele vor fi ordonate în ordine descrescătoare a cantității totale vândute.","WHERE filtrează rândurile, ORDER BY sortează rezultatul, iar funcțiile de grup (ex. AVG, COUNT) calculează valori sumare pentru fiecare grup definit prin GROUP BY. Exemplu: „SELECT deptno, AVG(sal) FROM EMP GROUP BY deptno ORDER BY AVG(sal)” – rezultatul fiind o sumă statistică pe departamente.",0.9999999999875,0.5,0.895361995311462,0.3333333333333333,0.019261183364521362,0.21818181818181817,0.33
31,O3mini-high,High,"C4, C3",(C5),"Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",Este corect,"C5, slide 24","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Informațiile furnizate nu conțin răspunsul la întrebarea despre funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și condițiile din clauza WHERE.","Cum se utilizează funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și în condițiile din clauza WHERE?","['Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', 'Exemplu:\n  Pentru afişarea numelui cu majuscule de foloseşte \nfuncţia UPPER.\nSELECT empno, CONCAT(ename, job), ename, \nUPPER(ename)\nFROM EMP; \nCurs 4 - BAZE DE DATE 26\n4.2.1. Funcţii pentru şiruri de caractere', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17', '4.3. Funcții de grup\nSintaxa funcţiilor de grup:\nRezultatele sunt sortate implicit crescător. Pentru o \nordonare descrescătoare se va folosi clauza DESC după \nORDER BY. \nSELECT [coloana,] functie_de_grup(coloana), \n...\nFROM tabel\n[WHERE conditie]\n[GROUP BY coloana]\n[HAVING conditie_de_grupare]\n[ORDER BY coloana];  \nCurs 5 - BAZE DE DATE 17']","Informațiile furnizate nu conțin răspunsul la întrebarea despre funcțiile UPPER, LOWER și INITCAP în manipularea șirurilor și condițiile din clauza WHERE.","Funcțiile UPPER, LOWER și INITCAP transformă șirurile pentru o comparare uniformă. De exemplu, „SELECT empno, UPPER(ename) FROM EMP WHERE INITCAP(ename) = 'Smith'” asigură că literele sunt comparate indiferent de caz, facilitând filtrarea corectă a datelor.",0.249999999975,0.0,0.0,0.5,0.1676784955078518,0.21875,0.0
32,O3mini-high,High,"C6, C3",C5,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",Este corect,"C6, slide 11","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']",Informațiile furnizate nu conțin informații despre mecanismul de execuție al unei subinterogări single-row sau integrarea acesteia în clauza WHERE.,Explicați mecanismul de execuție al unei subinterogări single-row și integrarea acesteia în clauza WHERE.,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43', 'Constrângeri Cascadate\n⮚Constrângerile de tip CASCADE sunt utilizate cu \nclauza DROP COLUMN. \n⮚Constrângerea CASCADE şterge toate constrângerile \nde integritate ce se referă la cheile primare şi unice \ndefinite în coloanele şterse. \n⮚Şterge de asemenea toate constrângerile \nmulticoloane definite în coloanele şterse. \nCurs 8 - BAZE DE DATE 43']",Informațiile furnizate nu conțin informații despre mecanismul de execuție al unei subinterogări single-row sau integrarea acesteia în clauza WHERE.,"O subinterogare single-row se execută înaintea interogării principale, returnând o valoare unică folosită în condiția WHERE. Exemplu: „WHERE sal > (SELECT sal FROM EMP WHERE ename = 'SMITH')” – fiecare salariu este comparat cu valoarea unică obținută din subquery.",0.36547619046705354,0.5,0.0,1.0,0.027076576267554477,0.12121212121212122,0.0
33,O3mini-high,High,C7,"C3, C6",Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,Este corect,C7,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']",Informațiile furnizate nu conțin detalii despre cum să utilizați instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective.,Cum se utilizează instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective?,"['7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.4. Instrucţiunea Merge\nInstrucţiunea MERGE permite inserarea \nsau actualizarea condiţionată a datelor \nîntr-un/dintr-un tabel al bazei de date. \nCurs 7 - BAZE DE DATE 34', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', '7.1.2. Actualizarea datelor dintr-o tabelă\nSchimbarea liniilor existente folosind clauza \nUPDATE.\nSintaxa \nUPDATE tabela \nSET coloana = valoare \n[, coloana = valoare, . . . ] \n[WHERE conditie ]; \nCurs 7 - BAZE DE DATE 21', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n', 'Modificaţi vederea dept_sal utilizând comanda UPDATE. \nUPDATE dept_sal \nSET SAL_MEDIU = SAL_MEDIU + 1000\nWHERE cod = 10;\n \nCurs - BAZE DE DATE 39\n']",Informațiile furnizate nu conțin detalii despre cum să utilizați instrucțiunea UPDATE combinată cu subinterogări pentru a actualiza date selective.,UPDATE poate folosi o subinterogare pentru a seta valori. Exemplu: „UPDATE EMP SET sal = (SELECT AVG(sal) FROM EMP) WHERE deptno = 10” actualizează salariile din departamentul 10 cu media salarială calculată prin subquery.,0.0,0.0,0.0,1.0,0.04814971807094068,0.14035087719298245,0.0
34,O3mini-high,High,"C8, C11",C2,"Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",Este corect,"C11, slide 4","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","**Cheie Primară (PRIMARY KEY):**
* Asigură unicitatea înregistrărilor, împiedicând duplicatele.
* Identifică în mod unic fiecare înregistrare din tabel.

**Cheie Străină (FOREIGN KEY):**
* Menține relații între tabele, referindu-se la o coloană de cheie primară dintr-un alt tabel.
* Asigură integritatea referențială, împiedicând ca înregistrările orfane să fie create sau șterse.

**Constrângerile CHECK:**
* Restricționează valorile care pot fi introduse într-o coloană.
* Permite verificări personalizate pentru a asigura conformitatea cu regulile specifice de afaceri.

**Exemple de aplicare:**

**Cheie Primară:** Coloana `ID` în tabela `Client` este o cheie primară, asigurând că fiecare client are un ID unic.

**Cheie Străină:** Coloana `ClientID` în tabela `Comanda` este o cheie străină care se referă la coloana `ID` din tabela `Client`, creând o relație între comenzi și clienți.

**Constrângeri CHECK:** Coloana `Email` în tabela `Client` are o constrângere CHECK care verifică dacă fiecare adresă de e-mail conține simbolul `@` și un punct (`.`).

Aceste constrângeri ajută la asigurarea integrității datelor prin:
* Prevenirea datelor duplicate
* Menținerea relațiilor corecte între tabele
* Limitarea valorilor introduse la cele valide
* Împiedicarea încălcării regulilor de afaceri","Cum se aplică constrângerile de integritate (PRIMARY KEY, FOREIGN KEY, CHECK) pentru a asigura securitatea și consistența datelor?","[""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", ""2. Integritatea datelor în proiectare \n \nPentru a asigura consistența bazei de date, sunt utilizate mai multe tipuri de constrângeri de \nintegritate: \n1. Cheia primară (PRIMARY KEY) - Asigură unicitatea fiecărei înregistrări. \n2. Cheia străină (FOREIGN KEY) - Asigură referențialitatea corectă între tabele. \n3. Constrângeri CHECK - Restricționează valorile acceptate într-o coloană. \n4. NOT NULL - Impune ca un atribut să nu fie gol. \n5. UNIQUE - Asigură valori unice pentru un atribut. \nExemplu de aplicare a integrității datelor: \nALTER TABLE Student ADD CONSTRAINT chk_email CHECK (Email LIKE '%@%.%'); \n \n \n3. Studii de caz despre proiectarea bazelor de date \n \n3.1. Sistem de gestionare a comenzilor în e-commerce \nO companie de comerț electronic trebuie să gestioneze produse, clienți și comenzi. \nCREATE TABLE Client ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Email V ARCHAR(50) UNIQUE \n); \n \nCREATE TABLE Produs ( \n    ID INT PRIMARY KEY , \n    Nume V ARCHAR(50), \n    Pret DECIMAL(10,2) \n); \n \nCREATE TABLE Comanda ( \n    ID INT PRIMARY KEY , \n    ClientID INT, \n    DataComanda DATE, \n    FOREIGN KEY (ClientID) REFERENCES Client(ID) \n); \n \nCREATE TABLE ComandaProdus ( \n    ComandaID INT, \n    ProdusID INT, \n    Cantitate INT, \n    PRIMARY KEY (ComandaID, ProdusID), \n    FOREIGN KEY (ComandaID) REFERENCES Comanda(ID), \n    FOREIGN KEY (ProdusID) REFERENCES Produs(ID) \n); \n \n "", 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']","**Cheie Primară (PRIMARY KEY):**
* Asigură unicitatea înregistrărilor, împiedicând duplicatele.
* Identifică în mod unic fiecare înregistrare din tabel.

**Cheie Străină (FOREIGN KEY):**
* Menține relații între tabele, referindu-se la o coloană de cheie primară dintr-un alt tabel.
* Asigură integritatea referențială, împiedicând ca înregistrările orfane să fie create sau șterse.

**Constrângerile CHECK:**
* Restricționează valorile care pot fi introduse într-o coloană.
* Permite verificări personalizate pentru a asigura conformitatea cu regulile specifice de afaceri.

**Exemple de aplicare:**

**Cheie Primară:** Coloana `ID` în tabela `Client` este o cheie primară, asigurând că fiecare client are un ID unic.

**Cheie Străină:** Coloana `ClientID` în tabela `Comanda` este o cheie străină care se referă la coloana `ID` din tabela `Client`, creând o relație între comenzi și clienți.

**Constrângeri CHECK:** Coloana `Email` în tabela `Client` are o constrângere CHECK care verifică dacă fiecare adresă de e-mail conține simbolul `@` și un punct (`.`).

Aceste constrângeri ajută la asigurarea integrității datelor prin:
* Prevenirea datelor duplicate
* Menținerea relațiilor corecte între tabele
* Limitarea valorilor introduse la cele valide
* Împiedicarea încălcării regulilor de afaceri","Constrângerile asigură integritatea: PRIMARY KEY identifică unic fiecare rând, FOREIGN KEY “REFERENCES” stabilește relații corecte între tabele, iar CHECK impune condiții (ex.: CHECK(sal > 0)). Aceste reguli „previn pătrunderea de date invalide” și susțin securitatea în medii multi-user.",0.999999999975,0.5,0.8546093151378024,0.7692307692307693,0.01401829379745458,0.12295081967213115,0.64
35,O3mini-high,High,"C9, C3",C4,Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",Este corect,"C9, slide 6","['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Vederile oferă următoarele avantaje:

* Simplifică interogările complexe, permițând utilizarea în interogări SQL simple chiar dacă vederile în sine implică interogări SQL complexe.
* Permit vizualizarea datelor din mai multe tabele fără necesitatea cunoașterii sintaxei JOIN.
* Oferă drepturi de acces diferite pentru diferite grupuri de utilizatori, permițând controlul accesului la date sensibile.",Ce avantaje oferă utilizarea vederilor (views) și cum simplifică ele interogările complexe?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Clasificare\n Vederile se clasifică în: \n1.vederi simple\n2.vederi complexe\n  Pentru început prezentăm vederile \nsimple. \nCurs - BAZE DE DATE 7', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6']","Vederile oferă următoarele avantaje:

* Simplifică interogările complexe, permițând utilizarea în interogări SQL simple chiar dacă vederile în sine implică interogări SQL complexe.
* Permit vizualizarea datelor din mai multe tabele fără necesitatea cunoașterii sintaxei JOIN.
* Oferă drepturi de acces diferite pentru diferite grupuri de utilizatori, permițând controlul accesului la date sensibile.","Vederile sunt „tabele logice” definite printr-o instrucțiune SELECT, care nu stochează date proprii, ci le extrag din tabele. Ele oferă acces restricționat, simplifică join-urile complexe și permit reutilizarea codului SQL, facilitând astfel interogările complexe.",0.15555555554777778,0.0,0.8635323607353333,0.6,0.023355282150143312,0.14285714285714285,0.57
36,O3mini-high,High,"C10, C3",C8,Cum contribuie secvențele și indicii la performanța bazelor de date?,"Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",Este corect,C10,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Îmi pare rău, dar acest document nu oferă informații despre cum secvențele și indicii contribuie la performanța bazelor de date.",Cum contribuie secvențele și indicii la performanța bazelor de date?,"['1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Pentru realizarea unei aplicaţii care foloseşte baze de \ndate se poate proceda în două moduri:\na)Se creează baza de date cu ajutorul unei aplicaţii de tip server \nde baze de date şi se scriu apoi aplicaţiile care accesează baza \nde date într-un limbaj care posedă funcţiile necesare accesării \nserver-ului (frecvent se folosesc limbajele C++, Java, C# sau \nVisual Basic)\nb)Se foloseste o aplicaţie de tip sistem de gestiune de baze de \ndate (S.G.B.D. sau D.B.M.S. - DataBase Management System). \n      Un astfel de sistem oferă un ansamblu de instrumente \nsoftware cu ajutorul cărora se crează atât baza de date cât şi \naplicaţiile prin care aceasta este exploatată. \n      Pentru utilizatorii sistemului de operare Windows cele mai \ncunoscute sisteme de acest fel sunt Access şi Visual FoxPro. \n 18', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11', 'Introducere\nObiectivele specifice:\nCurs: \n✓ Cunoaşterea noţiunilor privind bazele de date relaţionale\n✓ Modele de reprezentare a bazelor de date relaţionale\n✓ Arhitectura bazelor de date relaţionale\n✓ Analiza, implementarea şi prelucrarea bazelor de date cu \najutorul sistemului de gestiune a bazelor de date ORACLE \nDATABASE\nLaborator: \n✓ Se vor cunoaşte toate elementele de utilizare a unui sistem de \ngestiune a bazelor de date SQL (Structured Query Language)\n✓ Realizarea unor aplicatii de gestiune a bazelor de date in APEX\n(Application Express)\n 11']","Îmi pare rău, dar acest document nu oferă informații despre cum secvențele și indicii contribuie la performanța bazelor de date.","Secvențele generează „rapid numere întregi unice” pentru chei primare, evitând blocajele, iar indicii optimizează căutările prin reducerea operațiilor I/O. Astfel, ele îmbunătățesc semnificativ performanța bazei de date.",0.0,0.0,0.0,1.0,0.07306186623318163,0.2333333333333333,0.0
37,O3mini-high,High,"C11, C2",C8,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",Este corect,"C11, slide 18","['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']",Informațiile furnizate nu conțin detalii despre implementarea controlului accesului și gestiunea privilegiilor în Oracle.,Cum se implementează controlul accesului și gestionarea privilegiilor în Oracle?,"['Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Controlul accesului utilizatorilor\nÎntr-un mediu multi-user, vrem sa mentinem \nsecuritatea utilizarii si accesarii  bazei de date. \nSecuritatea bazei de date de pe serverul Oracle \nne permite urmatoarele:\n➢Controlul accesului la baza de date \n➢Acordarea accesului la obiecte specifice din baza de \ndate\n➢Confirmarea privilegiilor date si primite cu ajutorul \ndictionarului de date Oracle\n➢Crearea de sinonime pentru obiectele bazei de date\nCurs - BAZE DE DATE 4', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', 'Confirmarea privilegiilor acordate\n➢Daca se încearca sa se efectueze o operatie \nneautorizata – de exemplu stergerea unui rând \ndintr-o tabela asupra careia nu avem \nprivilegiul DELETE – serverul Oracle nu va \npermite ca operatia sa fie efectuata.\nCurs - BAZE DE DATE 42', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27', '2.2. Arhitectura SGBD-ului ORACLE\nSistemul Oracle creează şi întreţine automat \ndicţionarul de date. \n➢Acesta face parte din baza de date Oracle şi conţine un set \nde tabele şi vizualizari (vederi) accesibile utilizatorilor doar în \nconsultare. \n➢Dicţionarul conţine informaţii de tipul: \n- numele utilizatorilor autorizaţi\n- drepturile de acces\n- numele obiectelor din baza de date\n- structurile de date\n- spaţiul ocupat de date\n- chei de acces\n27']",Informațiile furnizate nu conțin detalii despre implementarea controlului accesului și gestiunea privilegiilor în Oracle.,"Controlul accesului se realizează prin acordarea de privilegii de sistem și obiect de către DBA, folosind comenzi precum CREATE USER și GRANT. Aceste măsuri „asigură securitatea utilizării și accesării bazei de date” într-un mediu multi-user.",0.999999999975,0.5,0.0,0.0,0.034585921141027355,0.07017543859649124,0.0
38,O3mini-high,High,"C12, C1",C13,Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",Este corect,"C12, pagina 2","['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","**Principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne**:

* **Structura datelor**: Sistemele tradiționale de fișiere stochează date în fișiere plate, în timp ce bazele de date moderne utilizează structuri de date relaționale sau ierarhice, care permit organizarea și legarea datelor într-un mod mai eficient.
* **Accesul la date**: Sistemele de fișiere tradiționale necesită ca aplicațiile să parcurgă fișierele secvențial pentru a găsi datele dorite, în timp ce bazele de date moderne oferă funcționalități de căutare și interogare pentru acces rapid la date specificate.
* **Integritatea datelor**: Sistemele de fișiere tradiționale nu au mecanisme încorporate pentru a asigura integritatea datelor, în timp ce bazele de date moderne impun constrângeri și reguli pentru a menține acuratețea și consistența datelor.
* **Concurența**: Sistemele de fișiere tradiționale nu pot gestiona eficient accesul concurent la date, în timp ce bazele de date moderne asigură blocarea și controlul tranzacțiilor pentru a preveni pierderea sau coruperea datelor din cauza accesului simultan.
* **Recuperarea datelor**: Sistemele de fișiere tradiționale nu oferă mecanisme de recuperare în caz de pierdere sau corupere a datelor, în timp ce bazele de date moderne au funcționalități de jurnalizare și backup pentru a restabili datele în caz de nevoie.",Care sunt principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne?,"['1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1.1.Sisteme de baze de date\nUn sistem de baze de date este un sistem \ncomputerizat de evidenţă a informaţiilor. \nInformaţia într-un sistem de baze de date \nconsta atât din date cât şi din informaţii \ndespre date (metadate) cum ar fi relaţiile \ndintre date.\n 20', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1 \n \nCurs 12. Tipuri de baze de date \n \nConcepte ale bazelor de date \n \n \n \n1. Definiții și caracteristici ale bazelor de date \n \nBazele de date sunt fundamentale pentru gestionarea eficientă a informațiilor în era \ndigitală. Comparativ cu sistemele tradiționale bazate pe fișiere, bazele de date oferă multiple \navantaje, inclusiv reducerea redundanței, îmbunătățirea integrității și acces facil la date. \nComponentele unui sistem de baze de date – hardware, software, date, utilizatori și proceduri – \ncolaborează pentru a asigura o administrare eficientă și sigură a datelor. Pe măsură ce tehnologiile \nevoluează, bazele de date devin din ce în ce mai complexe, dar și mai eficiente în gestionarea \nvolumelor mari de informații. \n \n1.1. Ce este o bază de date? \nO bază de date este o colecție organizată de date care sunt stocate electronic și structurate \nîntr-un mod care permite accesul, gestionarea și actualizarea eficientă a acestora. Bazele de date \nsunt utilizate în aproape toate domeniile, inclusiv afaceri, sănătate, educație și cercetare, datorită \ncapacității lor de a gestiona volume mari de informații și de a permite acces rapid la date relevante. \nBazele de date sunt construite pe un model specific, cel mai utilizat fiind modelul relațional, care \norganizează datele în tabele interconectate. Alte modele includ modelul ierarhic, modelul rețea și \nmodelul orientat pe obiecte. Prin utilizarea unui Sistem de Gestionare a Bazelor de Date (SGBD), \nutilizatorii pot crea, interoga și manipula date fără a avea nevoie de cunoștințe avansate de \nprogramare. \nO bază de date trebuie să îndeplinească mai multe caracteristici esențiale: \n✓ Persistența datelor – Datele sunt stocate permanent și nu se pierd după oprirea sistemului. \n✓ Consecvența - Datele trebuie să respecte anumite  reguli de integritate pentru a asigura \nvaliditatea acestora. \n✓ Concurența - Mai mulți utilizatori pot accesa și modifica datele simultan fără a genera \nerori sau conflicte. \n✓ Securitatea - Accesul la date este controlat prin permisiuni și mecanisme de autentificare. \n✓ Independența datelor  - Modificările structurale nu afectează aplicațiile care utilizează \nbaza de date. \n \n1.2. Diferența dintre baze de date și fișiere tradiționale \nÎnainte de apariția bazelor de date moderne, datele erau gestionate în sisteme bazate pe \nfișiere tradiționale. Aceste sisteme aveau limitări semnificative, iar bazele de date au fost \ndezvoltate pentru a rezolva aceste probleme. \n \n1.2.1. Sisteme de fișiere tradiționale \nÎn sistemele tradiționale bazate pe fișiere, datele sunt stocate în fișiere text sau binare, \ngestionate de aplicații software specifice. Fiecare aplicație trebuie să implementeze propriile \nmetode de acces și manipulare a datelor. \n ', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29', '1.1.Sisteme de baze de date\nModelele bazelor de date permit \ndiferenţierea dintre descrierea bazei de date, \ncare este specificată în schemă, şi colecţia de \nconţinuturi sau de valori ale datelor din baza de \ndate la un moment dat, care se numeşte \ninstanţă. \n 29']","**Principalele diferențe între sistemele tradiționale de fișiere și bazele de date moderne**:

* **Structura datelor**: Sistemele tradiționale de fișiere stochează date în fișiere plate, în timp ce bazele de date moderne utilizează structuri de date relaționale sau ierarhice, care permit organizarea și legarea datelor într-un mod mai eficient.
* **Accesul la date**: Sistemele de fișiere tradiționale necesită ca aplicațiile să parcurgă fișierele secvențial pentru a găsi datele dorite, în timp ce bazele de date moderne oferă funcționalități de căutare și interogare pentru acces rapid la date specificate.
* **Integritatea datelor**: Sistemele de fișiere tradiționale nu au mecanisme încorporate pentru a asigura integritatea datelor, în timp ce bazele de date moderne impun constrângeri și reguli pentru a menține acuratețea și consistența datelor.
* **Concurența**: Sistemele de fișiere tradiționale nu pot gestiona eficient accesul concurent la date, în timp ce bazele de date moderne asigură blocarea și controlul tranzacțiilor pentru a preveni pierderea sau coruperea datelor din cauza accesului simultan.
* **Recuperarea datelor**: Sistemele de fișiere tradiționale nu oferă mecanisme de recuperare în caz de pierdere sau corupere a datelor, în timp ce bazele de date moderne au funcționalități de jurnalizare și backup pentru a restabili datele în caz de nevoie.","Bazele de date moderne elimină redundanța, îmbunătățesc integritatea, oferă acces rapid și securitate sporită, spre deosebire de sistemele tradiționale de fișiere, unde datele sunt gestionate prin programe personalizate. „Accesul rapid și sigur la date” este un avantaj major al bazelor de date moderne.",0.36547619046705354,1.0,0.88046205617132,0.5454545454545454,0.018263836631025092,0.14652014652014655,0.33
39,O3mini-high,High,"C13, C4",C5,Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",Este corect,"C13, pagina 1","[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional de reprezentare a bazelor de date asigură integritatea datelor prin implementarea următoarelor mecanisme:

* **Chei primare:** Fiecare tabel are o cheie primară, care este un set de atribute care identifică în mod unic fiecare rând. Aceasta împiedică existența înregistrărilor duplicate și asigură că fiecare rând poate fi găsit în mod eficient.
* **Chei străine:** Cheile străine sunt atribute care fac referire la cheile primare din alte tabele. Aceasta stabilește relații între tabele și asigură integritatea referențială, ceea ce înseamnă că nu vor exista rânduri care fac referire la înregistrări inexistente în alte tabele.

Limbajul de interogare SQL (Structured Query Language) joacă un rol crucial în implementarea constrângerilor și asigurarea integrității datelor în bazele de date relaționale:

* **Declararea constrângerilor:** Instrucțiunea SQL `ALTER TABLE` poate fi utilizată pentru a adăuga sau elimina constrângeri la tabele. Constrângerile precum `NOT NULL`, `UNIQUE` și `FOREIGN KEY` pot fi impuse pentru a valida și asigura integritatea datelor introduse.
* **Verificarea constrângerilor:** Bazele de date verifică automat constrângerile atunci când se încearcă inserarea sau actualizarea datelor. În cazul în care o înregistrare încalcă o constrângere, operația este respinsă și se generează o eroare.
* **Operații cu restricții:** Instrucțiunile SQL precum `DELETE` și `UPDATE` acceptă clauze opționale `WHERE` care pot fi utilizate pentru a filtra rândurile pe baza criteriilor specificate. Aceasta permite aplicarea constrângerilor și prevenirea modificărilor neautorizate la date.",Cum asigură modelul relațional integritatea datelor și ce rol joacă SQL în implementarea constrângerilor?,"[""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", ""Curs 13. Modelul relational de reprezentare a bazelor de date \n \n1. Definiția modelului relațional \nModelul relațional este o abordare a organizării datelor bazată pe tabele (relații), unde \nfiecare tabel conține un set de atribute și tuple (înregistrări). Relațiile dintre tabele sunt definite \nprin chei primare și chei străine, asigurând integritatea datelor. \n \n Caracteristici principale ale modelului relațional: \n- Datele sunt organizate în tabele bidimensionale. \n- Utilizarea cheilor primare pentru a identifica unic fiecare înregistrare. \n- Cheile străine definesc relațiile între tabele. \n- Independența datelor față de aplicațiile care le folosesc. \n- Limbajul de interogare SQL este standardizat. \n \n2. Algebra relațională \nAlgebra relațională este un set de operații matematice utilizate pentru a manipula datele din \nbazele de date relaționale. \n \n2.1. Operațiile fundamentale: \n1. Selecția (σ): Filtrează rândurile care îndeplinesc o anumită condiție. \n   - Ex.: σ (Nume='Popescu') (Student) \n   - SQL echivalent: SELECT * FROM Student WHERE Nume = 'Popescu'; \n \n2. Proiecția (π): Selectează anumite coloane dintr-un tabel. \n   - Ex.: π (Nume, Prenume) (Student) \n   - SQL echivalent: SELECT Nume, Prenume FROM Student; \n \n3. Reuniunea (∪): Combină două relații cu aceleași atribute. \n   - Ex.: Curs1 ∪ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 UNION SELECT * FROM Curs2; \n \n4. Intersecția (∩): Returnează elementele comune între două relații. \n   - Ex.: Curs1 ∩ Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 INTERSECT SELECT * FROM Curs2; \n \n5. Diferența (−): Returnează elementele dintr-o relație care nu se află în cealaltă. \n   - Ex.: Curs1 - Curs2 \n   - SQL echivalent: SELECT * FROM Curs1 EXCEPT SELECT * FROM Curs2; \n \n6. Produsul cartezian (×): Combină fiecare rând din prima relație cu fiecare rând din a doua. \n   - Ex.: Student × Curs \n   - SQL echivalent: SELECT * FROM Student, Curs; \n \n7. Îmbinarea (JOIN): Conectează două relații printr-o condiție comună. \n   - Ex.: Student ⨝ StudentID = Inscriere.StudentID Inscriere "", '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', '1.2.Modelul de date relaţional\nO bază de date este reprezentată cu ajutorul \nmodelului relaţional ca o colecţie de tabele.\nMult mai important, este faptul că acest model este \ndirect legat de conceptul matematic de relaţie şi este \ncompus din:\n1. o parte structurală. Schema bazei de date este o \ncolecţie de scheme de relaţii şi o bază de date este o \ncolecţie de relaţii.\n2. o parte de integritate. Chei primare şi chei străine.\n3. o parte de manipulare. Algebra relaţională şi calcul \nrelaţional.\n 36', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n']","Modelul relațional de reprezentare a bazelor de date asigură integritatea datelor prin implementarea următoarelor mecanisme:

* **Chei primare:** Fiecare tabel are o cheie primară, care este un set de atribute care identifică în mod unic fiecare rând. Aceasta împiedică existența înregistrărilor duplicate și asigură că fiecare rând poate fi găsit în mod eficient.
* **Chei străine:** Cheile străine sunt atribute care fac referire la cheile primare din alte tabele. Aceasta stabilește relații între tabele și asigură integritatea referențială, ceea ce înseamnă că nu vor exista rânduri care fac referire la înregistrări inexistente în alte tabele.

Limbajul de interogare SQL (Structured Query Language) joacă un rol crucial în implementarea constrângerilor și asigurarea integrității datelor în bazele de date relaționale:

* **Declararea constrângerilor:** Instrucțiunea SQL `ALTER TABLE` poate fi utilizată pentru a adăuga sau elimina constrângeri la tabele. Constrângerile precum `NOT NULL`, `UNIQUE` și `FOREIGN KEY` pot fi impuse pentru a valida și asigura integritatea datelor introduse.
* **Verificarea constrângerilor:** Bazele de date verifică automat constrângerile atunci când se încearcă inserarea sau actualizarea datelor. În cazul în care o înregistrare încalcă o constrângere, operația este respinsă și se generează o eroare.
* **Operații cu restricții:** Instrucțiunile SQL precum `DELETE` și `UPDATE` acceptă clauze opționale `WHERE` care pot fi utilizate pentru a filtra rândurile pe baza criteriilor specificate. Aceasta permite aplicarea constrângerilor și prevenirea modificărilor neautorizate la date.","Modelul relațional folosește chei primare și străine pentru a asigura integritatea, iar SQL permite definirea constrângerilor (ex.: PRIMARY KEY, FOREIGN KEY, CHECK). Aceste reguli „mențin coerența și validitatea datelor” la nivel de tabelă.",0.9999999999875,0.3333333333333333,0.9356889271954172,0.30434782608695654,0.023537559464014497,0.12286689419795221,0.24
40,O3mini-high,High,"C7, C6",C3,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",Este corect,Curs ???,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']",Informațiile furnizate nu conțin detalii despre cum să efectuați o operație complexă de manipulare a datelor utilizând subinterogări.,Cum se realizează o operație complexă de manipulare a datelor folosind subinterogări?,"['Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'Crearea unei vederi complexe\nVom utiliza funcţii de grup pentru a afişa o vedere complexă \nasupra a 2 tabele.\nCurs - BAZE DE DATE 32\n', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', 'De ce folosim indecsii?\n➢Indecsii ofera o metode de acces direct catre \ninregistrarile care se doresc extrase.\n➢Scopul lor este de a diminua operatile de intrare/iesire \ncatre disc prin folosirea unei metode de indexare a \ncailor catre acele date. \n➢Indecsii sunt utilizati si mentinuti de catre serverul \nOracle in mod transparent pentru utilizator care nu \nimplica nici o alta actiune ulterioara.\nCurs - BAZE DE DATE 26', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31', '1.1.Sisteme de baze de date\nSGBD-ul utilizează o mulţime \ncomplexă de componente software \npentru a-şi îndeplini funcţiile sale. \nAceste componente includ:\n- managerul de date care furnizează o \ninterfaţă către datele stocate fizic în \nbaza de date;\n- procesorul de interogări care traduce \nlimbajul de interogare în instrucţiuni \npentru managerul de date;\n 31']",Informațiile furnizate nu conțin detalii despre cum să efectuați o operație complexă de manipulare a datelor utilizând subinterogări.,"Operația combină DML și subinterogări pentru actualizări selective. De exemplu: „UPDATE EMP SET sal = sal * 1.1 WHERE sal < (SELECT AVG(sal) FROM EMP)” actualizează salariile angajaților cu valori sub medie, folosind rezultatul unei subinterogări în clauza WHERE.",0.0,0.0,0.0,1.0,0.024074859035470342,0.11940298507462685,0.0
41,O3mini-high,High,"C8, C9",C11,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",Este corect,Curs ???,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']",Contextul furnizat nu conține informații despre modul în care pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în bazele de date.,Cum pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în baze de date?,"['tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'tt\n2) Securitatea bazei de date acopera accesarea \nsi utilizarea obiectelor bazei de date si actiunile \npe care acesti utilizatori le  pot efectua asupra  \nobiectelor.\nCurs - BAZE DE DATE 7\nhttps://www.opensourceforu.com/2020/09/a-comprehensive-look-at-opensource-database-security-concerns/', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'Cuprins\n1. Securitatea bazei de date\n    1.1. Securitatea sistemului\n    1.2. Securitatea datelor \n2. Privilegii de sistem\n3. Privilegii de obiect\n4. Scheme\nCurs - BAZE DE DATE 3', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5', 'tt\nSecuritatea bazei de date poate fi clasificata în \ndoua categorii: \n1) securitatea sistemului\n2) securitatea datelor\nCurs - BAZE DE DATE 5']",Contextul furnizat nu conține informații despre modul în care pot fi utilizate constrângerile și vederile pentru implementarea politicilor de securitate în bazele de date.,"Constrângerile (NOT NULL, FOREIGN KEY, CHECK) asigură „integritatea datelor”, iar vederile controlează accesul la informații sensibile. Împreună, ele permit „controlul accesului la obiecte specifice” și implementează politici stricte de securitate în mediul de baze de date.",0.0,0.0,0.0,1.0,0.10435185733665414,0.24615384615384617,0.0
42,Manual - Test 1,,,1,Ce înseamnă SQL?,Structured Query Language,Este corect,,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Informațiile furnizate nu conțin răspunsul la întrebarea ""Ce înseamnă SQL?"".",Ce înseamnă SQL?,"['Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3', 'Limbajul SQL\nConstrângeri\nCurs 8 - BAZE DE DATE 3']","Informațiile furnizate nu conțin răspunsul la întrebarea ""Ce înseamnă SQL?"".",Structured Query Language,0.0,0.0,0.0,1.0,0.0,0.0,0.0
43,Manual - Test 1,,,2,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,SELECT,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']",Informațiile furnizate nu conțin răspunsul la întrebarea cu privire la instrucțiunea SQL utilizată pentru extragerea datelor dintr-o bază de date.,Ce instrucțiune SQL se folosește pentru extragerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']",Informațiile furnizate nu conțin răspunsul la întrebarea cu privire la instrucțiunea SQL utilizată pentru extragerea datelor dintr-o bază de date.,SELECT,0.0,0.0,0.0,1.0,0.0,0.0,0.0
44,Manual - Test 1,,,3,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,UPDATE,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']",Instrucțiunea SQL utilizată pentru actualizarea datelor dintr-o bază de date este UPDATE.,Ce instrucțiune SQL se folosește pentru actualizarea datelor dintr-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']",Instrucțiunea SQL utilizată pentru actualizarea datelor dintr-o bază de date este UPDATE.,UPDATE,0.0,0.0,0.9073162415933044,0.0,0.030890553181566974,0.13333333333333333,1.0
45,Manual - Test 1,,,4,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,DELETE,Este corect,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']",DELETE,Ce instrucțiune SQL se folosește pentru ștergerea datelor dintr-o bază de date?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '7.1. Limbajul de manipulare al datelor \n(LMD)\nLimbajul de manipulare al datelor este \nnucleul limbajului SQL. \nCând doriţi să adăugaţi, să actualizaţi, sau să \nştergeţi date din baza de date, executaţi \ncomenzi DML(Data Manipulation Language).\nO colecţie de comenzi DML care formează o \nunitate logică reprezintă o tranzacţie. \nCurs 7 - BAZE DE DATE 4', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59']",DELETE,DELETE,0.0,0.0,0.0,1.0,0.0,1.0,
46,Manual - Test 1,,,5,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,INSERT INTO,Este corect,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru inserarea de date noi într-o bază de date.,Ce instrucțiune SQL se folosește pentru inserarea de date noi într-o bază de date?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n59', '2.5. Limbajul SQL\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - data \nquery language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor (DCL \n- data control language)\n       2.5.5. Comenzi ale sublimbajului de control al tranzactiilor \n(TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n66']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru inserarea de date noi într-o bază de date.,INSERT INTO,0.0,0.0,0.0,1.0,0.0,0.0,0.0
47,Manual - Test 1,,,6,"Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?",SELECT FirstName FROM Persons,Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul oferit nu conține informații despre cum să selectați coloana ""FirstName"" din tabelul ""Persons"" folosind SQL.","Folosind SQL, cum se selectează coloana ""FirstName"" din tabelul ""Persons"" ?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22']","Contextul oferit nu conține informații despre cum să selectați coloana ""FirstName"" din tabelul ""Persons"" folosind SQL.",SELECT FirstName FROM Persons,0.0,0.0,0.0,1.0,0.021597011339333432,0.17391304347826086,0.0
48,Manual - Test 1,,,7,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?",SELECT * FROM Persons,Este corect,,"['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']",Nu am acces la informațiile necesare pentru a răspunde la această întrebare. Contextul furnizat nu conține informații despre cum să selectați toate coloanele dintr-un tabel folosind SQL.,"Folosind SQL, cum se selectează toate coloanele din tabelul ""Persons""?","['Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', 'Pentru a vizualiza conţinutul vederii folosim \ncererea SQL SELECT. \nAtenţie: trebuiesc selectate alias-urile de coloană. \nExerciţiu:\n.........\nCurs - BAZE DE DATE 22', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']",Nu am acces la informațiile necesare pentru a răspunde la această întrebare. Contextul furnizat nu conține informații despre cum să selectați toate coloanele dintr-un tabel folosind SQL.,SELECT * FROM Persons,0.0,0.0,0.0,0.5,0.0,0.0,0.0
49,Manual - Test 1,,,8,"Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?",SELECT * FROM Persons WHERE FirstName='Peter',Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Textul furnizat nu conține informații despre modul de selectare a tuturor înregistrărilor din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" folosind SQL.","Folosind SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Textul furnizat nu conține informații despre modul de selectare a tuturor înregistrărilor din tabelul ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" folosind SQL.",SELECT * FROM Persons WHERE FirstName='Peter',0.0,0.0,0.0,1.0,0.014763939041893883,0.1875,0.0
50,Manual - Test 1,,,9,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?",SELECT * FROM Persons WHERE FirstName LIKE 'a%',Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informația furnizată nu conține instrucțiuni SQL, prin urmare nu pot extrage solicitarea de interogare necesară.","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" începe cu litera ""a""?","['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informația furnizată nu conține instrucțiuni SQL, prin urmare nu pot extrage solicitarea de interogare necesară.",SELECT * FROM Persons WHERE FirstName LIKE 'a%',0.0,0.0,0.0,0.0,0.0,0.0,0.0
51,Manual - Test 1,,,10,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,Adevărat,Este corect,,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']",Informațiile furnizate nu conțin detalii despre operatorii OR și AND sau despre modul în care aceștia afectează afișarea înregistrărilor.,Operatorul OR afișează o înregistrare dacă oricare condiție este adevărată; operatorul AND afișează o înregistrare doar dacă toate condițiile sunt adevărate.,"['Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'Funcţii referitoare la o singură înregistrare\nFuncţiile referitoare la o singură înregistrare pot fi \nfolosite în:\na) clauza SELECT - pentru a modifica modul de \nafişare a datelor, pentru a realiza diferite calcule,\netc. \nb) clauza WHERE - pentru a scrie conditia pe baza \ncareia se afişează înregistrările(liniile) \nc) clauza ORDER BY- pentru a afisa datele pe baza \nunor criterii de sortare\nCurs 4 - BAZE DE DATE 14', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'REZULTAT\n Evaluarea valorii de adevar a conditiei din \nWHERE se face doar pe baza datelor aflate pe \nlinia respectiva.\n  Deoarece parcurgerea liniilor specificata de \no cerere SELECT se face dupa un plan de \nexecutie generat de server, folosirea clauzei \nORDER BY este obligatorie în cazul în care se \ndoreste un rezultat sortat dupa anumite criterii.\n 8', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 4 - BAZE DE DATE 11']",Informațiile furnizate nu conțin detalii despre operatorii OR și AND sau despre modul în care aceștia afectează afișarea înregistrărilor.,Adevărat,0.0,0.0,0.0,1.0,0.0,0.0,1.0
52,Manual - Test 1,,,11,"Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',Este corect,,"['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informația furnizată nu conține o demonstrație SQL pentru solicitarea dvs., așa că nu pot răspunde la această întrebare.","Folosind SQL, cum selectezi toate înregistrările dintr-un tabel numit ""Persons"" unde valoarea coloanei ""FirstName"" este ""Peter"" și valoarea coloanei ""LastName"" este ""Jackson""?","['2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informația furnizată nu conține o demonstrație SQL pentru solicitarea dvs., așa că nu pot răspunde la această întrebare.",SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson',0.0,0.0,0.0,0.0,0.0,0.0,0.0
53,Manual - Test 1,,,12,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?",SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']",Textul furnizat nu conține informații despre cum să selectați înregistrări dintr-un tabel SQL utilizând o condiție între.,"Folosing SQL, cum se selectează toate înregistrările din tabelul ""Persons"" unde valoarea coloanei ""LastName"" este între ""Hansen"" și ""Pettersen"" (inclusiv)?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16', '2. CURRVAL este folosita pentru a putea extrage din \ncadrul secventei ultima valoare care a fost generata. \n➢Precum am precizat anterior trebuie utilizata \npseudocoloana NEXTVAL pentru generarea valorii care \nva fi continuta in CURRVAL. \n➢CURRVAL este extras in acelasi mod in care se extrage \nsi valoarea NEXTVAL printr-o cerere SQL SELECT \nimpreuna cu numele secventei pentru care se doreste \naflarea valorii. \n➢Cand cererea se face cu ajutorul sintaxei \nnume_secventa.CURRVAL valoarea returnata va fi \nvaloarea care a fost folosita ultima data in cadrul \naceluiasi proces.\nCurs - BAZE DE DATE 16']",Textul furnizat nu conține informații despre cum să selectați înregistrări dintr-un tabel SQL utilizând o condiție între.,SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen',0.0,0.0,0.0,1.0,0.0,0.0,0.0
54,Manual - Test 2,,,1,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,SELECT DISTINCT,Este corect,,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru a returna doar valori diferite.,Care instrucțiune SQL este utilizată pentru a returna doar valori diferite?,"['7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '7.2. Limbajul de control al datelor (LCD). \nTranzacţii\nControlul tranzacţiilor cu instrucţiuni SQL\nUrmătoarele instrucţiuni SQL sunt utilizate când \napar execuţii (commit) sau refaceri (rollback):\n• COMMIT[WORK]\n• SAVEPOINT nume_savepoint\n• ROLLBACK[WORK] to [SAVEPOINT] nume_savepoint\nDe notat că, COMMIT şi ROLLBACK sunt instrucţiuni \n(blocuri) SQL. \nCurs 7 - BAZE DE DATE 50', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.6. Elemente ale limbajului SQL\nb) Cuvinte rezervate\nLa fel ca în orice limbaj, şi în SQL există o listă de \ncuvinte rezervate. Aceste cuvinte nu pot fi utilizate în \nalt scop decât cel definit iniţial.\nc) Constante\nO constantă sau literal este o valoare fixă care nu \npoate fi modificată.\n68', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)', '2.1. EVOLUŢIA ŞI FACILITĂŢILE SISTEMULUI ORACLE\n• Oferă facilităţi din tehnologia OO, prin care se permite \ndefinirea şi utilizarea de obiecte mari şi complexe\n• Optimizează cererile de regăsire prin reutilizarea \ncomenzilor SQL identice lansate de utilizatori diferiţi şi \nprin realizarea unui plan de execuţie a instrucţiunilor \nSQL\n• Are un grad de securitate sporit prin: \n– server de criptare\n– control trafic reţea\n– niveluri de parolare, etc.\n11SGBD Oracle 8i (continuare)']",Textul furnizat nu conține informații despre instrucțiunea SQL utilizată pentru a returna doar valori diferite.,SELECT DISTINCT,0.0,0.0,0.0,1.0,0.0,0.0,0.0
55,Manual - Test 2,,,2,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,ORDER BY,Este corect,,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']",ORDER BY,Ce cuvânt cheie SQL este folosit pentru a sorta multimea de rezultate?,"['2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Crearea secvenţelor\nO secvenţă poate fi creată utilizând următoarea sintaxa SQL: \n \nCREATE SEQUENCE nume_secventa\n   [INCREMENT BY n]\n   [START WITH n]\n   [{MAXVALUE n| NOMAXVALUE}]\n   [{MINVALUE n| NOMINVALUE}]\n   [{CYCLE | NOCYCLE}]\n   [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 10', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă\n3.1. SELECT. Sintaxa. Efect. Rezultat\n3.2. Lista SELECT\n3.3. Clauza WHERE\n3.4. Clauza ORDER BY\n 3']",ORDER BY,ORDER BY,0.15555555554777778,1.0,0.8394745029355959,1.0,0.0,1.0,
56,Manual - Test 2,,,3,"Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?",SELECT * FROM Persons ORDER BY FirstName DESC,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informațiile furnizate nu conțin instrucțiuni sau informații despre cum să returnați înregistrări dintr-un tabel sortate după un anumit câmp, astfel încât nu pot răspunde la această întrebare.","Folosind SQL, cum se pot returna toate înregistrările dintr-un tabel numit ""Persons"" sortate descrescător după ""FirstName""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', '2.6. Elemente ale limbajului SQL\n Principalele elemente care compun o comanda \nSQL:\na) Nume\n  Toate obiectele dintr-o bază de date: tabele, \ncoloane, vizualizări, indecşi, etc, au un nume.\n  Numele poate fi orice şir de maximum 30 de litere, \ncifre şi caractere speciale (“_”,”#”,”$”), primul caracter \nfiind obligatoriu o literă.\n67', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informațiile furnizate nu conțin instrucțiuni sau informații despre cum să returnați înregistrări dintr-un tabel sortate după un anumit câmp, astfel încât nu pot răspunde la această întrebare.",SELECT * FROM Persons ORDER BY FirstName DESC,0.0,0.0,0.0,0.5,0.0,0.0,0.0
57,Manual - Test 2,,,4,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",Este corect,,"['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']",Această întrebare nu se referă la contextul furnizat.,"Folosind SQL, cum se inserează o înregistrare nouă în tabelul ""Persons""?","['7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', '7.1.1. Adăugare o nouă \nînregistrare\nExemplu \nInserează în tabela Angajati datele personale, \nprecum şi data când acestea au fost introduse, prin \nutilizarea comenzii SYSDATE, care reprezintă data \nsistemului. \nCurs 7 - BAZE DE DATE 14', ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", ""3. Sinonime\nIn felul acesta nu vom mai fi obligati sa accesam in \ncererile noastre SQL tabela de departamente prin \nscrierea numelui tabelei 'department' si este suficienta \ndoar utilizarea denumirii noi create: 'dep'\nSELECT * FROM dep;\nCurs - BAZE DE DATE 46"", 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3', 'Limbajul SQL\nInterogări SELECT pe o singură tabelă (partea II)\n4.1. Funcţii\n4.2. Funcţii referitoare la o singură înregistrare\nCurs 4 - BAZE DE DATE 3']",Această întrebare nu se referă la contextul furnizat.,"INSERT INTO Persons VALUES ('Jimmy', 'Jackson')",0.0,0.0,0.0,0.0,0.0,0.0,0.0
58,Manual - Test 2,,,5,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?",INSERT INTO Persons (LastName) VALUES ('Olsen'),Este corect,,"['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']",Textul furnizat nu conține informațiile necesare pentru a răspunde la întrebarea dvs.,"Folosind SQL, cum se inserează ""Olsen"" ca ""LastName"" în tabelul ""Persons""?","['2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', '2. Indecșii\nUrmatorul query poate fi folosit pentru tabela \n\'dept\'.\nSELECT ic.index_name, ic.column_name,              \nic.column_position col_pos, ix.uniqueness\nFROM   user_indexes ix, user_ind_columns ic\nWHERE  ic.table_name = ix.index_name\nAND      ic.table_name = ""dept"";\nCurs - BAZE DE DATE 36', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38']",Textul furnizat nu conține informațiile necesare pentru a răspunde la întrebarea dvs.,INSERT INTO Persons (LastName) VALUES ('Olsen'),0.0,0.0,0.0,0.0,0.0,0.0,0.0
59,Manual - Test 2,,,6,"Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',Este corect,,"['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Informațiile furnizate nu conțin instrucțiuni despre cum să modificați valorile din coloana ""LastName"" din tabelul ""Persons"".","Cum se poate schimba ""Hansen"" în ""Nilsen"" în coloana ""LastName"" din tabelul ""Persons""?","['Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', 'Modificarea secventelor\nO secventa poate fi modificata folosind urmatoarea interogare generica:\nunde nume_secventa este numele secventei care se doreste a fi modificata. \nAceasta metoda este utila de exemplu pentru cazul in care secventa atinge \nvaloarea maxima si in cazul dorintei de a o folosi in continuare ea intoarce o \neroare.\nALTER SEQUENCE nume_secventa\n [INCREMENT BY n]\n [START WITH n]\n [{MAXVALUE n| NOMAXVALUE}]\n [{MINVALUE n| NOMINVALUE}]\n [{CYCLE | NOCYCLE}] \n [{CACHE |NOCACHE}];\nCurs - BAZE DE DATE 21', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', '3. Sinonime\n➢Un sinonim nu poate fi schimbat odata creat. \n➢El poate sa fie doar distrus. \n➢Distrugerea unui sinonim nu implica si distrugerea \nobiectului de care aliasul este atasat. \n➢Distrugerea unui sinonim este facuta folosind o \ninterogare SQL de tipul urmator:\nDROP [PUBLIC] SYNONYM nume_sinonim\nunde nume_sinonim este numele sinonimului care sa fie \ndistrus.\nCurs - BAZE DE DATE 48', ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n"", ""Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au numele \nîn lista 'ALLEN', 'WARD', 'FORD'. \n 51\n""]","Informațiile furnizate nu conțin instrucțiuni despre cum să modificați valorile din coloana ""LastName"" din tabelul ""Persons"".",UPDATE Persons SET LastName='Nilsen' WHERE LastName='Hansen',0.0,0.0,0.0,1.0,0.021597011339333432,0.07142857142857144,0.0
60,Manual - Test 2,,,7,"Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?",DELETE FROM Persons WHERE FirstName = 'Peter',Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informațiile furnizate nu conțin instrucțiuni SQL pentru ștergerea înregistrărilor din tabelul ""Persons"".","Folosind SQL, cum se șterg înregistrările din tabelul ""Persons"" unde ""FirstName"" este ""Peter""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', '3. Sinonime\n➢Daca dorim sa accesam o tabela pe care un alt utilizator \na creat-o in prealabil si careia ii dorim asignarea unui \nsinonim suntem obligati sa introducem inaintea numelui \ntabelei si numele utilizatorului care a creat tabela, in \nfata numelui tabelei, despartite de un punct.\nExemplu 1 - In acest exemplu vom incerca sa cream un \nsinonim pentru tabela departamente care are un nume \ndestul de lung.\nCREATE PUBLIC SYNONYM dep\nFOR dept;\nCurs - BAZE DE DATE 45', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23', 'O alternativă la alias-urile utilizate în cererea SQL \nsunt alias-urile plasate după CREATE, înaintea cererii \nSELECT.\nDe data aceasta vom crea o vedere cu persoanele \ndin departamentul 30. \nCurs - BAZE DE DATE 23']","Informațiile furnizate nu conțin instrucțiuni SQL pentru ștergerea înregistrărilor din tabelul ""Persons"".",DELETE FROM Persons WHERE FirstName = 'Peter',0.0,0.0,0.0,1.0,0.02627961710408444,0.09090909090909091,0.0
61,Manual - Test 2,,,8,"Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?",SELECT COUNT(*) FROM Persons,Este corect,,"['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","Contextul furnizat nu conține informații despre cum se returnează numărul de înregistrări din tabelul ""Persons"" utilizând SQL.","Folosind SQL, cum se returnează numărul de înregistrări din tabelul ""Persons""?","['2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', '2. Indecșii\nExemplu 2: - Index bazat pe o functie SQL\n➢ Indexul urmator este folosit pentru o tabela de angajati care \neste foarte mare si in general in aplicatii se folosesc \nextragerile de o singura inregistrare din baza de date. \n➢ Daca presupunem ca cea mai frecventa metoda de filtrare a \ncererii SQL este dupa nume si prenume putem crea un index \npe cele doua campuri reunite:\nCREATE INDEX employees_name\nON emp( CONCAT(ename, job) ) \nCurs - BAZE DE DATE 38', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Avantajele utilizării vederilor\n• Vederile pot fi folosite în cereri SQL simple \ncând de fapt ele întorc rezultatul unor cereri \nSQL complexe. \n– Deci putem utiliza vederile în interogarea mai \nmultor tabele fără a şti ce este un join de tabele. \n• O vedere poate fi folosită pentru a obţine date \ndin mai multe tabele.\n• Vederile oferă drepturi de acces pentru grupuri \nde utilizatori.\nCurs - BAZE DE DATE 6', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11', 'Funcţii\n Diferenţa dintre cele două tipuri de funcţii \neste numărul de înregistrări pe care acţionează: \n➢Funcţiile referitoare la o singură înregistrare \nreturnează un singur rezultat pentru fiecare \nrând al tabelei, \n➢pe când funcţiile referitoare la mai multe \nînregistrări returnează un singur rezultat \npentru fiecare grup de înregistrări din tabela.\nCurs 5 - BAZE DE DATE 11']","Contextul furnizat nu conține informații despre cum se returnează numărul de înregistrări din tabelul ""Persons"" utilizând SQL.",SELECT COUNT(*) FROM Persons,0.0,0.0,0.0,1.0,0.01914603069010251,0.07692307692307693,0.0
62,Manual - Test 2,,,9,Care este cel mai cunoscut tip de join?,INNER JOIN,Este corect,,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']",Textul furnizat nu conține informații despre cel mai cunoscut tip de join.,Care este cel mai cunoscut tip de join?,"['6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n Aplicatii rezolvate\n1) Care este numele membrilor din personalul de la \nfirma “COSTICA S.R.L.”, al căror salariu este mai mare \ndecât angajatul cu ID-ul 7698?\n2) Care dintre angajatii Oracle au acelasi id al \ndepartamentului ca si cel corespunzator cu \ndepartamentul RESEARCH?\nCurs 6 - BAZE DE DATE 23', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '6.1. SINGLE ROW SUBQUERIES\n1) Care este numele membrilor din personalul de la firma \n“COSTICA S.R.L.”, al căror salariu este mai mare decât \nangajatul cu ID-ul 7698?\nSELECT ename\nFROM EMP\nWHERE sal >\n    ( SELECT sal \n      FROM EMP\n      WHERE empno = 7698 );\nCurs 6 - BAZE DE DATE 24', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64', '1.6. Modelul de date reţea\nModelul de date reţea (Network Model) \nfoloseşte o structură de graf pentru definirea \nschemei conceptuale a bazei de date:\n➢nodurile grafului sunt tipuri de entităţi \n(înregistrări, records), \n➢iar muchiile grafului reprezintă în mod explicit \nasocierile (legăturile, links) dintre tipurile de \nentităţi.\n 64']",Textul furnizat nu conține informații despre cel mai cunoscut tip de join.,INNER JOIN,0.0,0.0,0.0,1.0,0.0,0.125,0.0
63,Manual - Test 2,,,10,Ce operator este folosit pentru a selecta valori dintr-un interval?,BETWEEN,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']",Operatorul IN,Ce operator este folosit pentru a selecta valori dintr-un interval?,"['6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN - Operatorul IN este folosit dacă în interogarea exterioară clauza \nWHERE este folosită pentru a selecta acele valori care sunt egale cu una dintre \nvalorile din lista returnată de subinterogare (inner query).\nCurs 6 - BAZE DE DATE 31\n', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n1. Operatorul IN\n  Operatorul IN este folosit dacă în interogarea \nexterioară clauza WHERE este folosită pentru a selecta \nacele valori care sunt egale cu una dintre valorile din \nlista returnată de subinterogare (inner query).\nSELECT ename, sal, deptno\nFROM EMP\nWHERE sal IN \n     ( SELECT MIN(sal)\n       FROM EMP\n       GROUP BY deptno );\nCurs 6 - BAZE DE DATE 30', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n', '6.2. MULTIPLE ROW SUBQUERIES\n2. Operatorul ANY - Acest operator este \nfolosit atunci când dorim ca \ninterogarea exterioară să selecteze \nvalori egale, mai mici sau mai mari \ndecât cel puţin o valoare dintre cele \nextrase de subquery.\nCurs 6 - BAZE DE DATE 33\n']",Operatorul IN,BETWEEN,0.0,0.0,0.0,0.0,0.0,0.0,
64,Manual - Test 2,,,11,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,Adevărat,Este corect,,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']",Afirmația este corectă. Constrângerea NOT NULL împiedică o coloană să accepte valori NULL.,Constrângerea NOT NULL impune ca o coloană să nu accepte valori NULL.,"['Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea UNIQUE\nConstrângerea UNIQUE de integritate impune ca fiecare \nvaloare a unei coloane sau set de coloane să fie unică -\ndouă rânduri ale aceluiaşi tabele să nu aibă aceleaşi \nvalori într-o anumită coloana sau set de coloane. \nPermite includerea de valori nule numai dacă \nconstrângerea NOT NULL nu este definită pentru \naceeaşi coloană (valoarea nulă nu este considerată a fi \nechivalentă cu ceva). \nConstrângerea UNIQUE poate fi definită atât la nivel de \nlinie cât şi la nivel de tabelă.\nCurs 8 - BAZE DE DATE 17', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Constrângerea NOT NULL\n• Constrângerea de tip NOT NULL asigură \nfaptul că o coloană să nu conţină valoarea \nnulă. \n• Ea poate fi specificată la nivel de coloană şi \nnu la nivel de tabela. \nCurs 8 - BAZE DE DATE 13', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60', 'Clauza WHERE\n4. Conditia IS NULL \n  Pentru a verifica valorile de tip NULL există condiţia IS \nNULL sau negarea acesteia IS NOT NULL. \nO valoare nulă este o valoare care este sau incorectă, sau \nnecunoscută, sau inaplicabilă de aceea nu poate fi testată cu \n""="". \nO valoare nulă nu este la fel cu ""zero"" care este un \nnumăr.\nDacă valoarea NULL este utilizată într-o comparaţie, \natunci operatorul de comparaţie trebuie să fie IS NULL sau IS \nNOT NULL altfel rezultatul este întotdeauna FALSE. \n 60']",Afirmația este corectă. Constrângerea NOT NULL împiedică o coloană să accepte valori NULL.,Adevărat,0.36547619046705354,1.0,0.8809614973466445,1.0,0.0,0.0,0.0
65,Manual - Test 2,,,12,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,LIKE,Este corect,,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']",LIKE,Ce operator este folosit pentru a căuta un model specificat într-o coloană?,"['Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'Clauza WHERE\n3. LIKE \n  Dacă nu se cunoaşte valoarea exactă căutată, cu ajutorul \ncondiţiei LIKE putem să selectăm rândurile care se potrivesc \ncu un model specificat de caractere. \n  Operaţia de căutare după un model poate fi asemănată \ncu o căutare ""wildcard"".\n  Pentru construirea modelului şirului căutat pot fi folosite \n2 simboluri: \n% : orice secvenţă de 0 sau mai multe caractere \n_ :  un singur caracter (oarecare)\nAceste simboluri pot fi folosite în orice combinaţie de \ncaractere literale. \n 52', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', 'NOTĂ:\n➢Când o coloană a vederii este o funcţie sau o expresie \ntrebuie folosit alias de coloană. \n➢Conţinutul vederii este afişat în acelaşi mod ca până \nacum. \nExerciţiu: Afişaţi conţinutul vederii dept_sal. \nCurs - BAZE DE DATE 33\n', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9', '6. SUBQUERIES (Subinterogari)\nSunt două tipuri de subinterogări(subqueries):\n1) single-row subqueries – care folosesc operatorii single-\nrow: >, =, >=, <, <= şi dau ca rezultat o singură linie.\n2) multiple-row subqueries – care folosesc operatorii \nmultiple-row: IN, ANY , ALL şi dau ca rezultat mai multe \nlinii.\nCurs 6 - BAZE DE DATE 9']",LIKE,LIKE,0.999999999975,1.0,0.0,1.0,0.0,1.0,
66,Manual - Test 2,,,13,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?",CREATE TABLE Customers,Este corect,,"['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']",CREATE TABLE,"Ce instrucțiune SQL este folosită pentru a crea un tabel de bază de date numit ""Customers""?","['Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', 'Limbajul SQL\n3. Limbajul de definire a datelor (LDD) permite definirea \nstructurii tabelelor ce compun bazele de date. \nComenzile utilizate sunt:\n1. CREATE – pentru crearea structurii unei baze de date \nsau a unei tabele\n2. ALTER – pentru modificarea structurii unei baze de \ndate sau a unei tabele\n3. DROP – pentru ştergerea structurii bazei de date\n4. RENAME – schimbarea numelui unei tabele\n5. TRUNCATE – ştergerea conţinutului unei tabele\n63', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', '• Indecsii sunt creati folosind urmatoarea cerere SQL la \nbaza de date:\n• unde numele_index este numele pe care il are \nindexul, numele_tabelei este numele tabelei din baza \nde date pentru a carei campuri indexul va fi creat si \ncamp1, camp2... sunt numele campurilor din tabela \npentru care se creaza acest index. \n• Un index poate fi creat pentru una sau mai multe \ncoloane din aceeasi tabela.\nCREATE INDEX numele_index\nON numele_tabelei (camp1[, camp2].... )\nCurs - BAZE DE DATE 29', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']",CREATE TABLE,CREATE TABLE Customers,0.999999999975,1.0,0.8381199400924436,0.0,0.0,0.8,
67,Manual - Test 3,Hard,,1,Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,Este corect,,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","Îmi pare rău, nu am găsit această informație în contextul furnizat.",Care interogare actualizează salariul tuturor angajaților din departamentul 10 astfel încât să fie mărit cu 10% din salariul mediu al companiei?,"['Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Probleme propuse\n3. Actualizati salariile tuturor angajaților din \ntabela Copy_EMP, prin indexare cu 10%. \nAfișați angajații cu noile salarii în ordinea \ndescrescătoare a acestora. \nCurs 7 - BAZE DE DATE 61', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nExemplu: Listeaza toti angajatii care sunt in \ndepartamentul 10.\nSELECT ename, job, sal\nFROM EMP\nWHERE deptno = 10;  40\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n', 'Clauza WHERE\nRezultatul obtinut - Listeaza toti angajatii care sunt in \ndepartamentul 10.\n 41\n']","Îmi pare rău, nu am găsit această informație în contextul furnizat.",UPDATE EMP SET SAL = SAL + 0.10 * (SELECT AVG(SAL) FROM EMP) WHERE DEPTNO = 10;,0.0,0.0,0.0,1.0,0.0,0.0,
68,Manual - Test 3,Hard,,,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,Este corect,,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']",Textul furnizat nu conține informații despre interogarea care șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor.,Care interogare șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor și returnează numărul de rânduri afectate?,"['6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Exemplu - Gasiti \nangajatii care au un \nsalariu superior \nsalariului mediu al \ndepartamentului lor.\nCurs 6 - BAZE DE DATE 58\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n', 'Clauza WHERE\nRezultatul obtinut - Listează toţi angajaţii care au \nsalariul mai mic sau egal cu 3000:\n 34\n']",Textul furnizat nu conține informații despre interogarea care șterge angajații al căror salariu este mai mic decât salariul mediu al departamentului lor.,DELETE FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO);,0.0,0.0,0.0,1.0,0.016466642419110007,0.0,0.5
69,Manual - Test 3,Hard,,,"Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",Este corect,,"['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","UPDATE EMP
SET sal = sal + (SELECT (SUM(sal)/COUNT(*))*0.05 FROM EMP WHERE deptno = 30)
WHERE deptno = 30;","Scrie o interogare care actualizează salariul fiecărui angajat din departamentul 30, mărindu-l cu 5% din salariul mediu al departamentului său.","['Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', 'Exemplu ALL - Gasiti \nangajatii care au salariul \nmai mic decat oricare \n(toti) angajatii de la \ndepartamentul 30.\n \nCurs 6 - BAZE DE DATE 51\n', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', '6.2. MULTIPLE ROW SUBQUERIES\n2) Scopul interogării următoare este de a afişa salariul minim \npentru fiecare departament al cărui salariu minim este mai mic \ndecât cel mai mic salariu al angajaţilor din departamentul 30.\n  Oricum, subinterogarea nu se execută deoarece are 5 erori. \nGăsiţi erorile şi corectaţi-le.\nSELECT deptno\nFROM EMP\nWHERE MIN(sal)\nHAVING MIN(sal) >\n    GROUP BY deptno\n    SELECT MIN(sal)\n    WHERE deptno < 30;\n1\n2\n 3\n4\n5\nCurs 6 - BAZE DE DATE 42', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50', 'Exemplu ALL \n Gasiti angajatii care au salariul mai mic decat \noricare (toti) angajatii de la departamentul 30.\n \nSELECT ename, deptno, sal\nFROM EMP\nWHERE sal < ALL\n                ( SELECT sal\n                   FROM EMP\n                   WHERE deptno = 30 )\nAND deptno <> 30;\nCurs 6 - BAZE DE DATE 50']","UPDATE EMP
SET sal = sal + (SELECT (SUM(sal)/COUNT(*))*0.05 FROM EMP WHERE deptno = 30)
WHERE deptno = 30;","UPDATE EMP 
SET SAL = SAL + 0.05 * (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) 
WHERE DEPTNO = 30;
",0.0,0.0,0.85726745584937,0.0,0.17525531287426316,0.8108108108108109,1.0
70,Manual - Test 3,Hard,,,Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",Este corect,,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","Informațiile furnizate nu conțin o interogare SQL care să modifice funcția angajaților angajați înainte de anul 2000. Prin urmare, nu pot genera interogarea solicitată.",Scrie o interogare care modifică funcția (JOB) angajaților care au fost angajați înainte de anul 2000 și le schimbă funcția în 'SENIOR'.,"['UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'UPDATE   emp20\nSET    sal_anual = 70000 \nWHERE   cod = 9999\nNotă:\nSe observă că nu se poate schimba codul \ndepartamentului pentru că atunci vederea nu ar mai \nvedea respectiva persoană. \nDeci cu ajutorul clauzei WITH CHECK OPTION \nvederea permite vizualizarea persoanelor din \ndepartamentul 20 şi nu permite schimbarea codului \npentru persoanele selectate în vedere. \n \nCurs - BAZE DE DATE 43', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', 'Probleme propuse\n2. Creati o copie a tabelei EMP cu numele \nCopy_EMP care sa conțină toate campurile \ntabelei originale. \nAfisati din tabela Copy_EMP numele, salariul și \ndepartamentul pentru toți angajații care au \nsalariul cuprins intre 1000 si 2000. \nCurs 7 - BAZE DE DATE 60', ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n"", ""Clauza WHERE\nDar ordinea se poate modifica dacă se folosesc \nparanteze. \nSELECT *\nFROM EMP\nWHERE (job = 'MANAGER' OR job = 'ANALYST')\nAND sal < 3000;\n 67\n""]","Informațiile furnizate nu conțin o interogare SQL care să modifice funcția angajaților angajați înainte de anul 2000. Prin urmare, nu pot genera interogarea solicitată.","UPDATE EMP 
SET JOB = 'SENIOR' 
WHERE EXTRACT(YEAR FROM HIREDATE) < 2000;",0.0,0.0,0.0,1.0,0.022869567780619007,0.05,0.0
71,Manual - Test 4,Negativ,,,Cum e vremea la galati ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']",Informația solicitată nu se găsește în contextul furnizat.,Cum e vremea la galati ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n 86', 'Întrebări?\n77', 'Întrebări?\n77']",Informația solicitată nu se găsește în contextul furnizat.,Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.09999999999999999,
72,Manual - Test 4,Negativ,,,Cati ani a trait Michael Jackson ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']",Informația solicitată nu se regăsește în contextul furnizat.,Cati ani a trait Michael Jackson ?,"['Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\nCurs - BAZE DE DATE 51', 'Întrebări?\nCurs - BAZE DE DATE 51']",Informația solicitată nu se regăsește în contextul furnizat.,Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.09999999999999999,
73,Manual - Test 4,Negativ,,,Ce o carte ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","The provided context does not have any information about books, so I cannot answer the user prompt.",Ce o carte ?,"['Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n77', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 69', 'Întrebări?\n 86', 'Întrebări?\n 86']","The provided context does not have any information about books, so I cannot answer the user prompt.",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,1.0
74,Manual - Test 4,Negativ,,,Cat face 2 + 2 ?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']",The provided context does not contain the answer to the user prompt.,Cat face 2 + 2 ?,"['Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Cuprins\n 1. Secvente\n 2. Indecsi\n 3. Sinonime\nCurs - BAZE DE DATE 5', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 3 \nLimbajul SQL \n 2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2', 'Curs 2 \nSistemul de gestiune a bazelor de date\nORACLE\n2']",The provided context does not contain the answer to the user prompt.,Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.0,0.0,1.0
75,Manual - Test 4,Negativ,,,Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Textul furnizat nu conține informații despre diferențele dintre bazele de date distribuite și NoSQL. Prin urmare, nu pot răspunde la această întrebare.",Care dintre următoarele afirmații este corectă cu privire la diferențele dintre bazele de date distribuite și NoSQL?,"['Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4', 'S.G.B.D. ORACLE\n2.5. Limbajul SQL. Categorii de comenzi ale limbajului SQL:\n       2.5.1. Comenzi ale sublimbajului de interogare (DQL - \ndata query language)\n       2.5.2. Comenzi ale sublimbajului de manipulare (DML - \ndata manipulation language)\n       2.5.3. Comenzi ale sublimbajului de definire a datelor \n(DDL - data definition language)\n       2.5.4. Comenzi ale sublimbajului de control al datelor \n(DCL - data control language)\n       2.5.5. Comenzi ale sublimbajului de control al \ntranzactiilor (TCL - transaction control language)\n2.6. Elemente ale limbajului SQL\n4']","Textul furnizat nu conține informații despre diferențele dintre bazele de date distribuite și NoSQL. Prin urmare, nu pot răspunde la această întrebare.",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.028398387225677894,0.1142857142857143,1.0
76,Manual - Test 4,Negativ,,,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,Nu am gasit informatii in curs despre intrebarea ta,,,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']",Acest context nu conține informații despre avantajele bazelor de date NoSQL față de bazele de date distribuite tradiționale.,Ce avantaj major oferă bazele de date NoSQL față de bazele de date distribuite tradiționale?,"['Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68', 'Concluzii\n1. O subinterogare este o instructiune SELECT\ninclusa într-o clauza a altei instructiuni SQL. \n2. Subinterogarile sunt folositoare atunci cînd \ninterogarea se bazeaza pe criterii necunoscute.\n3. Subinterogarile au urmatoarele caracteristici:\na) Pot transmite un rand de date instructiunii principale care \ncontine un operator single-row, precum: =, <>, >, >=, < sau <=;\nb) Pot transmite rînduri multiple de date instructiunii  principale \ncare contine un operator multiple-row, precum: IN, ANY sau \nALL;\nc) Sunt primele procesate de catre server-ul Oracle, iar clauzele \nWHERE si HAVING folosesc rezultatele;\nd) Pot contine functii de grup.Curs 6 - BAZE DE DATE 68']",Acest context nu conține informații despre avantajele bazelor de date NoSQL față de bazele de date distribuite tradiționale.,Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.020244462660665506,0.13333333333333333,1.0
77,Manual - Test 4,Negativ,,,Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,Nu am gasit informatii in curs despre intrebarea ta,,,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Textul furnizat nu conține informații despre bazele de date distribuite sau NoSQL, astfel încât nu pot răspunde la această întrebare.",Descrie scenariile în care o bază de date distribuită ar fi mai potrivită decât o bază de date NoSQL.,"['Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Indecșii bazați pe expresii\n➢Indecsi mai pot fi adaugati nu numai pe campuri \nsimple din baza de date. \n➢Ei pot sa fie folositi de asemenea pe anumite \nexpresii. \n➢Aceste expresii pot fi construite din campuri din \ntabela, constante, functii SQL sau functii definite de \ncatre utilizator. \n➢In felul acesta se pot optimiza cererile de extragere \ncare contin conditii complexe bazate pe calcule.\nCurs - BAZE DE DATE 37', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Conţinutul cursului\nLimbajul de interogare a bazelor de date în care se \nvor face exemplificările noţiunilor teoretice va fi \nSQL (Structured Query Language).\n 14\n', 'Interogarea bazelor de date - \nLimbajul SQL \n58', 'Interogarea bazelor de date - \nLimbajul SQL \n58']","Textul furnizat nu conține informații despre bazele de date distribuite sau NoSQL, astfel încât nu pot răspunde la această întrebare.",Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,0.6666666666666666,0.017272237992167868,0.12121212121212122,1.0
78,Manual - Test 4,Negativ,,,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,Nu am gasit informatii in curs despre intrebarea ta,,,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']",Textul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit.,Care sunt principalele provocări ale utilizării bazelor de date NoSQL într-un sistem distribuit?,"['2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '2.5. Limbajul SQ\n SQL utilizează o sintaxă foarte simplă şi uşor de \nfolosit. \n  Comenzile SQL sunt grupate în cinci categorii, \nastfel:\n1. Limbajul de interogare permite regăsirea liniilor \nmemorate în tabelele bazelor de date. \n  Comanda utilizată este SELECT.\n61', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', '3 \n \n2. Software \nSoftware-ul este componenta care gestionează și controlează baza de date. Principalele elemente \ninclud: \n✓ Sistemul de Gestionare a Bazelor de Date \n(SGBD) - Software care permite crearea, \nmanipularea și interogarea bazelor de date. \nExemple de SGBD -uri: MySQL, \nPostgreSQL, Oracle, Microsoft SQL \nServer. \n✓ Sistemul de operare  - Asigură \ninteracțiunea dintre hardware și software-ul \nbazei de date. \n✓ Aplicațiile utilizatorilor - Programe care interacționează cu baza de date pentru a furniza \nservicii specifice. \n \n3. Date \nDatele reprezintă componenta centrală a oricărui \nsistem de baze de date. Acestea pot fi: \n✓ Date brute  - Informațiile primare stocate în \ntabele. \n✓ Metadate - Informații despre structura bazei \nde date, precum tipurile de date și relațiile \ndintre tabele. \n✓ Indexuri - Structuri utilizate pentru a accelera \ncăutările și interogările în baze de date mari. \n \n4. Utilizatori \nUtilizatorii bazei de date pot fi clasificați în mai multe \ncategorii: \n✓ Administratorii bazei de date (DBA)  - \nResponsabili pentru gestionarea și întreținerea bazei \nde date. \n✓ Dezvoltatorii de aplicații  - Creează software care \ninteracționează cu baza de date. \n✓ Utilizatori finali  - Accesează baza de date prin \naplicații sau interfețe specifice pentru a introduce \nsau interoga date. \n \n5. Proceduri și politici \nProcedurile și politicile definesc regulile și bunele practici pentru utilizarea bazei de date. Acestea \ninclud: \n✓ Reguli de securitate - Politici de acces și autentificare. \n✓ Proceduri de backup și recuperare - Planuri pentru protejarea datelor împotriva pierderii \naccidentale. \n✓ Norme de utilizare  - Standardele stabilite pentru gestionarea datelor și interacțiunea \nutilizatorilor cu sistemul. \n', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3', 'Limbajul SQL\nAlte obiecte din baza de date:\n \n    1. Secvente\n 2. Indecși\n 3. Sinonime \nCurs - BAZE DE DATE 3']",Textul furnizat nu conține informații despre provocările utilizării bazelor de date NoSQL într-un sistem distribuit.,Nu am gasit informatii in curs despre intrebarea ta,0.0,1.0,0.0,1.0,0.024455939372403628,0.13793103448275865,1.0
